{"version":3,"sources":["lamb.js"],"names":["host","always","value","compose","functions","arguments","args","len","length","apply","this","identity","partial","fn","_argsTail","boundArg","lastIdx","newArgs","argsLen","i","_","_argsToArrayFrom","idx","result","Array","_asPartial","argsHolder","argsHolderLen","canApply","_comparer","a","b","String","isSVZ","_compareWith","criteria","criterion","compare","index","isDescending","_currier","arity","isRightCurry","isAutoCurry","holderLen","newArgsLen","reverse","_curry","_flatten","array","isDeep","output","j","vLen","isArray","_getInsertionIndex","element","comparer","start","end","pivot","_getNumConsecutiveHits","arrayLike","predicate","predicateContext","bind","_getPadding","source","char","isNil","type","_repeat","Math","ceil","_getPathInfo","obj","parts","walkNonEnumerables","_makeTypeErrorFor","key","target","_getPathKey","isUndefined","isValid","includeNonEnumerables","Object","_isEnumerable","n","_groupWith","makeValue","iteratee","iterateeContext","_immutable","seen","indexOf","push","freeze","forEach","getOwnPropertyNames","isNull","_invoker","boundArgs","methodName","method","boundArgsLen","ofs","_isArrayIndex","Number","_isOwnEnumerable","_safeEnumerables","_keyToPairIn","_makeArrayChecker","defaultResult","_makeCriteria","sorters","map","_makeCriterion","_sorter","_makeReducer","step","accumulator","initialValue","nCalls","TypeError","desiredType","toLowerCase","_merge","getKeys","reduce","_partialWithIteratee","optionalArgument","f","binary","times","_setIn","prop","_setIndex","updater","slice","_toNaturalIndex","_setPathIn","v","targetKey","reader","isInteger","_toPathParts","path","separator","split","contains","fromIndex","isIn","filter","find","findIndex","adapter","list","allOf","predicates","anyOf","condition","trueFn","falseFn","is","isGT","isGTE","isLT","isLTE","not","unless","call","when","add","clamp","min","max","NaN","clampWithin","divide","generate","limit","isFinite_","isFinite","isSafeInteger","abs","modulo","floor","multiply","randomInt","random","range","remainder","subtract","isInstanceOf","constructor","isType","typeName","_objectProto","toString","getAt","getIndex","getIn","getKey","getPath","getPathIn","pathInfo","setAt","setIn","setKey","setPath","setPathIn","updateAt","updateIn","enumerables","updateKey","updatePath","updatePathIn","appendTo","concat","difference","rest","shallowFlatten","unary","isInRest","dropN","dropWhile","flatMap","el","arr","rLen","flatten","insert","splice","insertAt","intersection","uniques","item","everyIn","partition","pluck","pullFrom","values","take","takeN","takeWhile","transpose","elementLen","minLen","hasNaN","sort","sortedInsert","sortWith","application","applyTo","aritize","asPartial","collect","curry","curryable","curryableRight","curryRight","debounce","timespan","timeoutID","debounced","clearTimeout","setTimeout","flip","getArgAt","invoker","invokerOn","mapArgs","mapper","mapWith","tapArgs","tappers","tappersLen","throttle","lastCall","now","Date","checker","message","keyPaths","pathSeparator","getValues","fromPairs","pairsList","pair","has","hasKey","hasKeyValue","hasOwnKey","hasOwn","hasPathValue","immutable","keySatisfies","make","names","valuesLen","pathExists","pathExistsIn","pathSatisfies","pick","whitelist","pickIf","rename","keysMap","oldKeys","renameWith","skip","blacklist","validate","checkers","errors","_checker","padLeft","padRight","repeat","testWith","pattern","s","_search","lamb","create","_version","_arrayProto","prototype","generic","Function","propertyIsEnumerable","_pairsFrom","_safeKeys","keys","search","_tearFrom","_unsafeKeyListFrom","_valuesFrom","every","filterWith","findIndexWhere","findWhere","reduceRight","reduceRightWith","reduceWith","someIn","some","isNot","head","last","setIndex","updateIndex","append","drop","flatMapWith","init","partitionWith","pluckKey","pull","tail","union","zip","zipWithIndex","count","countBy","group","groupBy","indexBy","sorter","sorterDesc","pipe","hasOwnProperty","merge","mergeOwn","ownPairs","ownValues","pairs","pickKeys","renameKeys","skipIf","skipKeys","tear","tearOwn","validateWith","exports","module","define","amd"],"mappings":"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","file":"lamb.min.js","sourcesContent":["/**\n * @overview lamb - A lightweight, and docile, JavaScript library to help embracing functional programming.\n * @author Andrea Scartabelli <andrea.scartabelli@gmail.com>\n * @version 0.47.0\n * @module lamb\n * @license MIT\n * @preserve\n */\n(function (host) {\n    \"use strict\";\n\n    var lamb = Object.create(null);\n\n    /**\n     * The current module version.\n     * @memberof module:lamb\n     * @private\n     * @type String\n     */\n    lamb._version = \"0.47.0\";\n\n    // alias used as a placeholder argument for partial application\n    var _ = lamb;\n\n    // some prototype shortcuts for internal use\n    var _arrayProto = Array.prototype;\n    var _objectProto = Object.prototype;\n\n    /**\n     * Builds a function that returns a constant value.\n     * It's actually the simplest form of the K combinator or Kestrel.\n     * @example\n     * var truth = _.always(true);\n     *\n     * truth() // => true\n     * truth(false) // => true\n     * truth(1, 2) // => true\n     *\n     * // the value being returned is actually the\n     * // very same value passed to the function\n     * var foo = {bar: \"baz\"};\n     * var alwaysFoo = _.always(foo);\n     *\n     * alwaysFoo() === foo // => true\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {Function}\n     */\n    function always (value) {\n        return function () {\n            return value;\n        };\n    }\n\n    /**\n     * Returns a function that is the composition of the functions given as parameters.\n     * Each function consumes the result of the function that follows.\n     * @example\n     * var sayHi = function (name) { return \"Hi, \" + name; };\n     * var capitalize = function (s) {\n     *     return s[0].toUpperCase() + s.substr(1).toLowerCase();\n     * };\n     * var fixNameAndSayHi = _.compose(sayHi, capitalize);\n     *\n     * sayHi(\"bOb\") // => \"Hi, bOb\"\n     * fixNameAndSayHi(\"bOb\") // \"Hi, Bob\"\n     *\n     * var users = [{name: \"fred\"}, {name: \"bOb\"}];\n     * var sayHiToUser = _.compose(fixNameAndSayHi, _.getKey(\"name\"));\n     *\n     * _.map(users, sayHiToUser) // [\"Hi, Fred\", \"Hi, Bob\"]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.pipe|pipe}\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function compose () {\n        var functions = arguments;\n\n        return function () {\n            var args = arguments;\n            var len = functions.length;\n\n            while (len--) {\n                args = [functions[len].apply(this, args)];\n            }\n\n            return args[0];\n        };\n    }\n\n    /**\n     * Creates generic functions out of methods.\n     * @author A very little change on a great idea by [Irakli Gozalishvili]{@link https://github.com/Gozala/}.\n     * Thanks for this *beautiful* one-liner (never liked your \"unbind\" naming choice, though).\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @example\n     * // Lamb's \"slice\" is actually implemented like this\n     * var slice = _.generic(Array.prototype.slice);\n     *\n     * slice([\"foo\", \"bar\", \"baz\"], 0, -1) // => [\"foo\", \"bar\"]\n     *\n     * // the function will work with any array-like object\n     * slice(\"fooBAR\", 0, 3) // => [\"f\", \"o\", \"o\"]\n     *\n     * @param {Function} method\n     * @returns {Function}\n     */\n    var generic = Function.bind.bind(Function.call);\n\n    /**\n     * The I combinator. Any value passed to the function is simply returned as it is.\n     * @example\n     * var foo = {bar: \"baz\"};\n     *\n     * _.identity(foo) === foo // true\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {*} The value passed as parameter.\n     */\n    function identity (value) {\n        return value;\n    }\n\n    /**\n     * Builds a partially applied function. The <code>lamb</code> object itself can be used\n     * as a placeholder argument and it's useful to alias it with a short symbol such as <code>_</code>.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\", active: true, confirmedMail: true},\n     *     {id: 2, name: \"Jane\", active: true, confirmedMail: false},\n     *     {id: 3, name: \"Mario\", active: false, confirmedMail: false}\n     * ];\n     * var isKeyTrue = _.partial(_.hasKeyValue, _, true);\n     * var isActive = isKeyTrue(\"active\");\n     * var hasConfirmedMail = isKeyTrue(\"confirmedMail\");\n     *\n     * _.map(users, isActive) // => [true, true, false]\n     * _.map(users, hasConfirmedMail) // => [true, false, false]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.asPartial|asPartial}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @param {Function} fn\n     * @param {...*} args\n     * @returns {Function}\n     */\n    function partial (fn) {\n        var args = _argsTail.apply(null, arguments);\n\n        return function () {\n            var lastIdx = 0;\n            var newArgs = [];\n            var argsLen = args.length;\n\n            for (var i = 0, boundArg; i < argsLen; i++) {\n                boundArg = args[i];\n                newArgs[i] = boundArg === _ ? arguments[lastIdx++] : boundArg;\n            }\n\n            for (var len = arguments.length; lastIdx < len; lastIdx++) {\n                newArgs[i++] = arguments[lastIdx];\n            }\n\n            return fn.apply(this, newArgs);\n        };\n    }\n\n    lamb.always = always;\n    lamb.compose = compose;\n    lamb.generic = generic;\n    lamb.identity = identity;\n    lamb.partial = partial;\n\n    /**\n     * Builds an array with the received arguments excluding the first one.<br/>\n     * To be used with the arguments object, which needs to be passed to the apply\n     * method of this function.\n     * @private\n     * @function\n     * @param {...*} value\n     * @returns {Array}\n     */\n    var _argsTail = _argsToArrayFrom(1);\n\n    /**\n     * Builds helper functions to extract portions of the arguments\n     * object rather efficiently without having to write for loops\n     * manually for each case.<br/>\n     * The arguments object needs to be passed to the apply method\n     * of the generated function.\n     * @private\n     * @param {Number} idx\n     * @returns {Function}\n     */\n    function _argsToArrayFrom (idx) {\n        return function () {\n            var argsLen = arguments.length || idx;\n            var len = argsLen - idx;\n            var result = Array(len);\n\n            for (var i = 0; i < len; i++) {\n                result[i] = arguments[i + idx];\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Keeps building a partial application of the received function as long\n     * as it's called with placeholders; applies the original function with\n     * the collected parameters otherwise.\n     * @private\n     * @param {Function} fn\n     * @param {Array} argsHolder\n     * @returns {Function|*}\n     */\n    function _asPartial (fn, argsHolder) {\n        return function () {\n            var argsHolderLen = argsHolder.length;\n            var argsLen = arguments.length;\n            var lastIdx = 0;\n            var newArgs = [];\n            var canApply = true;\n\n            for (var i = 0; i < argsLen; i++) {\n                if (arguments[i] === _) {\n                    canApply = false;\n                    break;\n                }\n            }\n\n            for (var idx = 0, boundArg; idx < argsHolderLen; idx++) {\n                boundArg = argsHolder[idx];\n                newArgs[idx] = lastIdx < argsLen && boundArg === _ ? arguments[lastIdx++] : boundArg;\n            }\n\n            while (lastIdx < argsLen) {\n                newArgs[idx++] = arguments[lastIdx++];\n            }\n\n            return canApply ? fn.apply(this, newArgs) : _asPartial(fn, newArgs);\n        };\n    }\n\n    /**\n     * The default comparer for sorting functions.<br/>\n     * If the given values are of different types they\n     * will be both converted to strings.<br/>\n     * Uses the SameValueZero comparison.\n     * @private\n     * @param {*} a\n     * @param {*} b\n     * @returns {Number} -1 | 0 | 1\n     */\n    function _comparer (a, b) {\n        var result = 0;\n\n        if (typeof a !== typeof b) {\n            a = String(a);\n            b = String(b);\n        }\n\n        /* eslint-disable no-self-compare */\n\n        if (!isSVZ(a, b)) {\n            if (a > b || a !== a) {\n                result = 1;\n            } else if (a < b || b !== b) {\n                result = -1;\n            }\n        }\n\n        /* eslint-enable no-self-compare */\n\n        return result;\n    }\n\n    /**\n     * Accepts a list of sorting criteria with at least one element\n     * and builds a function that compares two values with such criteria.\n     * @private\n     * @param {Sorter[]} criteria\n     * @returns {Function}\n     */\n    function _compareWith (criteria) {\n        return function (a, b) {\n            var len = criteria.length;\n            var criterion = criteria[0];\n            var result = criterion.compare(a.value, b.value);\n\n            for (var i = 1; result === 0 && i < len; i++) {\n                criterion = criteria[i];\n                result = criterion.compare(a.value, b.value);\n            }\n\n            if (result === 0) {\n                result = a.index - b.index;\n            }\n\n            return criterion.isDescending ? -result : result;\n        };\n    }\n\n    /**\n     * Used by curry functions to collect arguments until the arity is consumed,\n     * then applies the original function.\n     * @private\n     * @param {Function} fn\n     * @param {Number} arity\n     * @param {Boolean} isRightCurry\n     * @param {Boolean} isAutoCurry\n     * @param {Array} argsHolder\n     * @returns {Function}\n     */\n    function _currier (fn, arity, isRightCurry, isAutoCurry, argsHolder) {\n        return function () {\n            var holderLen = argsHolder.length;\n            var argsLen = arguments.length;\n            var newArgsLen = holderLen + (argsLen > 1 && isAutoCurry ? argsLen : 1);\n            var newArgs = Array(newArgsLen);\n\n            for (var i = 0; i < holderLen; i++) {\n                newArgs[i] = argsHolder[i];\n            }\n\n            for (; i < newArgsLen; i++) {\n                newArgs[i] = arguments[i - holderLen];\n            }\n\n            if (newArgsLen >= arity) {\n                return fn.apply(this, isRightCurry ? newArgs.reverse() : newArgs);\n            } else {\n                return _currier(fn, arity, isRightCurry, isAutoCurry, newArgs);\n            }\n        };\n    }\n\n    /**\n     * Prepares a function for currying by setting the proper arity for\n     * the <code>_currier</code> function.\n     * If the desumed arity isn't greater than one, it will return the received\n     * function itself, instead.\n     * @private\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @param {Boolean} [isRightCurry=false]\n     * @param {Boolean} [isAutoCurry=false]\n     * @returns {Function}\n     */\n    function _curry (fn, arity, isRightCurry, isAutoCurry) {\n        if (arity >>> 0 !== arity) {\n            arity = fn.length;\n        }\n\n        return arity > 1 ? _currier(fn, arity, isRightCurry, isAutoCurry, []) : fn;\n    }\n\n    /**\n     * Flattens an array.\n     * @private\n     * @param {Array} array - The source array\n     * @param {Boolean} isDeep - Whether to perform a deep flattening or not\n     * @param {Array} output - An array to collect the result\n     * @param {Number} idx - The next index to be filled in the output\n     * @returns {Array} The output array filled with the results\n     */\n    function _flatten (array, isDeep, output, idx) {\n        for (var i = 0, len = array.length, value, j, vLen; i < len; i++) {\n            value = array[i];\n\n            if (!Array.isArray(value)) {\n                output[idx++] = value;\n            } else if (isDeep) {\n                _flatten(value, true, output, idx);\n                idx = output.length;\n            } else {\n                vLen = value.length;\n                output.length += vLen;\n\n                for (j = 0; j < vLen; j++) {\n                    output[idx++] = value[j];\n                }\n            }\n        }\n\n        return output;\n    }\n\n    /**\n     * Establishes at which index an element should be inserted in a sorted array to respect\n     * the array order. Needs the comparer used to sort the array.\n     * @private\n     * @param {Array} array\n     * @param {*} element\n     * @param {Function} comparer\n     * @param {Number} start\n     * @param {Number} end\n     * @returns {Number}\n     */\n    function _getInsertionIndex (array, element, comparer, start, end) {\n        if (array.length === 0) {\n            return 0;\n        }\n\n        var pivot = (start + end) >> 1;\n        var result = comparer(\n            {value: element, index: pivot},\n            {value: array[pivot], index: pivot}\n        );\n\n        if (end - start <= 1) {\n            return result < 0 ? pivot : pivot + 1;\n        } else if (result < 0) {\n            return _getInsertionIndex(array, element, comparer, start, pivot);\n        } else if (result === 0) {\n            return pivot + 1;\n        } else {\n            return _getInsertionIndex(array, element, comparer, pivot, end);\n        }\n    }\n\n    /**\n     * Gets the number of consecutive elements satisfying a predicate in an array-like object.\n     * @private\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} predicateContext\n     * @returns {Number}\n     */\n    function _getNumConsecutiveHits (arrayLike, predicate, predicateContext) {\n        var idx = 0;\n        var len = arrayLike.length;\n\n        if (arguments.length === 3) {\n            predicate = predicate.bind(predicateContext);\n        }\n\n        while (idx < len && predicate(arrayLike[idx], idx, arrayLike)) {\n            idx++;\n        }\n\n        return idx;\n    }\n\n    /**\n     * Builds the prefix or suffix to be used when padding a string.\n     * @private\n     * @param {String} source\n     * @param {String} char\n     * @param {Number} len\n     * @returns {String}\n     */\n    function _getPadding (source, char, len) {\n        if (!isNil(source) && type(source) !== \"String\") {\n            source = String(source);\n        }\n\n        return _repeat(String(char)[0] || \"\", Math.ceil(len - source.length));\n    }\n\n    /**\n     * Checks if a path is valid in the given object and retrieves the path target.\n     * @private\n     * @param {Object} obj\n     * @param {String[]} parts\n     * @param {Boolean} walkNonEnumerables\n     * @returns {Object}\n     */\n    function _getPathInfo (obj, parts, walkNonEnumerables) {\n        if (isNil(obj)) {\n            throw _makeTypeErrorFor(obj, \"object\");\n        }\n\n        var target = obj;\n        var i = -1;\n        var len = parts.length;\n        var key;\n\n        while (++i < len) {\n            key = _getPathKey(target, parts[i], walkNonEnumerables);\n\n            if (isUndefined(key)) {\n                break;\n            }\n\n            target = target[key];\n        }\n\n        return i === len ? {isValid: true, target: target} : {isValid: false, target: void 0};\n    }\n\n    /**\n     * Helper to retrieve the correct key while evaluating a path.\n     * @private\n     * @param {Object} target\n     * @param {String} key\n     * @param {Boolean} includeNonEnumerables\n     * @returns {String|Number|Undefined}\n     */\n    function _getPathKey (target, key, includeNonEnumerables) {\n        if (includeNonEnumerables && key in Object(target) || _isEnumerable(target, key)) {\n            return key;\n        }\n\n        var n = +key;\n        var len = target && target.length;\n\n        return n < 0 && n >= -len ? n + len : n < len ? n : void 0;\n    }\n\n    /**\n     * Builds a \"grouping function\" for an array-like object.\n     * @private\n     * @param {Function} makeValue\n     * @returns {Function}\n     */\n    function _groupWith (makeValue) {\n        return function (arrayLike, iteratee, iterateeContext) {\n            if (arguments.length === 3) {\n                iteratee = iteratee.bind(iterateeContext);\n            }\n\n            var result = {};\n            var len = arrayLike.length;\n\n            for (var i = 0, element, key; i < len; i++) {\n                element = arrayLike[i];\n                key = iteratee(element, i, arrayLike);\n                result[key] = makeValue(result[key], element);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Makes an object immutable by recursively calling <code>Object.freeze</code>\n     * on its members.\n     * @private\n     * @param {Object} obj\n     * @param {Array} seen\n     * @returns {Object} The obj parameter itself, not a copy.\n     */\n    function _immutable (obj, seen) {\n        if (seen.indexOf(obj) === -1) {\n            seen.push(Object.freeze(obj));\n\n            forEach(Object.getOwnPropertyNames(obj), function (key) {\n                var value = obj[key];\n\n                if (typeof value === \"object\" && !isNull(value)) {\n                    _immutable(value, seen);\n                }\n            });\n        }\n\n        return obj;\n    }\n\n    /**\n     * If a method with the given name exists on the target, applies it with the provided\n     * arguments and returns the result. Returns <code>undefined</code> otherwise.<br/>\n     * The arguments for the method are built by concatenating the array of bound arguments,\n     * optionally received by {@link module:lamb.invoker|invoker}, with the final set of, also\n     * optional, <code>args</code>.\n     * @private\n     * @param {Array} boundArgs\n     * @param {String} methodName\n     * @param {Object} target\n     * @param {...*} [args]\n     * @returns {*}\n     */\n    function _invoker (boundArgs, methodName, target) {\n        var method = target[methodName];\n\n        if (typeof method !== \"function\") {\n            return void 0;\n        }\n\n        var boundArgsLen = boundArgs.length;\n        var ofs = 3 - boundArgsLen;\n        var len = arguments.length - ofs;\n        var args = Array(len);\n\n        for (var i = 0; i < boundArgsLen; i++) {\n            args[i] = boundArgs[i];\n        }\n\n        for (; i < len; i++) {\n            args[i] = arguments[i + ofs];\n        }\n\n        return method.apply(target, args);\n    }\n\n    /**\n     * Accepts a target object and a key name and verifies that the target is an array and that\n     * the key is an existing index.\n     * @private\n     * @param {Object} target\n     * @param {String|Number} key\n     * @returns {Boolean}\n     */\n    function _isArrayIndex (target, key) {\n        var n = Number(key);\n\n        return Array.isArray(target) && n % 1 === 0 && !(n < 0 && _isEnumerable(target, key));\n    }\n\n    /**\n     * Checks whether the specified key is an enumerable property of the given object or not.\n     * @private\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    function _isEnumerable (obj, key) {\n        return key in Object(obj) && (_isOwnEnumerable(obj, key) || ~_safeEnumerables(obj).indexOf(key));\n    }\n\n    /**\n     * Checks whether the specified key is a own enumerable property of the given object or not.\n     * @private\n     * @function\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    var _isOwnEnumerable = generic(_objectProto.propertyIsEnumerable);\n\n    /**\n     * Accepts an object and build a function expecting a key to create a \"pair\" with the key\n     * and its value.\n     * @private\n     * @param {Object} obj\n     * @returns {Function}\n     */\n    function _keyToPairIn (obj) {\n        return function (key) {\n            return [key, obj[key]];\n        };\n    }\n\n    /**\n     * Helper to build the {@link module:lamb.everyIn|everyIn} or the\n     * {@link module:lamb.someIn|someIn} function.\n     * @private\n     * @param {Boolean} defaultResult\n     * @returns {Function}\n     */\n    function _makeArrayChecker (defaultResult) {\n        return function (arrayLike, predicate, predicateContext) {\n            if (arguments.length === 3) {\n                predicate = predicate.bind(predicateContext);\n            }\n\n            for (var i = 0, len = arrayLike.length; i < len; i++) {\n                if (defaultResult ^ !!predicate(arrayLike[i], i, arrayLike)) {\n                    return !defaultResult;\n                }\n            }\n\n            return defaultResult;\n        };\n    }\n\n    /**\n     * Builds a list of sorting criteria from a list of sorter functions. Returns a list containing\n     * a single default sorting criterion if the sorter list is empty.\n     * @private\n     * @param {Function[]} sorters\n     * @returns {Sorter[]}\n     */\n    function _makeCriteria (sorters) {\n        return sorters.length ? map(sorters, _makeCriterion) : [_sorter()];\n    }\n\n    /**\n     * Converts a sorting function to a sorting criterion if necessary.\n     * @private\n     * @param {Function} criterion\n     * @returns {Sorter}\n     */\n    function _makeCriterion (criterion) {\n        return criterion && typeof criterion.compare === \"function\" ? criterion : _sorter(criterion);\n    }\n\n    /**\n     * Builds a reduce function. The <code>step</code> parameter must be <code>1</code>\n     * to build  {@link module:lamb.reduce|reduce} and <code>-1</code> to build\n     * {@link module:lamb.reduceRight|reduceRight}.\n     * @private\n     * @param {Number} step\n     * @returns {Function}\n     */\n    function _makeReducer (step) {\n        return function (arrayLike, accumulator, initialValue) {\n            var len = arrayLike.length >>> 0;\n            var idx = step === 1 ? 0 : len - 1;\n            var nCalls;\n            var result;\n\n            if (arguments.length === 3) {\n                nCalls = len;\n                result = initialValue;\n            } else {\n                if (len === 0) {\n                    throw new TypeError(\"Reduce of empty array-like with no initial value\");\n                }\n\n                result = arrayLike[idx];\n                idx += step;\n                nCalls = len - 1;\n            }\n\n            for (; nCalls--; idx += step) {\n                result = accumulator(result, arrayLike[idx], idx, arrayLike);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Builds a TypeError stating that it's not possible to convert the given value to the\n     * desired type.\n     * @private\n     * @param {*} value\n     * @param {String} desiredType\n     * @returns {TypeError}\n     */\n    function _makeTypeErrorFor (value, desiredType) {\n        return new TypeError(\"Cannot convert \" + type(value).toLowerCase() + \" to \" + desiredType);\n    }\n\n    /**\n     * Merges the received objects using the provided functions to retrieve their keys.\n     * @private\n     * @param {Function} getKeys\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    function _merge (getKeys) {\n        return reduce(_argsTail.apply(null, arguments), function (result, source) {\n            forEach(getKeys(source), function (key) {\n                result[key] = source[key];\n            });\n\n            return result;\n        }, {});\n    }\n\n    /**\n     * Using the provided function to retrieve the keys of an object, builds\n     * a function expecting an object to create a list of key / value pairs.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _pairsFrom = _curry(function (getKeys, obj) {\n        return map(getKeys(obj), _keyToPairIn(obj));\n    });\n\n    /**\n     * Builds a partial application of a function expecting an iteratee and an\n     * optional argument other than its main data parameter.<br/>\n     * The optional argument is passed to the function only when is explicitly given\n     * a value.<br/>\n     * The optional argument is usually the iteratee context, but reduce functions\n     * pass their initial value instead.\n     * @private\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function _partialWithIteratee (fn) {\n        return function (iteratee, optionalArgument) {\n            var f = arguments.length === 2 ? fn : binary(fn);\n\n            return partial(f, _, iteratee, optionalArgument);\n        };\n    }\n\n    /**\n     * A null-safe function to repeat the source string the desired amount of times.\n     * @private\n     * @param {String} source\n     * @param {Number} times\n     * @returns {String}\n     */\n    function _repeat (source, times) {\n        var result = \"\";\n\n        for (var i = 0; i < times; i++) {\n            result += source;\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a list of the enumerable properties of an object.\n     * The function is null-safe, unlike the public one.\n     * @private\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    function _safeEnumerables (obj) {\n        var result = [];\n\n        for (var key in obj) {\n            result.push(key);\n        }\n\n        return result;\n    }\n\n    /**\n     * A null-safe version of <code>Object.keys</code>.\n     * @private\n     * @function\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    var _safeKeys = compose(Object.keys, Object);\n\n    /**\n     * A generic version of <code>String.prototype.search</code>\n     * @private\n     * @function\n     * @param {String} s\n     * @param {RegExp} pattern\n     * @return {Number}\n     */\n    var _search = generic(String.prototype.search);\n\n    /**\n     * Sets, or creates, a property in a copy of the provided object to the desired value.\n     * @param {Object} source\n     * @param {String} key\n     * @param {*} value\n     * @returns {Object}\n     */\n    function _setIn (source, key, value) {\n        var result = {};\n\n        for (var prop in source) {\n            result[prop] = source[prop];\n        }\n\n        result[key] = value;\n\n        return result;\n    }\n\n    /**\n     * Sets an index in an array-like object.<br/>\n     * If provided with an updater function it will use it to update the current value,\n     * otherwise sets the index to the specified value.\n     * @private\n     * @param {ArrayLike} arrayLike\n     * @param {Number} idx\n     * @param {*} [value]\n     * @param {Function} [updater]\n     * @returns {Array}\n     */\n    function _setIndex (arrayLike, idx, value, updater) {\n        var result = slice(arrayLike);\n        var n = _toNaturalIndex(idx, result.length);\n\n        if (!isUndefined(n)) {\n            result[n] = arguments.length === 4 ? updater(arrayLike[n]) : value;\n        }\n\n        return result;\n    }\n\n    /**\n     * Sets the object's property targeted by the given path to the desired value.<br/>\n     * Works with arrays and is able to set their indexes, even negative ones.\n     * @private\n     * @param {Object|Array} obj\n     * @param {String[]} parts\n     * @param {*} value\n     * @returns {Object|Array}\n     */\n    function _setPathIn (obj, parts, value) {\n        var key = parts[0];\n        var v;\n\n        if (parts.length === 1) {\n            v = value;\n        } else {\n            var targetKey = _getPathKey(obj, key, false);\n\n            v = _setPathIn(\n                isUndefined(targetKey) ? targetKey : obj[targetKey],\n                slice(parts, 1),\n                value\n            );\n        }\n\n        return _isArrayIndex(obj, key) ? _setIndex(obj, +key, v) : _setIn(obj, key, v);\n    }\n\n    /**\n     * Builds a sorting criterion. If the comparer function is missing, the default\n     * comparer will be used instead.\n     * @private\n     * @param {Function} reader\n     * @param {Boolean} isDescending\n     * @param {Function} [comparer]\n     * @returns {Sorter}\n     */\n    function _sorter (reader, isDescending, comparer) {\n        if (typeof reader !== \"function\" || reader === identity) {\n            reader = null;\n        }\n\n        if (typeof comparer !== \"function\") {\n            comparer = _comparer;\n        }\n\n        return {\n            isDescending: isDescending === true,\n            compare: function (a, b) {\n                if (reader) {\n                    a = reader(a);\n                    b = reader(b);\n                }\n\n                return comparer(a, b);\n            }\n        };\n    }\n\n    /**\n     * Using the provided function to retrieve the keys of an object, builds\n     * a function expecting an object to create an array containing a list\n     * of the keys in its first index and the corresponding list of values\n     * in the second one.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _tearFrom = _curry(function (getKeys, obj) {\n        return reduce(getKeys(obj), function (result, key) {\n            result[0].push(key);\n            result[1].push(obj[key]);\n\n            return result;\n        }, [[], []]);\n    });\n\n    /**\n     * Checks if the given index, even negative, is an integer within the provided\n     * length. If so returns its natural number equivalent.<br/>\n     * Returns <code>undefined<code> otherwise.\n     * @private\n     * @param {Number} idx\n     * @param {Number} len\n     * @returns {Number|Undefined}\n     */\n    function _toNaturalIndex (idx, len) {\n        if (isInteger(idx)) {\n            return idx >= -len && idx < len ? idx < 0 ? idx + len : idx : void 0;\n        }\n\n        return void 0;\n    }\n\n    /**\n     * Splits a sting path using the provided separator and returns an array\n     * of path parts.\n     * @private\n     * @param {String} path\n     * @param {String} separator\n     * @returns {String[]}\n     */\n    function _toPathParts (path, separator) {\n        return String(path).split(separator || \".\");\n    }\n\n    /**\n     * Creates a non-null-safe version of the provided \"getKeys\" function.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _unsafeKeyListFrom = _curry(function (getKeys, obj) {\n        if (isNil(obj)) {\n            throw _makeTypeErrorFor(obj, \"object\");\n        }\n\n        return getKeys(obj);\n    });\n\n    /**\n     * Using the provided function to retrieve the keys of an object, builds\n     * a function expecting an object to create the list of values for such keys.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _valuesFrom = _curry(function (getKeys, obj) {\n        return map(getKeys(obj), partial(getIn, obj));\n    });\n\n    /**\n     * Builds a predicate to check if an array-like object contains the given value.<br/>\n     * Please note that the equality test is made with {@link module:lamb.isSVZ|isSVZ}; so you can\n     * check for <code>NaN</code>, but <code>0</code> and <code>-0</code> are the same value.<br/>\n     * See also {@link module:lamb.isIn|isIn} for an uncurried version.\n     * @example\n     * var containsNaN = _.contains(NaN, 0);\n     *\n     * containsNaN([0, 1, 2, 3, NaN]) // => true\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.isIn|isIn}\n     * @param {*} value\n     * @param {Number} [fromIndex=0] The position at which to begin searching for the given value.\n     * @returns {Function}\n     */\n    function contains (value, fromIndex) {\n        return function (arrayLike) {\n            return isIn(arrayLike, value, fromIndex);\n        };\n    }\n\n    /**\n     * Checks if all the elements in an array-like object satisfy the given predicate.<br/>\n     * The function will stop calling the predicate as soon as it returns a <em>falsy</em> value.<br/>\n     * Note that an empty array-like will always produce a <code>true</code> result regardless of the\n     * predicate because of [vacuous truth]{@link https://en.wikipedia.org/wiki/Vacuous_truth}.<br/>\n     * Also note that unlike the native\n     * [Array.prototype.every]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every},\n     * this function won't skip deleted or unassigned indexes.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12, active: true},\n     *     {\"name\": \"John\", \"age\": 40, active: true},\n     *     {\"name\": \"Mario\", \"age\": 17, active: true},\n     *     {\"name\": \"Paolo\", \"age\": 15, active: true}\n     * ];\n     * var isGreaterThan = _.curryRight(_.isGT);\n     * var isAdult = _.keySatisfies(isGreaterThan(17), \"age\");\n     * var isActive = _.hasKeyValue(\"active\", true);\n     *\n     * _.everyIn(persons, isAdult) // => false\n     * _.everyIn(persons, isActive) // => true\n     *\n     * @example <caption>Showing the difference with <code>Array.prototype.every</code>:</caption>\n     * var isDefined = _.not(_.isUndefined);\n     * var arr = new Array(5);\n     * arr[3] = 99;\n     *\n     * arr.every(isDefined) // => true\n     * _.everyIn(arr, isDefined) // => false\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.every|every}\n     * @see {@link module:lamb.some|some}, {@link module:lamb.someIn|someIn}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Boolean}\n     */\n    var everyIn = _makeArrayChecker(true);\n\n    /**\n     * A curried version of {@link module:lamb.everyIn|everyIn} expecting a predicate and its optional\n     * context to build a function waiting for the array-like to act upon.\n     * @example\n     * var data = [2, 3, 5, 6, 8];\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var allEvens = _.every(isEven);\n     * var allIntegers = _.every(_.isInteger);\n     *\n     * allEvens(data) // => false\n     * allIntegers(data) // => true\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.everyIn|everyIn}\n     * @see {@link module:lamb.some|some}, {@link module:lamb.someIn|someIn}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    var every = _partialWithIteratee(everyIn);\n\n    /**\n     * Builds an array comprised of all values of the array-like object passing the <code>predicate</code>\n     * test.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.filter]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example\n     * var isLowerCase = function (s) { return s.toLowerCase() === s; };\n     *\n     * _.filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * _.filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.filterWith|filterWith}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Array}\n     */\n    function filter (arrayLike, predicate, predicateContext) {\n        var len = arrayLike.length;\n        var result = [];\n\n        if (arguments.length === 3) {\n            predicate = predicate.bind(predicateContext);\n        }\n\n        for (var i = 0; i < len; i++) {\n            predicate(arrayLike[i], i, arrayLike) && result.push(arrayLike[i]);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a partial application of {@link module:lamb.filter|filter} that uses the given predicate and\n     * the optional context to build a function expecting the array-like object to act upon.\n     * @example\n     * var isLowerCase = function (s) { return s.toLowerCase() === s; };\n     * var getLowerCaseEntries = _.filterWith(isLowerCase);\n     *\n     * getLowerCaseEntries([\"Foo\", \"bar\", \"baZ\"]) // => [\"bar\"]\n     *\n     * // array-like objects can be used as well\n     * getLowerCaseEntries(\"fooBAR\") // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.filter|filter}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    var filterWith = _partialWithIteratee(filter);\n\n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns it if\n     * the search is successful. Returns <code>undefined</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.find(persons, _.hasKeyValue(\"age\", 40)) // => {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40}\n     * _.find(persons, _.hasKeyValue(\"age\", 41)) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.findWhere|findWhere}\n     * @see {@link module:lamb.findIndex|findIndex}, {@link module:lamb.findIndexWhere|findIndexWhere}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {*}\n     */\n    function find (arrayLike, predicate, predicateContext) {\n        var idx = arguments.length === 3 ?\n            findIndex(arrayLike, predicate, predicateContext) :\n            findIndex(arrayLike, predicate);\n\n        return idx === -1 ? void 0 : arrayLike[idx];\n    }\n\n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns its\n     * index if the search is successful. Returns <code>-1</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 40)) // => 1\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 41)) // => -1\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.findIndexWhere|findIndexWhere}\n     * @see {@link module:lamb.find|find}, {@link module:lamb.findWhere|findWhere}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Number}\n     */\n    function findIndex (arrayLike, predicate, predicateContext) {\n        var result = -1;\n\n        if (arguments.length === 3) {\n            predicate = predicate.bind(predicateContext);\n        }\n\n        for (var i = 0, len = arrayLike.length; i < len; i++) {\n            if (predicate(arrayLike[i], i, arrayLike)) {\n                result = i;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.findIndex|findIndex} expecting the array-like\n     * object to search.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var findEvenIdx = _.findIndexWhere(isEven);\n     *\n     * findEvenIdx([1, 3, 4, 5, 7]) // => 2\n     * findEvenIdx([1, 3, 5, 7]) // => -1\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.findIndex|findIndex}\n     * @see {@link module:lamb.find|find}, {@link module:lamb.findWhere|findWhere}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    var findIndexWhere = _partialWithIteratee(findIndex);\n\n    /**\n     * Builds a partial application of {@link module:lamb.find|find} expecting the array-like object\n     * to search.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var findEven = _.findWhere(isEven);\n     *\n     * findEven([1, 3, 4, 5, 7]) // => 4\n     * findEven([1, 3, 5, 7]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.find|find}\n     * @see {@link module:lamb.findIndex|findIndex}, {@link module:lamb.findIndexWhere|findIndexWhere}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    var findWhere = _partialWithIteratee(find);\n\n    /**\n     * Executes the provided <code>iteratee</code> for each element of the given array-like object.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.forEach]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example <caption>Adding a CSS class to all elements of a NodeList in a browser environment:</caption>\n     * var addClass = _.curry(function (className, element) {\n     *     element.classList.add(className);\n     * });\n     * var paragraphs = document.querySelectorAll(\"#some-container p\");\n     *\n     * _.forEach(paragraphs, addClass(\"main\"));\n     * // each \"p\" element in the container will have the \"main\" class now\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Undefined}\n     */\n    function forEach (arrayLike, iteratee, iterateeContext) {\n        if (arguments.length === 3) {\n            iteratee = iteratee.bind(iterateeContext);\n        }\n\n        for (var i = 0, len = arrayLike.length >>> 0; i < len; i++) {\n            iteratee(arrayLike[i], i, arrayLike);\n        }\n    }\n\n    /**\n     * Checks if an array-like object contains the given value.<br/>\n     * Please note that the equality test is made with {@link module:lamb.isSVZ|isSVZ}; so you can\n     * check for <code>NaN</code>, but <code>0</code> and <code>-0</code> are the same value.<br/>\n     * See also {@link module:lamb.contains|contains} for a curried version building a predicate.\n     * @example\n     * var numbers = [0, 1, 2, 3, NaN];\n     *\n     * _.isIn(numbers, 1) // => true\n     * _.isIn(numbers, 0) // => true\n     * _.isIn(numbers, -0) // => true\n     * _.isIn(numbers, NaN) // => true\n     * _.isIn(numbers, 2, 3) // => false\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.contains|contains}\n     * @param {ArrayLike} arrayLike\n     * @param {*} value\n     * @param {Number} [fromIndex=0] The position at which to begin searching for the given value.\n     * @returns {Boolean}\n     */\n    function isIn (arrayLike, value, fromIndex) {\n        var result = false;\n\n        for (var i = fromIndex >>> 0, len = arrayLike.length; i < len; i++) {\n            if (isSVZ(value, arrayLike[i])) {\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Generates an array with the values passed as arguments.<br/>\n     * Behaves like ES6's [Array.of]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of}.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {...*} value\n     * @returns {Array}\n     */\n    var list = _argsToArrayFrom(0);\n\n    /**\n     * Builds a new array by applying the iteratee function to each element of the\n     * received array-like object.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.map]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example\n     * _.map([\"Joe\", \"Mario\", \"Jane\"], _.invoker(\"toUpperCase\")) // => [\"JOE\", \"MARIO\", \"JANE\"]\n     *\n     * _.map([4, 9, 16], Math.sqrt); // => [2, 3, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.mapWith|mapWith}\n     * @see {@link module:lamb.flatMap|flatMap}, {@link module:lamb.flatMapWith|flatMapWith}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function map (arrayLike, iteratee, iterateeContext) {\n        var len = arrayLike.length >>> 0;\n        var result = Array(len);\n\n        if (arguments.length === 3) {\n            iteratee = iteratee.bind(iterateeContext);\n        }\n\n        for (var i = 0; i < len; i++) {\n            result[i] = iteratee(arrayLike[i], i, arrayLike);\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.map|map} using the given iteratee and the\n     * optional context. The resulting function expects the array-like object to act upon.\n     * @example\n     * var square = function (n) { return n * n; };\n     * var getSquares = _.mapWith(square);\n     *\n     * getSquares([1, 2, 3, 4, 5]) // => [1, 4, 9, 16, 25]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.map|map}\n     * @see {@link module:lamb.flatMap|flatMap}, {@link module:lamb.flatMapWith|flatMapWith}\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {function}\n     */\n    var mapWith = _partialWithIteratee(map);\n\n    /**\n     * Reduces (or folds) the values of an array-like object, starting from the first, to a new\n     * value using the provided <code>accumulator</code> function.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.reduce]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example\n     * _.reduce([1, 2, 3, 4], _.add) // => 10\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduceRight|reduceRight}\n     * @see {@link module:lamb.reduceWith|reduceWith}, {@link module:lamb.reduceRightWith|reduceRightWith}\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduce = _makeReducer(1);\n\n    /**\n     * Same as {@link module:lamb.reduce|reduce}, but starts the fold operation from the last\n     * element instead.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.reduceRight]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduce|reduce}\n     * @see {@link module:lamb.reduceWith|reduceWith}, {@link module:lamb.reduceRightWith|reduceRightWith}\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduceRight = _makeReducer(-1);\n\n    /**\n     * A partial application of {@link module:lamb.reduce|reduceRight} that uses the\n     * provided <code>accumulator</code> and the optional <code>initialValue</code> to\n     * build a function expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.reduceRightWith(_.add)(arr) // => 15\n     * _.reduceRightWith(_.subtract)(arr) // => -5\n     * _.reduceRightWith(_.subtract, 0)(arr) // => -15\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduceWith|reduceWith}\n     * @see {@link module:lamb.reduce|reduce}, {@link module:lamb.reduce|reduceRight}\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {Function}\n     */\n    var reduceRightWith = _partialWithIteratee(reduceRight);\n\n    /**\n     * A partial application of {@link module:lamb.reduce|reduce} that uses the\n     * provided <code>accumulator</code> and the optional <code>initialValue</code> to\n     * build a function expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.reduceWith(_.add)(arr) // => 15\n     * _.reduceWith(_.subtract)(arr) // => -13\n     * _.reduceWith(_.subtract, 0)(arr) // => -15\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduceRightWith|reduceRightWith}\n     * @see {@link module:lamb.reduce|reduce}, {@link module:lamb.reduce|reduceRight}\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {Function}\n     */\n    var reduceWith = _partialWithIteratee(reduce);\n\n    /**\n     * Reverses a copy of the given array-like object.\n     * @example\n     * var arr = [1, 2, 3];\n     *\n     * _.reverse(arr) // => [3, 2, 1];\n     *\n     * // `arr` still is [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    function reverse (arrayLike) {\n        return slice(arrayLike).reverse();\n    }\n\n    /**\n     * Builds an array by extracting a portion of an array-like object.<br/>\n     * It's a generic version of [Array.prototype.slice]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}.\n     * @example\n     * _.slice([\"foo\", \"bar\", \"baz\"], 0, 2) // => [\"foo\", \"bar\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {ArrayLike} arrayLike - Any array like object.\n     * @param {Number} [start=0] - Zero-based index at which to begin extraction.\n     * @param {Number} [end=arrayLike.length] - Zero-based index at which to end extraction.\n     * Extracts up to but not including end.\n     * @returns {Array}\n     */\n    var slice = generic(_arrayProto.slice);\n\n    /**\n     * Checks if at least one element in an array-like object satisfies the given predicate.<br/>\n     * The function will stop calling the predicate as soon as it returns a <em>truthy</em> value.<br/>\n     * Note that unlike the native\n     * [Array.prototype.some]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some},\n     * this function won't skip deleted or unassigned indexes.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12, active: false},\n     *     {\"name\": \"John\", \"age\": 40, active: false},\n     *     {\"name\": \"Mario\", \"age\": 17, active: false},\n     *     {\"name\": \"Paolo\", \"age\": 15, active: false}\n     * ];\n     * var isGreaterThan = _.curryRight(_.isGT);\n     * var isAdult = _.keySatisfies(isGreaterThan(17), \"age\");\n     * var isActive = _.hasKeyValue(\"active\", true);\n     *\n     * _.someIn(persons, isAdult) // => true\n     * _.someIn(persons, isActive) // => false\n     *\n     * @example <caption>Showing the difference with <code>Array.prototype.some</code>:</caption>\n     * var arr = new Array(5);\n     * arr[3] = 99;\n     *\n     * arr.some(_.isUndefined) // => false\n     * _.someIn(arr, _.isUndefined) // => true\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.some|some}\n     * @see {@link module:lamb.every|every}, {@link module:lamb.everyIn|everyIn}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Boolean}\n     */\n    var someIn = _makeArrayChecker(false);\n\n    /**\n     * A curried version of {@link module:lamb.someIn|someIn} expecting a predicate and its optional\n     * context to build a function waiting for the array-like to act upon.\n     * @example\n     * var data = [1, 3, 5, 6, 7, 8];\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var containsEvens = _.some(isEven);\n     * var containsStrings = _.some(_.isType(\"String\"));\n     *\n     * containsEvens(data) // => true\n     * containsStrings(data) // => false\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.someIn|someIn}\n     * @see {@link module:lamb.every|every}, {@link module:lamb.everyIn|everyIn}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    var some = _partialWithIteratee(someIn);\n\n    lamb.contains = contains;\n    lamb.every = every;\n    lamb.everyIn = everyIn;\n    lamb.filter = filter;\n    lamb.filterWith = filterWith;\n    lamb.find = find;\n    lamb.findIndex = findIndex;\n    lamb.findIndexWhere = findIndexWhere;\n    lamb.findWhere = findWhere;\n    lamb.forEach = forEach;\n    lamb.isIn = isIn;\n    lamb.list = list;\n    lamb.map = map;\n    lamb.mapWith = mapWith;\n    lamb.reduce = reduce;\n    lamb.reduceRight = reduceRight;\n    lamb.reduceRightWith = reduceRightWith;\n    lamb.reduceWith = reduceWith;\n    lamb.reverse = reverse;\n    lamb.slice = slice;\n    lamb.some = some;\n    lamb.someIn = someIn;\n\n    /**\n     * Accepts a series of functions and builds a function that applies the received\n     * arguments to each one and returns the first non-<code>undefined</code> value.<br/>\n     * Meant to work in sinergy with {@link module:lamb.condition|condition} and\n     * {@link module:lamb.invoker|invoker}, can be useful as a strategy pattern for functions,\n     * to mimic conditional logic or pattern matching, and also to build polymorphic functions.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var filterString = _.compose(_.invoker(\"join\", \"\"), _.filter);\n     * var filterAdapter = _.adapter(\n     *     _.invoker(\"filter\"),\n     *     _.condition(_.isType(\"String\"), filterString)\n     * );\n     *\n     * filterAdapter([1, 2, 3, 4, 5, 6], isEven) // => [2, 4, 6]\n     * filterAdapter(\"123456\", isEven) // => \"246\"\n     * filterAdapter({}, isEven) // => undefined\n     *\n     * // obviously it's composable\n     * var filterWithDefault = _.adapter(filterAdapter, _.always(\"Not implemented\"));\n     *\n     * filterWithDefault([1, 2, 3, 4, 5, 6], isEven) // => [2, 4, 6]\n     * filterWithDefault(\"123456\", isEven) // => \"246\"\n     * filterWithDefault({}, isEven) // => \"Not implemented\"\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function adapter () {\n        var functions = list.apply(null, arguments);\n\n        return function () {\n            var len = functions.length;\n            var result;\n\n            for (var i = 0; i < len; i++) {\n                result = functions[i].apply(this, arguments);\n\n                if (!isUndefined(result)) {\n                    break;\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Accepts a series of predicates and builds a new one that returns true if they are all satisfied\n     * by the same arguments. The functions in the series will be applied one at a time until a\n     * <code>false</code> value is produced, which is returned immediately.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isPositive = function (n) { return n > 0; };\n     * var isPositiveEven = _.allOf(isEven, isPositive);\n     *\n     * isPositiveEven(-2) // => false\n     * isPositiveEven(11) // => false\n     * isPositiveEven(6) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.anyOf|anyOf}\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function allOf () {\n        var predicates = list.apply(null, arguments);\n\n        return function () {\n            for (var i = 0, len = predicates.length; i < len; i++) {\n                if (!predicates[i].apply(this, arguments)) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n    }\n\n    /**\n     * Accepts a series of predicates and builds a new one that returns true if at least one of them is\n     * satisfied by the received arguments. The functions in the series will be applied one at a time\n     * until a <code>true</code> value is produced, which is returned immediately.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\", group: \"guest\"},\n     *     {id: 2, name: \"Jane\", group: \"root\"},\n     *     {id: 3, name: \"Mario\", group: \"admin\"}\n     * ];\n     * var isInGroup = _.partial(_.hasKeyValue, \"group\");\n     * var isSuperUser = _.anyOf(isInGroup(\"admin\"), isInGroup(\"root\"));\n     *\n     * isSuperUser(users[0]) // => false\n     * isSuperUser(users[1]) // => true\n     * isSuperUser(users[2]) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.allOf|allOf}\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function anyOf () {\n        var predicates = list.apply(null, arguments);\n\n        return function () {\n            for (var i = 0, len = predicates.length; i < len; i++) {\n                if (predicates[i].apply(this, arguments)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    /**\n     * Builds a function that will apply the received arguments to <code>trueFn</code>,\n     * if the predicate is satisfied with the same arguments, or to <code>falseFn</code> otherwise.<br/>\n     * If <code>falseFn</code> isn't provided and the predicate isn't satisfied the function\n     * will return <code>undefined</code>.<br/>\n     * Although you can use other <code>condition</code>s as <code>trueFn</code> or <code>falseFn</code>,\n     * it's probably better to use {@link module:lamb.adapter|adapter} to build more complex behaviours.<br/>\n     * See also {@link module:lamb.unless|unless} and {@link module:lamb.when|when} as they are\n     * shortcuts to common use cases.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halve = function (n) { return n / 2; };\n     * var double = function (n) { return n * 2; };\n     * var halveEvenAndDoubleOdd = _.condition(isEven, halve, double);\n     *\n     * halveEvenAndDoubleOdd(5) // => 10\n     * halveEvenAndDoubleOdd(6) // => 3\n     *\n     * var halveIfNumber = _.condition(_.isType(\"Number\"), halve);\n     *\n     * halveIfNumber(2) // => 1\n     * halveIfNumber(\"2\") // => undefined\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.unless|unless}\n     * @see {@link module:lamb.when|when}\n     * @param {Function} predicate\n     * @param {Function} trueFn\n     * @param {Function} [falseFn]\n     * @returns {Function}\n     */\n    function condition (predicate, trueFn, falseFn) {\n        return function () {\n            if (predicate.apply(this, arguments)) {\n                return trueFn.apply(this, arguments);\n            } else if (falseFn) {\n                return falseFn.apply(this, arguments);\n            } else {\n                return void 0;\n            }\n        };\n    }\n\n    /**\n     * Verifies that the two supplied values are the same value using the \"SameValue\" comparison.<br/>\n     * Note that this doesn't behave as the strict equality operator, but rather as a shim of ES6's\n     * [Object.is]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is}.\n     * Differences are that <code>0</code> and <code>-0</code> aren't the same value and, finally,\n     * <code>NaN</code> is equal to itself\n     * @example\n     * var testObject = {};\n     *\n     * _.is({}, testObject) // => false\n     * _.is(testObject, testObject) // => true\n     * _.is(\"foo\", \"foo\") // => true\n     * _.is(0, -0) // => false\n     * _.is(0 / 0, NaN) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.isSVZ|isSVZ} to perform a \"SameValueZero\" comparison\n     * @see [SameValue comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevalue}\n     * @see [SameValueZero comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero}\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function is (a, b) {\n        return a === 0 && b === 0 ? 1 / a === 1 / b : isSVZ(a, b);\n    }\n\n    /**\n     * Verifies that the first given value is greater than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isGT(today, pastDate) // => true\n     * _.isGT(pastDate, today) // => false\n     * _.isGT(3, 4) // => false\n     * _.isGT(3, 3) // => false\n     * _.isGT(3, 2) // => true\n     * _.isGT(0, -0) // => false\n     * _.isGT(-0, 0) // => false\n     * _.isGT(\"a\", \"A\") // => true\n     * _.isGT(\"b\", \"a\") // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.isGTE|isGTE}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGT (a, b) {\n        return a > b;\n    }\n\n    /**\n     * Verifies that the first given value is greater than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator,\n     * so <code>-0 === 0</code>.\n     * @example\n     * _.isGTE(3, 4) // => false\n     * _.isGTE(3, 3) // => true\n     * _.isGTE(3, 2) // => true\n     * _.isGTE(0, -0) // => true\n     * _.isGTE(-0, 0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.isGT|isGT}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isGTE (a, b) {\n        return a >= b;\n    }\n\n    /**\n     * Verifies that the first given value is less than the second.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.isLT(today, pastDate) // => false\n     * _.isLT(pastDate, today) // => true\n     * _.isLT(3, 4) // => true\n     * _.isLT(3, 3) // => false\n     * _.isLT(3, 2) // => false\n     * _.isLT(0, -0) // => false\n     * _.isLT(-0, 0) // => false\n     * _.isLT(\"a\", \"A\") // => false\n     * _.isLT(\"a\", \"b\") // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.isLTE|isLTE}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLT (a, b) {\n        return a < b;\n    }\n\n    /**\n     * Verifies that the first given value is less than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native operator,\n     * so <code>-0 === 0</code>.\n     * @example\n     * _.isLTE(3, 4) // => true\n     * _.isLTE(3, 3) // => true\n     * _.isLTE(3, 2) // => false\n     * _.isLTE(0, -0) // => true\n     * _.isLTE(-0, 0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.isLT|isLT}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function isLTE (a, b) {\n        return a <= b;\n    }\n\n    /**\n     * A simple negation of {@link module:lamb.is|is}, exposed for convenience.\n     * @example\n     * _.isNot(\"foo\", \"foo\") // => false\n     * _.isNot(0, -0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @see {@link module:lamb.is|is}\n     * @param {*} valueA\n     * @param {*} valueB\n     * @returns {Boolean}\n     */\n    var isNot = not(is);\n\n    /**\n     * Verifies that the two supplied values are the same value using the \"SameValueZero\" comparison.<br/>\n     * With this comparison <code>NaN</code> is equal to itself, but <code>0</code> and <code>-0</code> are\n     * considered the same value.\n     * @example\n     * var testObject = {};\n     *\n     * _.isSVZ({}, testObject) // => false\n     * _.isSVZ(testObject, testObject) // => true\n     * _.isSVZ(\"foo\", \"foo\") // => true\n     * _.isSVZ(0, -0) // => true\n     * _.isSVZ(0 / 0, NaN) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.is|is} to perform a \"SameValue\" comparison\n     * @see [SameValue comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevalue}\n     * @see [SameValueZero comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero}\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function isSVZ (a, b) {\n        // eslint-disable-next-line no-self-compare\n        return a !== a ? b !== b : a === b;\n    }\n\n    /**\n     * Returns a predicate that negates the given one.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isOdd = _.not(isEven);\n     *\n     * isOdd(5) // => true\n     * isOdd(4) // => false\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Function} predicate\n     * @returns {Function}\n     */\n    function not (predicate) {\n        return function () {\n            return !predicate.apply(this, arguments);\n        };\n    }\n\n    /**\n     * Builds a unary function that will check its argument against the given predicate.\n     * If the predicate isn't satisfied, the provided <code>fn</code> function will be\n     * applied to the same value. The received argument is returned as it is otherwise.<br/>\n     * See {@link module:lamb.when|when} for the opposite behaviour.<br/>\n     * It's a shortcut for a common use case of {@link module:lamb.condition|condition},\n     * where its <code>trueFn</code> parameter is the [identity function]{@link module:lamb.identity}.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halve = function (n) { return n / 2; };\n     * var halveUnlessIsEven = _.unless(isEven, halve);\n     *\n     * halveUnlessIsEven(5) // => 2.5\n     * halveUnlessIsEven(6) // => 6\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.condition|condition}\n     * @see {@link module:lamb.when|when}\n     * @param {Function} predicate\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function unless (predicate, fn) {\n        return function (value) {\n            return predicate.call(this, value) ? value : fn.call(this, value);\n        };\n    }\n\n    /**\n     * Builds a unary function that will check its argument against the given predicate.\n     * If the predicate is satisfied, the provided <code>fn</code> function will be\n     * applied to the same value. The received argument is returned as it is otherwise.<br/>\n     * See {@link module:lamb.unless|unless} for the opposite behaviour.<br/>\n     * It's a shortcut for a common use case of {@link module:lamb.condition|condition},\n     * where its <code>falseFn</code> parameter is the [identity function]{@link module:lamb.identity}.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halve = function (n) { return n / 2; };\n     * var halveIfEven = _.when(isEven, halve);\n     *\n     * halveIfEven(5) // => 5\n     * halveIfEven(6) // => 3\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.condition|condition}\n     * @see {@link module:lamb.unless|unless}\n     * @param {Function} predicate\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function when (predicate, fn) {\n        return function (value) {\n            return predicate.call(this, value) ? fn.call(this, value) : value;\n        };\n    }\n\n    lamb.adapter = adapter;\n    lamb.allOf = allOf;\n    lamb.anyOf = anyOf;\n    lamb.condition = condition;\n    lamb.is = is;\n    lamb.isGT = isGT;\n    lamb.isGTE = isGTE;\n    lamb.isLT = isLT;\n    lamb.isLTE = isLTE;\n    lamb.isNot = isNot;\n    lamb.isSVZ = isSVZ;\n    lamb.not = not;\n    lamb.unless = unless;\n    lamb.when = when;\n\n    /**\n     * Adds two numbers.\n     * @example\n     * _.add(4, 5) // => 9\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function add (a, b) {\n        return a + b;\n    }\n\n    /**\n     * \"Clamps\" a number within the given limits, both included.<br/>\n     * The function will convert to number all its parameters before starting any\n     * evaluation, and will return <code>NaN</code> if <code>min</code> is greater\n     * than <code>max</code>.\n     * @example\n     * _.clamp(-5, 0, 10) // => 0\n     * _.clamp(5, 0, 10) // => 5\n     * _.clamp(15, 0, 10) // => 10\n     * _.clamp(0, 0, 10) // => 0\n     * _.clamp(10, 0, 10) // => 10\n     * _.is(_.clamp(-0, 0, 10), -0) // => true\n     * _.clamp(10, 20, 15) // => NaN\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.clampWithin|clampWithin}\n     * @param {Number} n\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function clamp (n, min, max) {\n        n = +n;\n        min = +min;\n        max = +max;\n\n        if (min > max) {\n            return NaN;\n        } else {\n            return n < min ? min : n > max ? max : n;\n        }\n    }\n\n    /**\n     * A curried version of {@link module:lamb.clamp|clamp}, expecting a <code>min</code>\n     * and a <code>max</code> value, that builds a function waiting for the number to clamp.\n     * @example\n     * _.clampWithin(0, 10)(-5) // => 0\n     * _.clampWithin(0, 10)(5) // => 5\n     * _.clampWithin(0, 10)(15) // => 10\n     * _.clampWithin(0, 10)(0) // => 0\n     * _.clampWithin(0, 10)(10) // => 10\n     * _.is(_.clampWithin(0, 10)(-0), -0) // => true\n     * _.clampWithin(20, 15)(10) // => NaN\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.clamp|clamp}\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Function}\n     */\n    function clampWithin (min, max) {\n        return function (n) {\n            return clamp(n, min, max);\n        };\n    }\n\n    /**\n     * Divides two numbers.\n     * @example\n     * _.divide(5, 2) // => 2.5\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function divide (a, b) {\n        return a / b;\n    }\n\n    /**\n     * Generates a sequence of values of the desired length with the provided iteratee.\n     * The values being iterated, and received by the iteratee, are the results generated so far.\n     * @example\n     * var fibonacci = function (n, idx, results) {\n     *     return n + (results[idx - 1] || 0);\n     * };\n     *\n     * _.generate(1, 10, fibonacci) // => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.range|range}\n     * @param {*} start - The starting value\n     * @param {Number} len - The desired length for the sequence\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function generate (start, len, iteratee, iterateeContext) {\n        var result = [start];\n\n        if (arguments.length === 4) {\n            iteratee = iteratee.bind(iterateeContext);\n        }\n\n        for (var i = 0, limit = len - 1; i < limit; i++) {\n            result.push(iteratee(result[i], i, result));\n        }\n\n        return result;\n    }\n\n    /**\n     * Verifies whether the received value is a finite number.<br/>\n     * Behaves almost as a shim of ES6's [Number.isFinite]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite},\n     * but with a difference: it will return <code>true</code> even for Number object's instances.\n     * @example\n     * _.isFinite(5) // => true\n     * _.isFinite(new Number(5)) // => true\n     * _.isFinite(Infinity) // => false\n     * _.isFinite(-Infinity) // => false\n     * _.isFinite(\"5\") // => false\n     * _.isFinite(NaN) // => false\n     * _.isFinite(null) // => false\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @alias isFinite\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isFinite_ (value) {\n        return type(value) === \"Number\" && isFinite(value);\n    }\n\n    /**\n     * Verifies whether the received value is a number and an integer.\n     * Behaves almost as a shim of ES6's [Number.isInteger]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger},\n     * but with a difference: it will return <code>true</code> even for Number object's instances.\n     * @example\n     * _.isInteger(5) // => true\n     * _.isInteger(new Number(5)) // => true\n     * _.isInteger(2.5) // => false\n     * _.isInteger(Infinity) // => false\n     * _.isInteger(-Infinity) // => false\n     * _.isInteger(\"5\") // => false\n     * _.isInteger(NaN) // => false\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.isSafeInteger|isSafeInteger}\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isInteger (value) {\n        return type(value) === \"Number\" && value % 1 === 0;\n    }\n\n    /**\n     * Verifies whether the received value is a \"safe integer\", meaning that is a number and that\n     * can be exactly represented as an IEEE-754 double precision number.\n     * The safe integers consist of all integers from -(2<sup>53</sup> - 1) inclusive to\n     * 2<sup>53</sup> - 1 inclusive.<br/>\n     * Behaves almost as a shim of ES6's [Number.isSafeInteger]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger},\n     * but with a difference: it will return <code>true</code> even for Number object's instances.\n     * @example\n     * _.isSafeInteger(5) // => true\n     * _.isSafeInteger(new Number(5)) // => true\n     * _.isSafeInteger(Math.pow(2, 53) - 1) // => true\n     * _.isSafeInteger(Math.pow(2, 53)) // => false\n     * _.isSafeInteger(2e32) // => false\n     * _.isSafeInteger(2.5) // => false\n     * _.isSafeInteger(Infinity) // => false\n     * _.isSafeInteger(-Infinity) // => false\n     * _.isSafeInteger(\"5\") // => false\n     * _.isSafeInteger(NaN) // => false\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.isInteger|isInteger}\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isSafeInteger (value) {\n        return isInteger(value) && Math.abs(value) <= 9007199254740991;\n    }\n\n    /**\n     * Performs the modulo operation and should not be confused with the\n     * {@link module:lamb.remainder|remainder}.\n     * The function performs a floored division to calculate the result and not\n     * a truncated one, hence the sign of the dividend is not kept, unlike the\n     * {@link module:lamb.remainder|remainder}.\n     * @example\n     * _.modulo(5, 3) // => 2\n     * _.remainder(5, 3) // => 2\n     *\n     * _.modulo(-5, 3) // => 1\n     * _.remainder(-5, 3) // => -2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.remainder|remainder}\n     * @see [Modulo operation on Wikipedia]{@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function modulo (a, b) {\n        return a - (b * Math.floor(a / b));\n    }\n\n    /**\n     * Multiplies two numbers.\n     * @example\n     * _.multiply(5, 3) // => 15\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function multiply (a, b) {\n        return a * b;\n    }\n\n    /**\n     * Generates a random integer between two given integers, both included.\n     * Note that no safety measure is taken if the provided arguments aren't integers, so\n     * you may end up with unexpected (not really) results.\n     * For example <code>randomInt(0.1, 1.2)</code> could be <code>2</code>.\n     * @example\n     *\n     * _.randomInt(1, 10) // => an integer >=1 && <= 10\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function randomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    /**\n     * Generates an arithmetic progression of numbers starting from <code>start</code> up to,\n     * but not including, <code>limit</code>, using the given <code>step</code>.\n     * @example\n     * _.range(2, 10) // => [2, 3, 4, 5, 6, 7, 8, 9]\n     * _.range(2, 10, 0) // => [2]\n     * _.range(1, -10, -2) // => [1, -1, -3, -5, -7, -9]\n     * _.range(1, -10, 2) // => [1]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.generate|generate}\n     * @param {Number} start\n     * @param {Number} limit\n     * @param {Number} [step=1]\n     * @returns {Number[]}\n     */\n    function range (start, limit, step) {\n        if (step === 0 || arguments.length < 2) {\n            return [start];\n        }\n\n        if (!step) {\n            step = 1;\n        }\n\n        var len = Math.max(Math.ceil((limit - start) / step), 0);\n\n        return generate(start, len, partial(add, step));\n    }\n\n    /**\n     * Gets the remainder of the division of two numbers.\n     * Not to be confused with the {@link module:lamb.modulo|modulo} as the remainder\n     * keeps the sign of the dividend and may lead to some unexpected results.\n     * @example\n     * // example of wrong usage of the remainder\n     * // (in this case the modulo operation should be used)\n     * var isOdd = function (n) { return _.remainder(n, 2) === 1; };\n     * isOdd(-3) // => false as -3 % 2 === -1\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.modulo|modulo}\n     * @see [Modulo operation on Wikipedia]{@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function remainder (a, b) {\n        return a % b;\n    }\n\n    /**\n     * Subtracts two numbers.\n     * @example\n     * _.subtract(5, 3) // => 2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function subtract (a, b) {\n        return a - b;\n    }\n\n    lamb.add = add;\n    lamb.clamp = clamp;\n    lamb.clampWithin = clampWithin;\n    lamb.divide = divide;\n    lamb.generate = generate;\n    lamb.isFinite = isFinite_;\n    lamb.isInteger = isInteger;\n    lamb.isSafeInteger = isSafeInteger;\n    lamb.modulo = modulo;\n    lamb.multiply = multiply;\n    lamb.randomInt = randomInt;\n    lamb.range = range;\n    lamb.remainder = remainder;\n    lamb.subtract = subtract;\n\n    /**\n     * Accepts a constructor and builds a predicate expecting an object,\n     * which will be tested to verify whether the prototype of the constructor\n     * is in its prototype chain.<br/>\n     * Wraps in a convenient way the native\n     * [instanceof]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof} operator.\n     * @example\n     * function SomeObjA () {}\n     *\n     * var a = new SomeObjA();\n     * var sObj = new String(\"foo\");\n     * var s = \"foo\";\n     *\n     * _.isInstanceOf(Object)(a) // => true\n     * _.isInstanceOf(SomeObjA)(a) // => true\n     *\n     * _.isInstanceOf(Object)(sObj) // => true\n     * _.isInstanceOf(String)(sObj) // => true\n     *\n     * _.isInstanceOf(Object)(s) // => false\n     * _.isInstanceOf(String)(s) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isType|isType}\n     * @param {*} constructor\n     * @returns {Function}\n     */\n    function isInstanceOf (constructor) {\n        return function (obj) {\n            return obj instanceof constructor;\n        };\n    }\n\n    /**\n     * Verifies if a value is <code>null</code> or <code>undefined</code>.\n     * @example\n     * _.isNil(NaN) // => false\n     * _.isNil({}) // => false\n     * _.isNil(null) // => true\n     * _.isNil(void 0) // => true\n     * _.isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNull|isNull}\n     * @see {@link module:lamb.isUndefined|isUndefined}\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isNil (value) {\n        return isNull(value) || isUndefined(value);\n    }\n\n    /**\n     * Verifies if a value is <code>null</code>.\n     * @example\n     * _.isNull(null) // => true\n     * _.isNull(void 0) // => false\n     * _.isNull(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNil|isNil} if you want to check for <code>undefined</code> too.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isNull (value) {\n        return value === null;\n    }\n\n    /**\n     * Builds a predicate that expects a value to check against the specified type.\n     * @example\n     * var isString = _.isType(\"String\");\n     *\n     * isString(\"Hello\") // => true\n     * isString(new String(\"Hi\")) // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.type|type}\n     * @param {String} typeName\n     * @returns {Function}\n     */\n    function isType (typeName) {\n        return function (value) {\n            return type(value) === typeName;\n        };\n    }\n\n    /**\n     * Verifies if a value is <code>undefined</code>.\n     * @example\n     * _.isUndefined(null) // => false\n     * _.isUndefined(void 0) // => true\n     * _.isUndefined(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNil|isNil} if you want to check for <code>null</code> too.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isUndefined (value) {\n        return value === void 0;\n    }\n\n    /**\n     * Retrieves the \"type tag\" from the given value.\n     * @example\n     * var x = 5;\n     * var y = new Number(5);\n     *\n     * typeof x // => \"number\"\n     * typeof y // => \"object\"\n     * _.type(x) // => \"Number\"\n     * _.type(y) // => \"Number\"\n     *\n     * _.type(Object.prototype.toString) // => \"Function\"\n     * _.type(/a/) // => \"RegExp\"\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isType|isType}\n     * @param {*} value\n     * @returns {String}\n     */\n    function type (value) {\n        return _objectProto.toString.call(value).slice(8, -1);\n    }\n\n    lamb.isInstanceOf = isInstanceOf;\n    lamb.isNil = isNil;\n    lamb.isNull = isNull;\n    lamb.isType = isType;\n    lamb.isUndefined = isUndefined;\n    lamb.type = type;\n\n    /**\n     * A curried version of {@link module:lamb.getIndex|getIndex} that uses the provided index\n     * to build a function expecting the array-like object holding the element we want to retrieve.\n     * @example\n     * var getFifthElement = _.getAt(4);\n     *\n     * getFifthElement([1, 2, 3, 4, 5]) // => 5\n     * getFifthElement(\"foo bar\") // => \"b\"\n     * getFifthElement([]) // => undefined\n     * getFifthElement(\"foo\") // => undefined\n     *\n     * @example <caption>Using negative indexes:</caption>\n     * _.getAt(-2)([1, 2, 3]) // => 2\n     * _.getAt(-3)(\"foo\") // => \"f\"\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.getIndex|getIndex}\n     * @see {@link module:lamb.head|head} and {@link module:lamb.last|last} for common use cases shortcuts.\n     * @param {Number} index\n     * @returns {Function}\n     */\n    function getAt (index) {\n        return function (arrayLike) {\n            return getIndex(arrayLike, index);\n        };\n    }\n\n    /**\n     * Returns the value of the object property with the given key.\n     * @example\n     * var user = {name: \"John\"};\n     *\n     * _.getIn(user, \"name\") // => \"John\";\n     * _.getIn(user, \"surname\") // => undefined\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getKey|getKey}\n     * @see {@link module:lamb.getPath|getPath}, {@link module:lamb.getPathIn|getPathIn}\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {*}\n     */\n    function getIn (obj, key) {\n        return obj[key];\n    }\n\n    /**\n     * Retrieves the element at the given index in an array-like object.<br/>\n     * Like {@link module:lamb.slice|slice} the index can be negative.<br/>\n     * If the index isn't supplied, or if its value isn't an integer within the array-like bounds,\n     * the function will return <code>undefined</code>.<br/>\n     * <code>getIndex</code> will throw an exception when receives <code>null</code> or\n     * <code>undefined</code> in place of an array-like object, but returns <code>undefined</code>\n     * for any other value.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.getIndex(arr, 1) // => 2\n     * _.getIndex(arr, -1) // => 5\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.getAt|getAt}\n     * @see {@link module:lamb.head|head} and {@link module:lamb.last|last} for common use cases shortcuts.\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @returns {*}\n     */\n    function getIndex (arrayLike, index) {\n        var idx = _toNaturalIndex(index, arrayLike.length >>> 0);\n\n        return isUndefined(idx) ? idx : arrayLike[idx];\n    }\n\n    /**\n     * A curried version of {@link module:lamb.getIn|getIn}.<br/>\n     * Receives a property name and builds a function expecting the object from which we want to retrieve\n     * the property.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {name: \"jane\"};\n     * var getName = _.getKey(\"name\");\n     *\n     * getName(user1) // => \"john\"\n     * getName(user2) // => \"jane\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getIn|getIn}\n     * @see {@link module:lamb.getPath|getPath}, {@link module:lamb.getPathIn|getPathIn}\n     * @param {String} key\n     * @returns {Function}\n     */\n    function getKey (key) {\n        return function (obj) {\n            return getIn(obj, key);\n        };\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.getPathIn|getPathIn} with the given\n     * path and separator, expecting the object to act upon.<br/>\n     * @example\n     *  var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         \"user.name\": \"jdoe\",\n     *         password: \"abc123\"\n     *     }\n     * };\n     *\n     * var getPwd = _.getPath(\"login.password\");\n     * var getUsername = _.getPath(\"login/user.name\", \"/\");\n     *\n     * getPwd(user) // => \"abc123\";\n     * getUsername(user) // => \"jdoe\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getPathIn|getPathIn}\n     * @see {@link module:lamb.getIn|getIn}, {@link module:lamb.getKey|getKey}\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function getPath (path, separator) {\n        return partial(getPathIn, _, path, separator);\n    }\n\n    /**\n     * Gets a nested property value from an object using the given path.<br/>\n     * The path is a string with property names separated by dots by default, but\n     * it can be customised with the optional third parameter.<br/>\n     * You can use integers in the path, even negative ones, to refer to array-like\n     * object indexes, but the priority will be given to existing object keys:\n     * the last example explains this particular case.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         \"user.name\": \"jdoe\",\n     *         password: \"abc123\"\n     *     },\n     *     scores: [\n     *         {id: 1, value: 10},\n     *         {id: 2, value: 20},\n     *         {id: 3, value: 30}\n     *     ]\n     * };\n     *\n     * _.getPathIn(user, \"name\") // => \"John\"\n     * _.getPathIn(user, \"login.password\") // => \"abc123\";\n     * _.getPathIn(user, \"login/user.name\", \"/\") // => \"jdoe\"\n     * _.getPathIn(user, \"name.foo\") // => undefined\n     * _.getPathIn(user, \"name.foo.bar\") // => undefined\n     *\n     * @example <caption>Accessing array-like objects indexes:</caption>\n     * _.getPathIn(user, \"login.password.1\") // => \"b\"\n     * _.getPathIn(user, \"scores.0\") // => {id: 1, value: 10}\n     * _.getPathIn(user, \"scores.-1.value\") // => 30\n     *\n     * @example <caption>Priority will be given to existing object keys over indexes:</caption>\n     * _.getPathIn(user, \"scores.-1\") // => {id: 3, value: 30}\n     *\n     * // let's do something funny\n     * user.scores[\"-1\"] = \"foo bar\";\n     *\n     * _.getPathIn(user, \"scores.-1\") // => \"foo bar\";\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getPath|getPath}\n     * @see {@link module:lamb.getIn|getIn}, {@link module:lamb.getKey|getKey}\n     * @param {Object|ArrayLike} obj\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {*}\n     */\n    function getPathIn (obj, path, separator) {\n        var pathInfo = _getPathInfo(obj, _toPathParts(path, separator), true);\n\n        return pathInfo.target;\n    }\n\n    /**\n     * Retrieves the first element of an array-like object.<br/>\n     * Just a common use case of {@link module:lamb.getAt|getAt} exposed for convenience.\n     * @example\n     * _.head([1, 2, 3]) // => 1\n     * _.head(\"hello\") // => \"h\"\n     * _.head([]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.last|last}\n     * @see {@link module:lamb.getIndex|getIndex}, {@link module:lamb.getAt|getAt}\n     * @param {ArrayLike} arrayLike\n     * @returns {*}\n     */\n    var head = getAt(0);\n\n    /**\n     * Retrieves the last element of an array-like object.<br/>\n     * Just a common use case of {@link module:lamb.getAt|getAt} exposed for convenience.\n     * @example\n     * _.last([1, 2, 3]) // => 3\n     * _.last(\"hello\") // => \"o\"\n     * _.last([]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.head|head}\n     * @see {@link module:lamb.getIndex|getIndex}, {@link module:lamb.getAt|getAt}\n     * @param {ArrayLike} arrayLike\n     * @returns {*}\n     */\n    var last = getAt(-1);\n\n    /**\n     * Builds a function that creates a copy of an array-like object with the given\n     * index changed to the desired value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function\n     * will return a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.setAt(2, 99)(arr) // => [1, 2, 99, 4, 5]\n     * arr // => [1, 2, 3, 4, 5]\n     *\n     * _.setAt(10, 99)(arr) // => [1, 2, 3, 4, 5] (not a reference to `arr`)\n     *\n     * @example <caption>Using negative indexes:</caption>\n     * _.setAt(-1, 99)(arr) // => [1, 2, 3, 4, 99]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.setIndex|setIndex}\n     * @param {Number} index\n     * @param {*} value\n     * @returns {Function}\n     */\n    function setAt (index, value) {\n        return function (arrayLike) {\n            return _setIndex(arrayLike, index, value);\n        };\n    }\n\n    /**\n     * Sets the specified key to the given value in a copy of the provided object.<br/>\n     * All the remaining enumerable keys of the source object will be simply copied in the\n     * result object without breaking references.<br/>\n     * If the specified key is not part of the source object, it will be added to the\n     * result.<br/>\n     * The main purpose of the function is to work on simple plain objects used as\n     * data structures, such as JSON objects, and makes no effort to play nice with\n     * objects created from an OOP perspective (it's not worth it).<br/>\n     * For example the prototype of the result will be <code>Object</code>'s regardless\n     * of the <code>source</code>'s one.\n     * @example\n     * var user = {name: \"John\", surname: \"Doe\", age: 30};\n     *\n     * _.setIn(user, \"name\", \"Jane\") // => {name: \"Jane\", surname: \"Doe\", age: 30}\n     * _.setIn(user, \"gender\", \"male\") // => {name: \"John\", surname: \"Doe\", age: 30, gender: \"male\"}\n     *x\n     * // `user` still is {name: \"John\", surname: \"Doe\", age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setKey|setKey}\n     * @see {@link module:lamb.setPath|setPath}, {@link module:lamb.setPathIn|setPathIn}\n     * @param {Object} source\n     * @param {String} key\n     * @param {*} value\n     * @returns {Object}\n     */\n    function setIn (source, key, value) {\n        if (isNil(source)) {\n            throw _makeTypeErrorFor(source, \"object\");\n        }\n\n        return _setIn(source, key, value);\n    }\n\n    /**\n     * Creates a copy of an array-like object with the given index changed to\n     * the desired value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function\n     * will return a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [1, 2, 3];\n     *\n     * _.setIndex(arr, 1, 99) // => [1, 99, 3]\n     * _.setIndex(arr, -1, 99) // => [1, 2, 99]\n     * _.setIndex(arr, 10, 99) // => [1, 2, 3] (not a reference to `arr`)\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.setAt|setAt}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @param {*} value\n     * @returns {Array}\n     */\n    var setIndex = aritize(_setIndex, 3);\n\n    /**\n     * Builds a partial application of {@link module:lamb.setIn|setIn} with the provided\n     * <code>key</code> and <code>value</code>.<br/>\n     * The resulting function expects the object to act upon.<br/>\n     * Please refer to {@link module:lamb.setIn|setIn}'s description for explanations about\n     * how the copy of the source object is made.\n     * @example\n     * var user = {name: \"John\", surname: \"Doe\", age: 30};\n     * var setAgeTo40 = _.setKey(\"age\", 40);\n     *\n     * setAgeTo40(user) // => {name: \"john\", surname: \"doe\", age: 40}\n     *\n     * // `user` still is {name: \"John\", surname: \"Doe\", age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setIn|setIn}\n     * @see {@link module:lamb.setPath|setPath}, {@link module:lamb.setPathIn|setPathIn}\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    function setKey (key, value) {\n        return partial(setIn, _, key, value);\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.setPathIn|setPathIn} expecting the\n     * object to act upon.<br/>\n     * See {@link module:lamb.setPathIn|setPathIn} for more details and examples.\n     * @example\n     * var user = {id: 1, status: {active: false}};\n     * var activate = _.setPath(\"status.active\", true);\n     *\n     * activate(user) // => {id: 1, status: {active: true}}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setPathIn|setPathIn}\n     * @see {@link module:lamb.setIn|setIn}, {@link module:lamb.setKey|setKey}\n     * @param {String} path\n     * @param {*} value\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function setPath (path, value, separator) {\n        return partial(setPathIn, _, path, value, separator);\n    }\n\n    /**\n     * Allows to change a nested value in a copy of the provided object.<br/>\n     * The function will delegate the \"set action\" to {@link module:lamb.setIn|setIn} or\n     * {@link module:lamb.setAt|setAt} depending on the value encountered in the path,\n     * so please refer to the documentation of those functions for specifics about the\n     * implementation.<br/>\n     * Note anyway that the distinction will be between <code>Array</code>s, delegated\n     * to {@link module:lamb.setAt|setAt}, and everything else (including array-like objects),\n     * which will be delegated to {@link module:lamb.setIn|setIn}.<br/>\n     * As a result of that, array-like objects will be converted to objects having numbers as keys\n     * and paths targeting non-object values will be converted to empty objects.<br/>\n     * You can anyway target array elements using integers in the path, even negative ones, but\n     * the priority will be given to existing, and enumerable, object keys.<br/>\n     * Non-enumerable properties encountered in the path will be considered as non-existent properties.<br/>\n     * Like {@link module:lamb.getPathIn|getPathIn} or {@link module:lamb.getPath|getPath} you can\n     * use custom path separators.\n     * @example\n     * var user = {id: 1, status: {active : false, scores: [2, 4, 6]}};\n     *\n     * _.setPathIn(user, \"status.active\", true) // => {id: 1, status: {active : true, scores: [2, 4, 6]}}\n     *\n     * @example <caption>Targeting arrays:</caption>\n     * _.setPathIn(user, \"status.scores.0\", 8) // => {id: 1, status: {active : false, scores: [8, 4, 6]}}\n     *\n     * // you can use negative indexes as well\n     * _.setPathIn(user, \"status.scores.-1\", 8) // => {id: 1, status: {active : false, scores: [2, 4, 8]}}\n     *\n     * @example <caption>Arrays can also be part of the path and not necessarily its target:</caption>\n     * var user = {id: 1, scores: [\n     *     {value: 2, year: \"2000\"},\n     *     {value: 4, year: \"2001\"},\n     *     {value: 6, year: \"2002\"}\n     * ]};\n     *\n     * var newUser = _.setPathIn(user, \"scores.0.value\", 8);\n     * // \"newUser\" holds:\n     * // {id: 1, scores: [\n     * //     {value: 8, year: \"2000\"},\n     * //     {value: 4, year: \"2001\"},\n     * //     {value: 6, year: \"2002\"}\n     * // ]}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setPath|setPath}\n     * @see {@link module:lamb.setIn|setIn}, {@link module:lamb.setKey|setKey}\n     * @param {Object|Array} source\n     * @param {String} path\n     * @param {*} value\n     * @param {String} [separator=\".\"]\n     * @returns {Object|Array}\n     */\n    function setPathIn (source, path, value, separator) {\n        if (isNil(source)) {\n            throw _makeTypeErrorFor(source, \"object\");\n        }\n\n        return _setPathIn(source, _toPathParts(path, separator), value);\n    }\n\n    /**\n     * Builds a function that creates a copy of an array-like object with the given index\n     * changed by applying the provided function to its value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function will return\n     * a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [\"a\", \"b\", \"c\"];\n     * var toUpperCase = _.invoker(\"toUpperCase\");\n     *\n     * _.updateAt(1, toUpperCase)(arr) // => [\"a\", \"B\", \"c\"]\n     * _.updateAt(-1, toUpperCase)(arr) // => [\"a\", \"b\", \"C\"]\n     * _.updateAt(10, toUpperCase)(arr) // => [\"a\", \"b\", \"c\"] (not a reference to `arr`)\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.updateIndex|updateIndex}\n     * @param {Number} index\n     * @param {Function} updater\n     * @returns {Function}\n     */\n    function updateAt (index, updater) {\n        return function (arrayLike) {\n            return _setIndex(arrayLike, index, null, updater);\n        };\n    }\n\n    /**\n     * Creates a copy of the given object having the desired key value updated by applying\n     * the provided function to it.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setIn|setIn}; a copy of the\n     * <code>source</code> is returned otherwise.\n     * @example\n     * var user = {name: \"John\", visits: 2};\n     * var toUpperCase = _.invoker(\"toUpperCase\");\n     *\n     * _.updateIn(user, \"name\", toUpperCase) // => {name: \"JOHN\", visits: 2}\n     * _.updateIn(user, \"surname\", toUpperCase) // => {name: \"John\", visits: 2}\n     *\n     * @example <caption>Non-enumerable properties will be treated as non-existent:</caption>\n     * var user = Object.create({name: \"John\"}, {visits: {value: 2}});\n     * var increment = _.partial(_.add, 1);\n     *\n     * _.updateIn(user, \"visits\", increment) // => {name: \"John\", visits: 2}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.updateKey|updateKey}\n     * @see {@link module:lamb.updatePath|updatePath}, {@link module:lamb.updatePathIn|updatePathIn}\n     * @param {Object} source\n     * @param {String} key\n     * @param {Function} updater\n     * @returns {Object}\n     */\n    function updateIn (source, key, updater) {\n        return _isEnumerable(source, key) ?\n            _setIn(source, key, updater(source[key])) :\n            _merge(enumerables, source);\n    }\n\n    /**\n     * Creates a copy of an array-like object with the given index changed by applying the\n     * provided function to its value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function will return\n     * a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [\"a\", \"b\", \"c\"];\n     * var toUpperCase = _.invoker(\"toUpperCase\");\n     *\n     * _.updateIndex(arr, 1, toUpperCase) // => [\"a\", \"B\", \"c\"]\n     * _.updateIndex(arr, -1, toUpperCase) // => [\"a\", \"b\", \"C\"]\n     * _.updateIndex(arr, 10, toUpperCase) // => [\"a\", \"b\", \"c\"] (not a reference to `arr`)\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.updateAt|updateAt}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @param {Function} updater\n     * @returns {Array}\n     */\n    var updateIndex = partial(_setIndex, _, _, null, _);\n\n    /**\n     * Builds a partial application of {@link module:lamb.updateIn|updateIn} with the provided\n     * <code>key</code> and <code>updater</code>, expecting the object to act upon.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setIn|setIn}; a copy of the\n     * <code>source</code> is returned otherwise.\n     * @example\n     * var user = {name: \"John\", visits: 2};\n     * var increment = _.partial(_.add, 1);\n     * var incrementVisits = _.updateKey(\"visits\", increment);\n     *\n     * incrementVisits(user) // => {name: \"John\", visits: 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.updateIn|updateIn}\n     * @see {@link module:lamb.updatePath|updatePath}, {@link module:lamb.updatePathIn|updatePathIn}\n     * @param {String} key\n     * @param {Function} updater\n     * @returns {Function}\n     */\n    function updateKey (key, updater) {\n        return partial(updateIn, _, key, updater);\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.updatePathIn|updatePathIn}\n     * expecting the object to act upon.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setPathIn|setPathIn}; a copy of the\n     * <code>source</code> is returned otherwise.<br/>\n     * Like the other \"path\" functions, negative indexes can be used to access array elements, but\n     * the priority will be given to existing, and enumerable, object keys.\n     * @example\n     * var user = {id: 1, status: {scores: [2, 4, 6], visits: 0}};\n     * var increment = _.partial(_.add, 1);\n     * var incrementScores = _.updatePath(\"status.scores\", _.mapWith(increment))\n     *\n     * incrementScores(user) // => {id: 1, status: {scores: [3, 5, 7], visits: 0}}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.updatePathIn|updatePathIn}\n     * @see {@link module:lamb.updateIn|updateIn}, {@link module:lamb.updateKey|updateKey}\n     * @param {String} path\n     * @param {Function} updater\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function updatePath (path, updater, separator) {\n        return partial(updatePathIn, _, path, updater, separator);\n    }\n\n    /**\n     * Allows to change a nested value in a copy of the given object by applying the provided\n     * function to it.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setPathIn|setPathIn}; a copy of the\n     * <code>source</code> is returned otherwise.<br/>\n     * Like the other \"path\" functions, negative indexes can be used to access array elements, but\n     * the priority will be given to existing, and enumerable, object keys.\n     * @example\n     * var user = {id: 1, status: {scores: [2, 4, 6], visits: 0}};\n     * var inc = _.partial(_.add, 1);\n     *\n     * _.updatePathIn(user, \"status.visits\", inc) // => {id: 1, status: {scores: [2, 4, 6]}, visits: 1}\n     *\n     * @example <caption>Targeting arrays:</caption>\n     * _.updatePathIn(user, \"status.scores.0\", inc) // => {id: 1, status: {scores: [3, 4, 6], visits: 0}}\n     *\n     * // you can use negative indexes as well\n     * _.updatePathIn(user, \"status.scores.-1\", inc) // => {id: 1, status: {scores: [2, 4, 7], visits: 0}}\n     *\n     * @example <caption>Arrays can also be part of the path and not necessarily its target:</caption>\n     * var user = {id: 1, scores: [\n     *     {value: 2, year: \"2000\"},\n     *     {value: 4, year: \"2001\"},\n     *     {value: 6, year: \"2002\"}\n     * ]};\n     *\n     * var newUser = _.updatePathIn(user, \"scores.0.value\", increment);\n     * // \"newUser\" holds:\n     * // {id: 1, scores: [\n     * //     {value: 3, year: \"2000\"},\n     * //     {value: 4, year: \"2001\"},\n     * //     {value: 6, year: \"2002\"}\n     * // ]}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.updatePath|updatePath}\n     * @see {@link module:lamb.updateIn|updateIn}, {@link module:lamb.updateKey|updateKey}\n     * @param {Object|Array} source\n     * @param {String} path\n     * @param {Function} updater\n     * @param {String} [separator=\".\"]\n     * @returns {Object|Array}\n     */\n    function updatePathIn (source, path, updater, separator) {\n        var parts = _toPathParts(path, separator);\n        var pathInfo = _getPathInfo(source, parts, false);\n\n        if (pathInfo.isValid) {\n            return _setPathIn(source, parts, updater(pathInfo.target));\n        } else {\n            return Array.isArray(source) ? slice(source) : _merge(enumerables, source);\n        }\n    }\n\n    lamb.getAt = getAt;\n    lamb.getIn = getIn;\n    lamb.getIndex = getIndex;\n    lamb.getKey = getKey;\n    lamb.getPath = getPath;\n    lamb.getPathIn = getPathIn;\n    lamb.head = head;\n    lamb.last = last;\n    lamb.setAt = setAt;\n    lamb.setIn = setIn;\n    lamb.setIndex = setIndex;\n    lamb.setKey = setKey;\n    lamb.setPath = setPath;\n    lamb.setPathIn = setPathIn;\n    lamb.updateAt = updateAt;\n    lamb.updateIn = updateIn;\n    lamb.updateIndex = updateIndex;\n    lamb.updateKey = updateKey;\n    lamb.updatePath = updatePath;\n    lamb.updatePathIn = updatePathIn;\n\n    /**\n     * A curried version of {@link module:lamb.appendTo|appendTo} that uses the value to append\n     * to build a function expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4];\n     *\n     * _.append(5)(arr) // => [1, 2, 3, 4, 5]\n     * _.append([5])(arr) // => [1, 2, 3, 4, [5]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.appendTo|appendTo}\n     * @see {@link module:lamb.insert|insert}, {@link module:lamb.insertAt|insertAt}\n     * @param {*} value\n     * @returns {Function}\n     */\n    var append = _curry(appendTo, 2, true);\n\n    /**\n     * Appends the given value at the end of a copy of the provided array-like object.\n     * @example\n     * var arr = [1, 2, 3, 4];\n     *\n     * _.appendTo(arr, 5) // => [1, 2, 3, 4, 5]\n     * _.appendTo(arr, [5]) // => [1, 2, 3, 4, [5]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.append|append}\n     * @see {@link module:lamb.insert|insert}, {@link module:lamb.insertAt|insertAt}\n     * @param {ArrayLike} arrayLike\n     * @param {*} value\n     * @returns {Array}\n     */\n    function appendTo (arrayLike, value) {\n        return Array.isArray(arrayLike) ? arrayLike.concat([value]) : slice(arrayLike).concat([value]);\n    }\n\n    /**\n     * Returns an array of items present only in the first of the given arrays.<br/>\n     * Note that this function uses the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 4, 5];\n     * var a3 = [4, 5, 3, 1];\n     *\n     * _.difference(a1, a2) // => [1, 3]\n     * _.difference(a1, a2, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {...Array} other\n     * @returns {Array}\n     */\n    function difference (array) {\n        var rest = shallowFlatten(map(_argsTail.apply(null, arguments), unary(slice)));\n        var isInRest = partial(isIn, rest, _, 0);\n\n        return filter(array, not(isInRest));\n    }\n\n    /**\n     * Builds an array without the first <code>n</code> elements of the given array or array-like object.\n     * Note that, being this only a shortcut for a specific use case of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.drop(arr, 2) // => [3, 4, 5]\n     * _.drop(arr, -1) // => [5]\n     * _.drop(arr, -10) // => [1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    var drop = binary(slice);\n\n    /**\n     * A curried version of {@link module:lamb.drop|drop} that expects the number of elements\n     * to drop to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.drop|drop} about passing a negative <code>n</code>.\n     * @example\n     * var drop2 = _.dropN(2);\n     *\n     * drop2([1, 2, 3, 4, 5]) // => [3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.drop|drop}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {Number} n\n     * @returns {Function}\n     */\n    function dropN (n) {\n        return function (arrayLike) {\n            return slice(arrayLike, n);\n        };\n    }\n\n    /**\n     * Builds a function that drops the first <code>n</code> elements satisfying a predicate\n     * from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var dropWhileIsEven = _.dropWhile(isEven);\n     *\n     * dropWhileIsEven([2, 4, 6, 8]) // => []\n     * dropWhileIsEven([2, 4, 7, 8]) // => [7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.takeWhile|takeWhile}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function dropWhile (predicate, predicateContext) {\n        var fn = arguments.length === 2 ? _getNumConsecutiveHits : binary(_getNumConsecutiveHits);\n\n        return function (arrayLike) {\n            return slice(arrayLike, fn(arrayLike, predicate, predicateContext));\n        };\n    }\n\n    /**\n     * Similar to {@link module:lamb.map|map}, but if the mapping function returns an array this will\n     * be concatenated, rather than pushed, to the final result.\n     * @example <caption>Showing the difference with <code>map</code>:</caption>\n     * var words = [\"foo\", \"bar\"];\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     *\n     * _.map(words, toCharArray) // => [[\"f\", \"o\", \"o\"], [\"b\", \"a\", \"r\"]]\n     * _.flatMap(words, toCharArray) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.flatMapWith|flatMapWith}\n     * @see {@link module:lamb.map|map}, {@link module:lamb.mapWith|mapWith}\n     * @param {Array} array\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function flatMap (array, iteratee, iterateeContext) {\n        if (arguments.length === 3) {\n            iteratee = iteratee.bind(iterateeContext);\n        }\n\n        return reduce(array, function (result, el, idx, arr) {\n            var v = iteratee(el, idx, arr);\n\n            if (!Array.isArray(v)) {\n                v = [v];\n            }\n\n            for (var i = 0, len = v.length, rLen = result.length; i < len; i++) {\n                result[rLen + i] = v[i];\n            }\n\n            return result;\n        }, []);\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.flatMap|flatMap} using the given iteratee\n     * and the optional context. The resulting function expects the array to act upon.\n     * @example\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     * var wordsToCharArray = _.flatMapWith(toCharArray);\n     *\n     * wordsToCharArray([\"foo\", \"bar\"]) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.flatMap|flatMap}\n     * @see {@link module:lamb.map|map}, {@link module:lamb.mapWith|mapWith}\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Function}\n     */\n    var flatMapWith = _partialWithIteratee(flatMap);\n\n    /**\n     * Flattens an array.\n     * @example <caption>Showing the difference with <code>shallowFlatten</code>:</caption>\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.shallowFlatten(arr) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.shallowFlatten|shallowFlatten}\n     * @param {Array} array\n     * @returns {Array}\n     */\n    function flatten (array) {\n        return Array.isArray(array) ? _flatten(array, true, [], 0) : slice(array);\n    }\n\n    /**\n     * Returns a copy of the given array-like object without the last element.\n     * @example\n     * _.init([1, 2, 3, 4]) // => [1, 2, 3]\n     * _.init([1]) // => []\n     * _.init([]) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.tail|tail}\n     * @see {@link module:lamb.head|head}, {@link module:lamb.last|last}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var init = partial(slice, _, 0, -1);\n\n    /**\n     * Inserts the provided element in a copy of an array-like object at the\n     * specified index.<br/>\n     * If the index is greater than the length of the array-like, the element\n     * will be appended at the end.<br/>\n     * Negative indexes are allowed; when a negative index is out of bounds\n     * the element will be inserted at the start of the resulting array.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.insert(arr, 3, 99) // => [1, 2, 3, 99, 4, 5]\n     * _.insert(arr, -2, 99) // => [1, 2, 3, 99, 4, 5]\n     * _.insert(arr, 10, 99) // => [1, 2, 3, 4, 5, 99]\n     * _.insert(arr, -10, 99) // => [99, 1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.insertAt|insertAt}\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.append|append}, {@link module:lamb.appendTo|appendTo}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @param {*} element\n     * @returns {Array}\n     */\n    function insert (arrayLike, index, element) {\n        var result = slice(arrayLike);\n\n        result.splice(index, 0, element);\n\n        return result;\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.insert|insert}\n     * expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.insertAt(3, 99)(arr) // => [1, 2, 3, 99, 4, 5]\n     * _.insertAt(-2, 99)(arr) // => [1, 2, 3, 99, 4, 5]\n     * _.insertAt(10, 99)(arr) // => [1, 2, 3, 4, 5, 99]\n     * _.insertAt(-10, 99)(arr) // => [99, 1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.insert|insert}\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.append|append}, {@link module:lamb.appendTo|appendTo}\n     * @param {Number} index\n     * @param {*} element\n     * @returns {Function}\n     */\n    function insertAt (index, element) {\n        return partial(insert, _, index, element);\n    }\n\n    /**\n     * Returns an array of every item that is included in all given arrays.<br>\n     * Note that this function uses the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 5, 4, 6];\n     * var a3 = [5, 6, 7];\n     *\n     * _.intersection(a1, a2) // => [2, 4]\n     * _.intersection(a1, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...Array} array\n     * @returns {Array}\n     */\n    function intersection () {\n        var rest = _argsTail.apply(null, arguments);\n\n        return filter(uniques(arguments[0]), function (item) {\n            return everyIn(rest, contains(item));\n        });\n    }\n\n    /**\n     * Splits an array-like object in two lists: the first with the elements satisfying the given predicate,\n     * the others with the remaining elements.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     *\n     * _.partition(numbers, isEven) // => [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.partitionWith|partitionWith}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Array<Array<*>, Array<*>>}\n     */\n    function partition (arrayLike, predicate, predicateContext) {\n        var result = [[], []];\n        var len = arrayLike.length;\n\n        if (arguments.length === 3) {\n            predicate = predicate.bind(predicateContext);\n        }\n\n        for (var i = 0, el; i < len; i++) {\n            el = arrayLike[i];\n            result[predicate(el, i, arrayLike) ? 0 : 1].push(el);\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.partition|partition} using the given\n     * predicate and the optional context.\n     * The resulting function expects the array-like object to act upon.\n     * @example\n     * var users = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"active\": false},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"active\": true},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"active\": true},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"active\": false}\n     * ];\n     * var isActive = _.hasKeyValue(\"active\", true);\n     * var splitByActiveStatus = _.partitionWith(isActive);\n     *\n     * splitByActiveStatus(users) // =>\n     * // [[\n     * //     {\"name\": \"John\", \"surname\": \"Doe\", \"active\": true},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"active\": true}\n     * // ], [\n     * //     {\"name\": \"Jane\", \"surname\": \"Doe\", \"active\": false},\n     * //     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"active\": false}\n     * // ]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.partition|partition}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    var partitionWith = _partialWithIteratee(partition);\n\n    /**\n     * \"Plucks\" the values of the specified key from a list of objects.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 15}\n     * ];\n     *\n     * _.pluck(persons, \"age\") // => [12, 40, 18, 15]\n     *\n     * var lists = [\n     *     [1, 2],\n     *     [3, 4, 5],\n     *     [6]\n     * ];\n     *\n     * _.pluck(lists, \"length\") // => [2, 3, 1]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.pluckKey|pluckKey}\n     * @param {ArrayLike} arrayLike\n     * @param {String} key\n     * @returns {Array}\n     */\n    function pluck (arrayLike, key) {\n        return map(arrayLike, getKey(key));\n    }\n\n    /**\n     * A curried version of {@link module:lamb.pluck|pluck} expecting the key to retrieve to\n     * build a function waiting for the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 15}\n     * ];\n     * var getAges = _.pluckKey(\"age\");\n     *\n     * getAges(persons) // => [12, 40, 18, 15]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.pluck|pluck}\n     * @param {String} key\n     * @returns {Function}\n     */\n    var pluckKey = compose(mapWith, getKey);\n\n    /**\n     * A curried version of {@link module:lamb.pullFrom|pullFrom} expecting\n     * a list of values to build a function waiting for an array-like object.<br/>\n     * The new function will create an array copy of the array-like without\n     * the specified values.<br/>\n     * The equality test is made with the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example\n     * var scores = [40, 20, 30, 10];\n     * var newScores = [30, 10];\n     * var pullNewScores = _.pull(newScores);\n     *\n     * pullNewScores(scores) // => [40, 20]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.pullFrom|pullFrom}\n     * @param {ArrayLike} values\n     * @returns {Function}\n     */\n    var pull = _curry(pullFrom, 2, true);\n\n    /**\n     * Creates an array copy of the given array-like object without the\n     * specified values.<br/>\n     * The equality test is made with the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.pullFrom(arr, [2, 5]) // => [1, 3, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.pull|pull}\n     * @param {ArrayLike} array\n     * @param {ArrayLike} values\n     * @returns {Array}\n     */\n    function pullFrom (array, values) {\n        return filter(array, function (element) {\n            return !isIn(values, element);\n        });\n    }\n\n    /**\n     * Flattens the \"first level\" of an array.\n     * @example <caption>Showing the difference with <code>flatten</code>:</caption>\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.shallowFlatten(arr) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.flatten|flatten}\n     * @param {Array} array\n     * @returns {Array}\n     */\n    function shallowFlatten (array) {\n        return Array.isArray(array) ? _flatten(array, false, [], 0) : slice(array);\n    }\n\n    /**\n     * Returns a copy of the given array-like object without the first element.\n     * @example\n     * _.tail([1, 2, 3, 4]) // => [2, 3, 4]\n     * _.tail([1]) // => []\n     * _.tail([]) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.init|init}\n     * @see {@link module:lamb.head|head}, {@link module:lamb.last|last}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var tail = partial(slice, _, 1, void 0);\n\n    /**\n     * Retrieves the first <code>n</code> elements from an array or array-like object.<br/>\n     * Note that, being this a shortcut for a common use case of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.take(arr, 3) // => [1, 2, 3]\n     * _.take(arr, -1) // => [1, 2, 3, 4]\n     * _.take(arr, -10) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    function take (arrayLike, n) {\n        return slice(arrayLike, 0, +n);\n    }\n\n    /**\n     * A curried version of {@link module:lamb.take|take} that expects the number of elements\n     * to retrieve to build a function waiting for the list to take the elements from.\n     * See the note and examples for {@link module:lamb.take|take} about passing a negative <code>n</code>.\n     * @example\n     * var take2 = _.takeN(2);\n     *\n     * take2([1, 2, 3, 4, 5]) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.take|take}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {Number} n\n     * @returns {Function}\n     */\n    function takeN (n) {\n        return function (arrayLike) {\n            return slice(arrayLike, 0, +n);\n        };\n    }\n\n    /**\n     * Builds a function that takes the first <code>n</code> elements satisfying a predicate from\n     * an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var takeWhileIsEven = _.takeWhile(isEven);\n     *\n     * takeWhileIsEven([1, 2, 4, 6, 8]) // => []\n     * takeWhileIsEven([2, 4, 7, 8]) // => [2, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.dropWhile|dropWhile}\n     * @see {@link module:lamb.take|take}, {@link module:lamb.takeN|takeN}\n     * @see {@link module:lamb.drop|drop}, {@link module:lamb.dropN|dropN}\n     * @param {ListIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function takeWhile (predicate, predicateContext) {\n        var fn = arguments.length === 2 ? _getNumConsecutiveHits : binary(_getNumConsecutiveHits);\n\n        return function (arrayLike) {\n            return slice(arrayLike, 0, fn(arrayLike, predicate, predicateContext));\n        };\n    }\n\n    /**\n     * Transposes a matrix. Can also be used to reverse a {@link module:lamb.zip|zip} operation.<br/>\n     * Just like {@link module:lamb.zip|zip}, the received array-like objects will be truncated to the\n     * shortest length.\n     * @example <caption>Transposing a matrix:</caption>\n     * _.transpose([\n     *     [1, 2, 3],\n     *     [4, 5, 6],\n     *     [7, 8, 9]\n     * ]) // =>\n     * // [\n     * //     [1, 4, 7],\n     * //     [2, 5, 8],\n     * //     [3, 6, 9]\n     * // ]\n     *\n     * @example <caption>Showing the relationship with <code>zip</code>:</caption>\n     * var zipped = _.zip([\"a\", \"b\", \"c\"], [1, 2, 3]); // => [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n     *\n     * _.transpose(zipped) // => [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.zip|zip}\n     * @param {ArrayLike<ArrayLike<*>>} arrayLike\n     * @returns {Array<Array<*>>}\n     */\n    function transpose (arrayLike) {\n        var result = [];\n        var len = arrayLike.length >>> 0;\n\n        if (len === 0) {\n            return result;\n        }\n\n        var minLen = arrayLike[0].length >>> 0;\n\n        for (var j = 1, elementLen; j < len && minLen > 0; j++) {\n            elementLen = arrayLike[j].length >>> 0;\n\n            if (elementLen < minLen) {\n                minLen = elementLen;\n            }\n        }\n\n        for (var i = 0, el; i < minLen; i++) {\n            el = result[i] = Array(len);\n\n            for (j = 0; j < len; j++) {\n                el[j] = arrayLike[j][i];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a list of every unique element present in the given array-like objects.\n     * @example\n     * _.union([1, 2, 3, 2], [3, 4], [1, 5]) // => [1, 2, 3, 4, 5]\n     * _.union(\"abc\", \"bcd\", \"cde\") // => [\"a\", \"b\", \"c\", \"d\", \"e\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {...ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var union = compose(uniques, flatMapWith(unary(slice)), list);\n\n    /**\n     * Returns an array comprised of the unique elements of the given array-like object.<br/>\n     * Can work with lists of complex objects if supplied with an iteratee.<br/>\n     * Note that this function uses the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.<br/>\n     * When two values are considered equal, the first occurence will be the one included\n     * in the result array.\n     * @example <caption>With simple values:</caption>\n     * _.uniques([-0, 1, 2, 0, 2, 3, 4, 3, 5, 1]) // => [-0, 1, 2, 3, 4, 5]\n     *\n     * @example <caption>With complex values:</caption>\n     * var data  = [\n     *     {id: \"1\", name: \"John\"},\n     *     {id: \"4\", name: \"Jane\"},\n     *     {id: \"5\", name: \"Joe\"},\n     *     {id: \"1\", name: \"Mario\"},\n     *     {id: \"5\", name: \"Paolo\"},\n     * ];\n     *\n     * _.uniques(data, _.getKey(\"id\")) // =>\n     * // [\n     * //     {id: \"1\", name: \"John\"},\n     * //     {id: \"4\", name: \"Jane\"},\n     * //     {id: \"5\", name: \"Joe\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} [iteratee={@link module:lamb.identity|identity}]\n     * @param {Object} [iterateeContext]\n     * @returns {Array}\n     */\n    function uniques (arrayLike, iteratee, iterateeContext) {\n        if (typeof iteratee !== \"function\") {\n            iteratee = identity;\n        } else if (arguments.length === 3) {\n            iteratee = iteratee.bind(iterateeContext);\n        }\n\n        var result = [];\n        var len = arrayLike.length;\n\n        for (var i = 0, seen = [], hasNaN = false, value; i < len; i++) {\n            value = iteratee(arrayLike[i], i, arrayLike);\n\n            // eslint-disable-next-line no-self-compare\n            if (value === value) {\n                if (seen.indexOf(value) === -1) {\n                    seen[seen.length] = value;\n                    result[result.length] = arrayLike[i];\n                }\n            } else if (!hasNaN) {\n                hasNaN = true;\n                result[result.length] = arrayLike[i];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a list of arrays out of the given array-like objects by pairing items with the same index.<br/>\n     * The received array-like objects will be truncated to the shortest length.\n     * @example\n     * _.zip(\n     *     [\"a\", \"b\", \"c\"],\n     *     [1, 2, 3],\n     *     [true, false, true]\n     * ) // => [[\"a\", 1, true], [\"b\", 2, false], [\"c\", 3, true]]\n     *\n     * _.zip([1, 2, 3, 4], [5, 6, 7]) // => [[1, 5], [2, 6], [3, 7]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.transpose|transpose} for the reverse operation\n     * @see {@link module:lamb.zipWithIndex|zipWithIndex}\n     * @param {...ArrayLike} arrayLike\n     * @returns {Array<Array<*>>}\n     */\n    var zip = compose(transpose, list);\n\n    /**\n     * \"{@link module:lamb.zip|Zips}\" an array-like object by pairing its values with their index.\n     * @example\n     * _.zipWithIndex([\"a\", \"b\", \"c\"]) // => [[\"a\", 0], [\"b\", 1], [\"c\", 2]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.zip|zip}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array<Array<*, Number>>}\n     */\n    var zipWithIndex = mapWith(binary(list));\n\n    lamb.append = append;\n    lamb.appendTo = appendTo;\n    lamb.difference = difference;\n    lamb.drop = drop;\n    lamb.dropN = dropN;\n    lamb.dropWhile = dropWhile;\n    lamb.flatMap = flatMap;\n    lamb.flatMapWith = flatMapWith;\n    lamb.flatten = flatten;\n    lamb.init = init;\n    lamb.insert = insert;\n    lamb.insertAt = insertAt;\n    lamb.intersection = intersection;\n    lamb.partition = partition;\n    lamb.partitionWith = partitionWith;\n    lamb.pluck = pluck;\n    lamb.pluckKey = pluckKey;\n    lamb.pull = pull;\n    lamb.pullFrom = pullFrom;\n    lamb.shallowFlatten = shallowFlatten;\n    lamb.tail = tail;\n    lamb.take = take;\n    lamb.takeN = takeN;\n    lamb.takeWhile = takeWhile;\n    lamb.transpose = transpose;\n    lamb.union = union;\n    lamb.uniques = uniques;\n    lamb.zip = zip;\n    lamb.zipWithIndex = zipWithIndex;\n\n    /**\n     * Transforms an array-like object in a lookup table with the keys generated by the provided\n     * <code>iteratee</code>, having as values the count of matches for the key.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12},\n     *     {\"name\": \"John\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"age\": 17},\n     *     {\"name\": \"Paolo\", \"age\": 15}\n     * ];\n     * var getAgeStatus = function (person) { return person.age >= 18 ? \"adult\" : \"minor\"; };\n     *\n     * _.count(persons, getAgeStatus) // => {\"adult\": 1, \"minor\": 3}\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Object}\n     */\n    var count = _groupWith(function (a) {\n        return a ? ++a : 1;\n    });\n\n    /**\n     * Using the provided iteratee, and its optional context, builds a partial application of\n     * {@link module:lamb.count|count} expecting the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"city\": \"New York\"},\n     *     {\"name\": \"John\", \"city\": \"New York\"},\n     *     {\"name\": \"Mario\", \"city\": \"Rome\"},\n     *     {\"name\": \"Paolo\"}\n     * ];\n     * var getCityOrUnknown = _.adapter(_.getKey(\"city\"), _.always(\"Unknown\"));\n     * var countByCity = _.countBy(getCityOrUnknown);\n     *\n     * countByCity(persons) // => {\"New York\": 2, \"Rome\": 1, \"Unknown\": 1}\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.count|count}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Function}\n     */\n    var countBy = _partialWithIteratee(count);\n\n    /**\n     * Transforms an array-like object into a lookup table using the provided iteratee as a grouping\n     * criterion to generate keys and values.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"city\": \"New York\"},\n     *     {\"name\": \"John\", \"city\": \"New York\"},\n     *     {\"name\": \"Mario\", \"city\": \"Rome\"},\n     *     {\"name\": \"Paolo\"}\n     * ];\n     * var getCity = _.getKey(\"city\");\n     * var personsByCity = _.group(persons, getCity);\n     *\n     * // \"personsByCity\" holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"undefined\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @example <caption>Adding a custom value for missing keys:</caption>\n     *\n     * var getCityOrUnknown = _.adapter(getCity, _.always(\"Unknown\"));\n     *\n     * var personsByCity = _.group(persons, getCityOrUnknown);\n     *\n     * // \"personsByCity\" holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"Unknown\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.groupBy|groupBy}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Object}\n     */\n    var group = _groupWith(function (a, b) {\n        if (!a) {\n            return [b];\n        }\n\n        a[a.length] = b;\n\n        return a;\n    });\n\n    /**\n     * Using the provided iteratee, and its optional context, builds a partial application\n     * of {@link module:lamb.group|group} expecting the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12},\n     *     {\"name\": \"John\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"age\": 15}\n     * ];\n     *\n     * var getAgeStatus = function (person) { return person.age > 20 ? \"over 20\" : \"under 20\"; };\n     * var groupByAgeStatus = _.groupBy(getAgeStatus);\n     *\n     * var personsByAgeStatus = groupByAgeStatus(persons);\n     *\n     * // \"personsByAgeStatus\" holds:\n     * // {\n     * //     \"under 20\": [\n     * //         {\"name\": \"Jane\", \"age\": 12},\n     * //         {\"name\": \"Mario\", \"age\": 18},\n     * //         {\"name\": \"Paolo\", \"age\": 15}\n     * //     ],\n     * //     \"over 20\": [\n     * //         {\"name\": \"John\", \"age\": 40}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.group|group}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Function}\n     */\n    var groupBy = _partialWithIteratee(group);\n\n    /**\n     * Similar to {@link module:lamb.group|group}, but the generated lookup table will have\n     * only one element of the original array-like object for each value.<br/>\n     * Should be used only when you're sure that your <code>iteratee</code> won't produce\n     * duplicate keys, otherwise only the last evaluated element will be in the result.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\"},\n     *     {id: 2, name: \"Jane\"},\n     *     {id: 3, name: \"Mario\"},\n     *     {id: 4, name: \"John\"}\n     * ];\n     *\n     * var indexedUsers = _.index(users, _.getKey(\"id\"));\n     *\n     * // \"indexedUsers\" holds:\n     * // {\n     * //     \"1\": {id: 1, name: \"John\"},\n     * //     \"2\": {id: 2, name: \"Jane\"},\n     * //     \"3\": {id: 3, name: \"Mario\"},\n     * //     \"4\": {id: 4, name: \"John\"}\n     * // }\n     *\n     * @example <caption>Result of an <code>iteratee</code> producing a duplicate key:</caption>\n     * var users = [\n     *     {id: 1, name: \"John\"},\n     *     {id: 2, name: \"Jane\"},\n     *     {id: 3, name: \"Mario\"},\n     *     {id: 4, name: \"John\"}\n     * ];\n     *\n     * var indexedUsers = _.index(users, _.getKey(\"name\"));\n     *\n     * // \"indexedUsers\" holds:\n     * // {\n     * //     \"John\": {\"id\": 4, \"name\": \"John\"},\n     * //     \"Jane\": {\"id\": 2, \"name\": \"Jane\"},\n     * //     \"Mario\": {\"id\": 3, \"name\": \"Mario\"}\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.indexBy|indexBy}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Object}\n     */\n    var index = _groupWith(function (a, b) {\n        return b;\n    });\n\n    /**\n     * Using the provided iteratee, and its optional context, builds a partial application\n     * of {@link module:lamb.index|index} expecting the array-like object to act upon.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\"},\n     *     {id: 2, name: \"Jane\"},\n     *     {id: 3, name: \"Mario\"}\n     * ];\n     * var indexByID = _.indexBy(_.getKey(\"id\"));\n     *\n     * var indexedUsers = indexByID(users);\n     *\n     * // \"indexedUsers\" holds:\n     * // {\n     * //     \"1\": {id: 1, name: \"John\"},\n     * //     \"2\": {id: 2, name: \"Jane\"},\n     * //     \"3\": {id: 3, name: \"Mario\"}\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.index|index}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @param {ListIteratorCallback} iteratee\n     * @param {Object} [iterateeContext]\n     * @returns {Function}\n     */\n    var indexBy = _partialWithIteratee(index);\n\n    lamb.count = count;\n    lamb.countBy = countBy;\n    lamb.group = group;\n    lamb.groupBy = groupBy;\n    lamb.index = index;\n    lamb.indexBy = indexBy;\n\n    /**\n     * Returns a [stably]{@link https://en.wikipedia.org/wiki/Sorting_algorithm#Stability} sorted\n     * copy of an array-like object using the given criteria.<br/>\n     * Sorting criteria are built using Lamb's {@link module:lamb.sorter|sorter} function, but you\n     * can also pass simple \"reader\" functions and default ascending sorters will be built for you.<br/>\n     * A \"reader\" is a function that evaluates the array element and supplies the value to be used\n     * in the comparison.<br/>\n     * Please note that if the arguments received by the default comparer aren't of the same type,\n     * they will be compared as strings.\n     *\n     * @example <caption>Stable sort:</caption>\n     * var persons = [\n     *     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"},\n     *     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     *     {\"name\": \"Jane\", \"surname\": \"Foe\"}\n     * ];\n     *\n     * var personsByName = _.sort(persons, _.getKey(\"name\"));\n     *\n     * // personsByName holds:\n     * // [\n     * //     {\"name\": \"Jane\", \"surname\": \"Foe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @example <caption>Stable multi-sort:</caption>\n     * var personsByNameAscSurnameDesc = _.sort(\n     *     persons,\n     *     _.getKey(\"name\"),\n     *     _.sorterDesc(_.getKey(\"surname\"))\n     * );\n     *\n     * // personsByNameAscSurnameDesc holds:\n     * // [\n     * //     {\"name\": \"Jane\", \"surname\": \"Foe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @example <caption>Using custom comparers:</caption>\n     * var localeSorter = new Intl.Collator(\"it\");\n     * var chars = [\"a\", \"è\", \"à\", \"é\", \"c\", \"b\", \"e\"];\n     *\n     * _.sort(chars, localeSorter) // => [\"a\", \"à\", \"b\", \"c\", \"e\", \"é\", \"è\"]\n     *\n     * var localeSorterDesc = _.sorterDesc(_.identity, localeSorter.compare);\n     *\n     * _.sort(chars, localeSorterDesc) // => [\"è\", \"é\", \"e\", \"c\", \"b\", \"à\", \"a\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {ArrayLike} arrayLike\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}]\n     * @returns {Array}\n     */\n    function sort (arrayLike) {\n        var criteria = _makeCriteria(_argsTail.apply(null, arguments));\n        var len = arrayLike.length >>> 0;\n        var result = Array(len);\n\n        for (var i = 0; i < len; i++) {\n            result[i] = {value: arrayLike[i], index: i};\n        }\n\n        result.sort(_compareWith(criteria));\n\n        for (i = 0; i < len; i++) {\n            result[i] = result[i].value;\n        }\n\n        return result;\n    }\n\n    /**\n     * Inserts an element in a copy of a sorted array respecting the sort order.\n     * @example <caption>With simple values:</caption>\n     * _.sortedInsert([], 1) // => [1]\n     * _.sortedInsert([2, 4, 6], 5) // => [2, 4, 5, 6]\n     * _.sortedInsert([4, 2, 1], 3, _.sorterDesc()) // => [4, 3, 2, 1]\n     *\n     * @example <caption>With complex values:</caption>\n     * var persons = [\n     *     {\"name\": \"jane\", \"surname\": \"doe\"},\n     *     {\"name\": \"John\", \"surname\": \"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * ];\n     *\n     * var getLowerCaseName = _.compose(\n     *     _.invoker(\"toLowerCase\"),\n     *     _.getKey(\"name\")\n     * );\n     *\n     * var result = _.sortedInsert(\n     *     persons,\n     *     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     *     getLowerCaseName\n     * );\n     *\n     * // `result` holds:\n     * // [\n     * //     {\"name\": \"jane\", \"surname\": \"doe\"},\n     * //     {\"name\": \"John\", \"surname\": \"Doe\"},\n     * //     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @see {@link module:lamb.insert|insert}, {@link module:lamb.insertAt|insertAt} to insert the element\n     * at a specific index\n     * @param {ArrayLike} arrayLike\n     * @param {*} element\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}] - The sorting criteria\n     * used to sort the array.\n     * @returns {Array}\n     */\n    function sortedInsert (arrayLike, element) {\n        var result = slice(arrayLike);\n\n        if (arguments.length === 1) {\n            return result;\n        }\n\n        var len = arguments.length - 2;\n        var sorters = Array(len);\n\n        for (var i = 0; i < len; i++) {\n            sorters[i] = arguments[i + 2];\n        }\n\n        var criteria = _makeCriteria(sorters);\n        var idx = _getInsertionIndex(result, element, _compareWith(criteria), 0, result.length);\n\n        result.splice(idx, 0, element);\n\n        return result;\n    }\n\n    /**\n     * Creates an ascending sort criterion with the provided <code>reader</code> and\n     * <code>comparer</code>.<br/>\n     * See {@link module:lamb.sort|sort} for various examples.\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {Function} [reader={@link module:lamb.identity|identity}] A function meant to generate a\n     * simple value from a complex one. The function should evaluate the array element and supply the\n     * value to be passed to the comparer.\n     * @param {Function} [comparer] An optional custom comparer function.\n     * @returns {Sorter}\n     */\n    var sorter = partial(_sorter, _, false, _);\n\n    /**\n     * Creates a descending sort criterion with the provided <code>reader</code> and\n     * <code>comparer</code>.<br/>\n     * See {@link module:lamb.sort|sort} for various examples.\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}\n     * @param {Function} [reader={@link module:lamb.identity|identity}] A function meant to generate a\n     * simple value from a complex one. The function should evaluate the array element and supply the\n     * value to be passed to the comparer.\n     * @param {Function} [comparer] An optional custom comparer function.\n     * @returns {Sorter}\n     */\n    var sorterDesc = partial(_sorter, _, true, _);\n\n    /**\n     * Builds a partial application of {@link module:lamb.sort|sort} using the provided criteria.\n     * The returned function expects the array-like object to sort.\n     * As usual, sorting criteria are built using Lamb's {@link module:lamb.sorter|sorter} function,\n     * but you can also pass simple \"reader\" functions and default ascending sorters will be built.<br/>\n     * A \"reader\" is a function that evaluates the array element and supplies the value to be used in\n     * the comparison.<br/>\n     * See {@link module:lamb.sort|sort} for more examples.\n     *\n     * @example\n     * var sortAsNumbers = _.sortWith(parseFloat);\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     *\n     * sortAsNumbers(weights) // => [\"1 Kg\", \"2 Kg\", \"7 Kg\", \"10 Kg\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sort|sort}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}]\n     * @returns {Function}\n     */\n    function sortWith () {\n        var sorters = list.apply(null, arguments);\n\n        return function (arrayLike) {\n            return sort.apply(null, [arrayLike].concat(sorters));\n        };\n    }\n\n    lamb.sort = sort;\n    lamb.sortedInsert = sortedInsert;\n    lamb.sorter = sorter;\n    lamb.sorterDesc = sorterDesc;\n    lamb.sortWith = sortWith;\n\n    /**\n     * Applies the given function to a list of arguments.\n     * @example\n     * _.application(_.add, [3, 4]) // => 7\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.apply|apply}, {@link module:lamb.applyTo|applyTo}\n     * @param {Function} fn\n     * @param {ArrayLike} args\n     * @returns {*}\n     */\n    function application (fn, args) {\n        return fn.apply(this, Object(args));\n    }\n\n    /**\n     * A left-curried version of {@link module:lamb.application|application}. Expects the function\n     * to apply and builds a function waiting for the arguments array.\n     * @example\n     * var arrayMax = _.apply(Math.max);\n     *\n     * arrayMax([4, 5, 2, 6, 1]) // => 6\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.application|application}, {@link module:lamb.applyTo|applyTo}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function apply (fn) {\n        return function (args) {\n            return fn.apply(this, Object(args));\n        };\n    }\n\n    /**\n     * A right-curried version of {@link module:lamb.application|application}. Expects an array-like\n     * object to use as arguments and builds a function waiting for the target of the application.\n     * @example\n     * var data = [3, 4];\n     * var applyToData = _.applyTo(data);\n     *\n     * applyToData(_.add) // => 7\n     * applyToData(_.multiply) // => 12\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.application|application}, {@link module:lamb.apply|apply}\n     * @param {ArrayLike} args\n     * @returns {Function}\n     */\n    function applyTo (args) {\n        return function (fn) {\n            return fn.apply(this, Object(args));\n        };\n    }\n\n    /**\n     * Builds a function that passes only the specified amount of arguments to the given function.<br/>\n     * As {@link module:lamb.slice|slice} is used to extract the arguments, you can also\n     * pass a negative arity.\n     * @example\n     * function maxArgument () {\n     *     return Math.max.apply(null, arguments);\n     * }\n     *\n     * maxArgument(10, 11, 45, 99) // => 99\n     * _.aritize(maxArgument, 2)(10, 11, 45, 99) // => 11\n     *\n     * @example <caption>Using a negative arity:</caption>\n     * _.aritize(maxArgument, -1)(10, 11, 45, 99) // => 45\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.binary|binary}, {@link module:lamb.unary|unary} for common use cases shortcuts\n     * @param {Function} fn\n     * @param {Number} arity\n     * @returns {Function}\n     */\n    function aritize (fn, arity) {\n        return function () {\n            var args = slice(list.apply(null, arguments), 0, arity);\n            var argsLen = args.length;\n            var n = Math.floor(arity);\n\n            if (n > 0) {\n                while (argsLen < n) {\n                    args[argsLen++] = void 0;\n                }\n            }\n\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Decorates the received function so that it can be called with\n     * placeholders to build a partial application of it.<br/>\n     * The difference with {@link module:lamb.partial|partial} is that, as long as\n     * you call the generated function with placeholders, another partial application\n     * of the original function will be built.<br/>\n     * The final application will happen when one of the generated functions is\n     * invoked without placeholders, using the parameters collected so far. <br/>\n     * This function comes in handy when you need to build different specialized\n     * functions starting from a basic one, but it's also useful when dealing with\n     * optional parameters as you can decide to apply the function even if its arity\n     * hasn't been entirely consumed.\n     * @example <caption>Explaining the function's behaviour:</caption>\n     * var f = _.asPartial(function (a, b, c) {\n     *     return a + b + c;\n     * });\n     *\n     * f(4, 3, 2) // => 9\n     * f(4, _, 2)(3) // => 9\n     * f(_, 3, _)(4, _)(2) // => 9\n     *\n     * @example <caption>Exploiting optional parameters:</caption>\n     * var f = _.asPartial(function (a, b, c) {\n     *     return a + b + (c || 0);\n     * });\n     *\n     * var addFive = f(5, _);\n     * addFive(2) // => 7\n     *\n     * var addNine = addFive(4, _);\n     * addNine(11) // => 20\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.partial|partial}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function asPartial (fn) {\n        return _asPartial(fn, []);\n    }\n\n    /**\n     * Builds a function that passes only two arguments to the given function.<br/>\n     * It's simply a shortcut for a common use case of {@link module:lamb.aritize|aritize},\n     * exposed for convenience.\n     * @example\n     * _.list(1, 2, 3, 4, 5) // => [1, 2, 3, 4, 5]\n     * _.binary(_.list)(1, 2, 3, 4, 5) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.aritize|aritize}\n     * @see {@link module:lamb.unary|unary}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function binary (fn) {\n        return function (a, b) {\n            return fn.call(this, a, b);\n        };\n    }\n\n    /**\n     * Accepts a series of functions and builds a new function. The functions in the series\n     * will then be applied, in order, with the values received by the function built with\n     * <code>collect</code>.<br/>\n     * The collected results will be returned in an array.\n     * @example\n     * var user = {\n     *     id: \"jdoe\",\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     scores: [2, 4, 7]\n     * };\n     * var getIDAndLastScore = _.collect(_.getKey(\"id\"), _.getPath(\"scores.-1\"));\n     *\n     * getIDAndLastScore(user) // => [\"jdoe\", 7]\n     *\n     * @example\n     * var minAndMax = _.collect(Math.min, Math.max);\n     *\n     * minAndMax(3, 1, -2, 5, 4, -1) // => [-2, 5]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function collect () {\n        var functions = list.apply(null, arguments);\n\n        return function () {\n            return map(functions, applyTo(arguments));\n        };\n    }\n\n    /**\n     * Transforms the evaluation of the given function in the evaluation of a sequence of functions\n     * expecting only one argument. Each function of the sequence is a partial application of the\n     * original one, which will be applied when the specified (or derived) arity is consumed.<br/>\n     * Currying will start from the leftmost argument: use {@link module:lamb.curryRight|curryRight}\n     * for right currying.\n     * @example\n     * var multiplyBy = _.curry(_.multiply);\n     * var multiplyBy10 = multiplyBy(10);\n     *\n     * multiplyBy10(5) // => 50\n     * multiplyBy10(2) // => 20\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curry (fn, arity) {\n        return _curry(fn, arity, false);\n    }\n\n    /**\n     * Builds an auto-curried function. The resulting function can be called multiple times with\n     * any number of arguments, and the original function will be applied only when the specified\n     * (or derived) arity is consumed.<br/>\n     * Currying will start from the leftmost argument: use {@link module:lamb.curryableRight|curryableRight}\n     * for right currying.\n     * @example\n     * var collectFourElements = _.curryable(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2)(3, 4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2, 3, 4, 5) // => [2, 3, 4, 5]\n     * collectFourElements(2, 3)(4, 5) // => [2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curryableRight|curryableRight}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryable (fn, arity) {\n        return _curry(fn, arity, false, true);\n    }\n\n    /**\n     * Same as {@link module:lamb.curryable|curryable}, but currying starts from the rightmost argument.\n     * @example\n     * var collectFourElements = _.curryableRight(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [5, 4, 3, 2]\n     * collectFourElements(2)(3, 4)(5) // => [5, 4, 3, 2]\n     * collectFourElements(2, 3, 4, 5) // => [5, 4, 3, 2]\n     * collectFourElements(2, 3)(4, 5) // => [5, 4, 3, 2]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curryable|curryable}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryableRight (fn, arity) {\n        return _curry(fn, arity, true, true);\n    }\n\n    /**\n     * Same as {@link module:lamb.curry|curry}, but currying starts from the rightmost argument.\n     * @example\n     * var divideBy = _.curryRight(_.divide);\n     * var halve = divideBy(2);\n     * halve(3) // => 1.5\n     * halve(3, 7) // => 1.5\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curry|curry}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryRight (fn, arity) {\n        return _curry(fn, arity, true);\n    }\n\n    /**\n     * Returns a function that will execute the given function only if it stops being called for the\n     * specified timespan.<br/>\n     * See also {@link module:lamb.throttle|throttle} for a different behaviour where the first call\n     * happens immediately.\n     * @example <caption>A common use case of <code>debounce</code> in a browser environment:</caption>\n     * var updateLayout = function () {\n     *     // some heavy DOM operations here\n     * };\n     *\n     * window.addEventListener(\"resize\", _.debounce(updateLayout, 200), false);\n     *\n     * // The resize event is fired repeteadly until the user stops resizing the\n     * // window, while the `updateLayout` function is called only once: 200 ms\n     * // after he stopped.\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.throttle|throttle}\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds\n     * @returns {Function}\n     */\n    function debounce (fn, timespan) {\n        var timeoutID;\n\n        return function () {\n            var args = arguments;\n            var debounced = function () {\n                timeoutID = null;\n                fn.apply(this, args);\n            }.bind(this);\n\n            clearTimeout(timeoutID);\n            timeoutID = setTimeout(debounced, timespan);\n        };\n    }\n\n    /**\n     * Returns a function that applies the original function with the arguments in reverse order.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     * _.flip(_.list)(1, 2, 3) // => [3, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function flip (fn) {\n        return function () {\n            var args = list.apply(null, arguments).reverse();\n\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Builds a function that returns the argument received at the given index.<br/>\n     * As with {@link module:lamb.getAt|getAt} negative indexes are allowed.<br/>\n     * The resulting function will return <code>undefined</code> if no arguments are\n     * passed or if the index is out of bounds.\n     * @example\n     * var getFirstArg = getArgAt(0);\n     * var getLastArg = getArgAt(-1);\n     *\n     * getFirstArg(1, 2, 3) // => 1\n     * getLastArg(1, 2, 3) // => 3\n     *\n     * getArgAt()(1, 2, 3) // => undefined\n     * getArgAt(6)(1, 2, 3) // => undefined\n     * getArgAt(1)() // => undefined\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Number} idx\n     * @returns {Function}\n     */\n    function getArgAt (idx) {\n        return function () {\n            return arguments[_toNaturalIndex(idx, arguments.length)];\n        };\n    }\n\n    /**\n     * Builds a function that will invoke the given method name on any received object and return\n     * the result. If no method with such name is found the function will return <code>undefined</code>.\n     * Along with the method name it's possible to supply some arguments that will be bound to the\n     * method call.<br/>\n     * Further arguments can also be passed when the function is actually called, and they will be\n     * concatenated to the bound ones.<br/>\n     * If different objects share a method name it's possible to build polymorphic functions as you\n     * can see in the example below.<br/>\n     * {@link module:lamb.condition|Condition} can be used to wrap <code>invoker</code> to avoid this\n     * behaviour by adding a predicate, while {@link module:lamb.adapter|adapter} can build more complex\n     * polymorphic functions without the need of homonymy.<br/>\n     * Returning <code>undefined</code> or checking for such value is meant to favor composition and\n     * interoperability between the aforementioned functions: for a more standard behaviour see also\n     * {@link module:lamb.generic|generic}.\n     * @example <caption>Basic polymorphism with <code>invoker</code>:</caption>\n     * var polySlice = _.invoker(\"slice\");\n     *\n     * polySlice([1, 2, 3, 4, 5], 1, 3) // => [2, 3]\n     * polySlice(\"Hello world\", 1, 3) // => \"el\"\n     *\n     * @example <caption>With bound arguments:</caption>\n     * var substrFrom2 = _.invoker(\"substr\", 2);\n     * substrFrom2(\"Hello world\") // => \"llo world\"\n     * substrFrom2(\"Hello world\", 5) // => \"llo w\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.invokerOn|invokerOn}\n     * @param {String} methodName\n     * @param {...*} [boundArg]\n     * @returns {Function}\n     */\n    function invoker (methodName) {\n        return partial(_invoker, _argsTail.apply(null, arguments), methodName);\n    }\n\n    /**\n     * Accepts an object and builds a function expecting a method name, and optionally arguments,\n     * to call on such object.\n     * Like {@link module:lamb.invoker|invoker}, if no method with the given name is found the\n     * function will return <code>undefined</code>.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var arr = [1, 2, 3, 4, 5];\n     * var invokerOnArr = _.invokerOn(arr);\n     *\n     * invokerOnArr(\"filter\", isEven) // => [2, 4]\n     * invokerOnArr(\"slice\", 1, 3) // => [2, 3]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.invoker|invoker}\n     * @param {Object} target\n     * @returns {Function}\n     */\n    function invokerOn (target) {\n        return partial(_invoker, [], _, target);\n    }\n\n    /**\n     * Builds a function that allows to map over the received arguments before applying them\n     * to the original one.\n     * @example\n     * var sumArray = _.reduceWith(_.add);\n     * var sum = _.compose(sumArray, _.list);\n     *\n     * sum(1, 2, 3, 4, 5) // => 15\n     *\n     * var square = _.partial(Math.pow, _, 2);\n     * var sumSquares = _.mapArgs(sum, square);\n     *\n     * sumSquares(1, 2, 3, 4, 5) // => 55\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.tapArgs|tapArgs}\n     * @param {Function} fn\n     * @param {ListIteratorCallback} mapper\n     * @returns {Function}\n     */\n    function mapArgs (fn, mapper) {\n        return compose(apply(fn), mapWith(mapper), list);\n    }\n\n    /**\n     * Creates a pipeline of functions, where each function consumes the result of the previous one.\n     * @example\n     * var square = _.partial(Math.pow, _, 2);\n     * var getMaxAndSquare = _.pipe(Math.max, square);\n     *\n     * getMaxAndSquare(3, 5) // => 25\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.compose|compose}\n     * @function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    var pipe = flip(compose);\n\n    /**\n     * Builds a function that allows to \"tap\" into the arguments of the original one.\n     * This allows to extract simple values from complex ones, transform arguments or simply intercept them.\n     * If a \"tapper\" isn't found the argument is passed as it is.\n     * @example\n     * var someObject = {count: 5};\n     * var someArrayData = [2, 3, 123, 5, 6, 7, 54, 65, 76, 0];\n     * var getDataAmount = _.tapArgs(_.add, _.getKey(\"count\"), _.getKey(\"length\"));\n     *\n     * getDataAmount(someObject, someArrayData); // => 15\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.mapArgs|mapArgs}\n     * @param {Function} fn\n     * @param {...?Function} [tapper]\n     * @returns {Function}\n     */\n    function tapArgs (fn) {\n        var tappers = _argsTail.apply(null, arguments);\n\n        return function () {\n            var len = arguments.length;\n            var tappersLen = tappers.length;\n            var args = [];\n\n            for (var i = 0; i < len; i++) {\n                args.push(i < tappersLen ? tappers[i](arguments[i]) : arguments[i]);\n            }\n\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Returns a function that will invoke the passed function at most once in the given timespan.<br/>\n     * The first call in this case happens as soon as the function is invoked; see also\n     * {@link module:lamb.debounce|debounce} for a different behaviour where the first call is delayed.\n     * @example\n     * var log = _.throttle(console.log.bind(console), 5000);\n     *\n     * log(\"Hi\"); // console logs \"Hi\"\n     * log(\"Hi again\"); // nothing happens\n     * // after five seconds\n     * log(\"Hello world\"); // console logs \"Hello world\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.debounce|debounce}\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds.\n     * @returns {Function}\n     */\n    function throttle (fn, timespan) {\n        var result;\n        var lastCall = 0;\n\n        return function () {\n            var now = Date.now();\n\n            if (now - lastCall >= timespan) {\n                lastCall = now;\n                result = fn.apply(this, arguments);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Builds a function that passes only one argument to the given function.<br/>\n     * It's simply a shortcut for a common use case of {@link module:lamb.aritize|aritize},\n     * exposed for convenience.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     *\n     * _.map(weights, _.unary(parseInt)) // => [2, 10, 1, 7]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.aritize|aritize}\n     * @see {@link module:lamb.binary|binary}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function unary (fn) {\n        return function (a) {\n            return fn.call(this, a);\n        };\n    }\n\n    lamb.application = application;\n    lamb.apply = apply;\n    lamb.applyTo = applyTo;\n    lamb.aritize = aritize;\n    lamb.asPartial = asPartial;\n    lamb.binary = binary;\n    lamb.collect = collect;\n    lamb.curry = curry;\n    lamb.curryRight = curryRight;\n    lamb.curryable = curryable;\n    lamb.curryableRight = curryableRight;\n    lamb.debounce = debounce;\n    lamb.flip = flip;\n    lamb.getArgAt = getArgAt;\n    lamb.invoker = invoker;\n    lamb.invokerOn = invokerOn;\n    lamb.mapArgs = mapArgs;\n    lamb.pipe = pipe;\n    lamb.tapArgs = tapArgs;\n    lamb.throttle = throttle;\n    lamb.unary = unary;\n\n    /**\n     * Builds a <code>checker</code> function meant to be used with\n     * {@link module:lamb.validate|validate}.<br/>\n     * Note that the function accepts multiple <code>keyPaths</code> as a means to\n     * compare their values. In other words all the received <code>keyPaths</code> will be\n     * passed as arguments to the <code>predicate</code> to run the test.<br/>\n     * If you want to run the same single property check with multiple properties, you should build\n     * multiple <code>checker</code>s and combine them with {@link module:lamb.validate|validate}.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\",\n     *         passwordConfirm: \"abc123\"\n     *     }\n     * };\n     * var pwdMatch = _.checker(\n     *     _.is,\n     *     \"Passwords don't match\",\n     *     [\"login.password\", \"login.passwordConfirm\"]\n     * );\n     *\n     * pwdMatch(user) // => []\n     *\n     * var newUser = _.setPathIn(user, \"login.passwordConfirm\", \"avc123\");\n     *\n     * pwdMatch(newUser) // => [\"Passwords don't match\", [\"login.password\", \"login.passwordConfirm\"]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.validate|validate}, {@link module:lamb.validateWith|validateWith}\n     * @param {Function} predicate - The predicate to test the object properties\n     * @param {String} message - The error message\n     * @param {String[]} keyPaths - The array of keys, or {@link module:lamb.getPathIn|paths}, to test.\n     * @param {String} [pathSeparator=\".\"]\n     * @returns {Function} A checker function which returns an error in the form\n     * <code>[\"message\", [\"propertyA\", \"propertyB\"]]</code> or an empty array.\n     */\n    function checker (predicate, message, keyPaths, pathSeparator) {\n        return function (obj) {\n            var getValues = partial(getPathIn, obj, _, pathSeparator);\n\n            return predicate.apply(obj, map(keyPaths, getValues)) ? [] : [message, keyPaths];\n        };\n    }\n\n    /**\n     * Creates an array with all the enumerable properties of the given object.\n     * @example <caption>Showing the difference with {@link module:lamb.keys|keys}:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3},\n     *     d: {value: 4, enumerable: true}\n     * });\n     *\n     * _.keys(foo) // => [\"d\"]\n     * _.enumerables(foo) // => [\"d\", \"a\"]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.keys|keys}\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    var enumerables = _unsafeKeyListFrom(_safeEnumerables);\n\n    /**\n     * Builds an object from a list of key / value pairs like the one\n     * returned by {@link module:lamb.pairs|pairs} or {@link module:lamb.ownPairs|ownPairs}.<br/>\n     * In case of duplicate keys the last key / value pair is used.\n     * @example\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"c\", 3]]) // => {\"a\": 1, \"b\": 2, \"c\": 3}\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"a\", 3]]) // => {\"a\": 3, \"b\": 2}\n     * _.fromPairs([[1], [void 0, 2], [null, 3]]) // => {\"1\": undefined, \"undefined\": 2, \"null\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.ownPairs|ownPairs}, {@link module:lamb.pairs|pairs}\n     * @param {Array<Array<String, *>>} pairsList\n     * @returns {Object}\n     */\n    function fromPairs (pairsList) {\n        var result = {};\n\n        forEach(pairsList, function (pair) {\n            result[pair[0]] = pair[1];\n        });\n\n        return result;\n    }\n\n    /**\n     * Verifies the existence of a property in an object.\n     * @example\n     * var user1 = {name: \"john\"};\n     *\n     * _.has(user1, \"name\") // => true\n     * _.has(user1, \"surname\") // => false\n     * _.has(user1, \"toString\") // => true\n     *\n     * var user2 = Object.create(null);\n     *\n     * // not inherited through the prototype chain\n     * _.has(user2, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.hasKey|hasKey}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    function has (obj, key) {\n        if (typeof obj !== \"object\" && !isUndefined(obj)) {\n            obj = Object(obj);\n        }\n\n        return key in obj;\n    }\n\n    /**\n     * Curried version of {@link module:lamb.has|has}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {};\n     * var hasName = _.hasKey(\"name\");\n     *\n     * hasName(user1) // => true\n     * hasName(user2) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.has|has}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {String} key\n     * @returns {Function}\n     */\n    function hasKey (key) {\n        return function (obj) {\n            return has(obj, key);\n        };\n    }\n\n    /**\n     * Builds a predicate expecting an object to check against the given key / value pair.<br/>\n     * The value check is made with the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.\n     * @example\n     * var hasTheCorrectAnswer = _.hasKeyValue(\"answer\", 42);\n     *\n     * hasTheCorrectAnswer({answer: 2}) // false\n     * hasTheCorrectAnswer({answer: 42}) // true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.hasPathValue|hasPathValue}\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    function hasKeyValue (key, value) {\n        return function (obj) {\n            return isSVZ(value, obj[key]);\n        };\n    }\n\n    /**\n     * Verifies if an object has the specified property and that the property isn't inherited through\n     * the prototype chain.<br/>\n     * @example <caption>Comparison with <code>has</code>:</caption>\n     * var user = {name: \"john\"};\n     *\n     * _.has(user, \"name\") // => true\n     * _.has(user, \"surname\") // => false\n     * _.has(user, \"toString\") // => true\n     *\n     * _.hasOwn(user, \"name\") // => true\n     * _.hasOwn(user, \"surname\") // => false\n     * _.hasOwn(user, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    var hasOwn = generic(_objectProto.hasOwnProperty);\n\n    /**\n     * Curried version of {@link module:lamb.hasOwn|hasOwn}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user = {name: \"john\"};\n     * var hasOwnName = _.hasOwnKey(\"name\");\n     * var hasOwnToString = _.hasOwnToString(\"toString\");\n     *\n     * hasOwnName(user) // => true\n     * hasOwnToString(user) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.hasOwn|hasOwn}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {String} key\n     * @returns {Function}\n     */\n    function hasOwnKey (key) {\n        return function (obj) {\n            return hasOwn(obj, key);\n        };\n    }\n\n    /**\n     * Builds a predicate to check if the given path exists in an object and holds the desired value.<br/>\n     * The value check is made with the [\"SameValueZero\" comparison]{@link module:lamb.isSVZ|isSVZ}.<br/>\n     * Note that the function will check even non-enumerable properties.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     personal: {\n     *         age: 25,\n     *         gender: \"M\"\n     *     },\n     *     scores: [\n     *         {id: 1, value: 10, passed: false},\n     *         {id: 2, value: 20, passed: false},\n     *         {id: 3, value: 30, passed: true}\n     *     ]\n     * };\n     *\n     * var isMale = _.hasPathValue(\"personal.gender\", \"M\");\n     * var hasPassedFirstTest = _.hasPathValue(\"scores.0.passed\", true);\n     * var hasPassedLastTest = _.hasPathValue(\"scores.-1.passed\", true);\n     *\n     * isMale(user) // => true\n     * hasPassedFirstTest(user) // => false\n     * hasPassedLastTest(user) // => true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.hasKeyValue|hasKeyValue}\n     * @param {String} path\n     * @param {*} value\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function hasPathValue (path, value, separator) {\n        return function (obj) {\n            var pathInfo = _getPathInfo(obj, _toPathParts(path, separator), true);\n\n            return pathInfo.isValid && isSVZ(pathInfo.target, value);\n        };\n    }\n\n    /**\n     * Makes an object immutable by recursively calling [Object.freeze]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}\n     * on its members.<br/>\n     * Any attempt to extend or modify the object can throw a <code>TypeError</code> or fail silently,\n     * depending on the environment and the [strict mode]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode} directive.\n     * @example\n     * var user = _.immutable({\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\"\n     *     },\n     *     luckyNumbers: [13, 17]\n     * });\n     *\n     * // All of these statements will fail and possibly\n     * // throw a TypeError (see the function description)\n     * user.name = \"Joe\";\n     * delete user.name;\n     * user.newProperty = [];\n     * user.login.password = \"foo\";\n     * user.luckyNumbers.push(-13);\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Object}\n     */\n    function immutable (obj) {\n        return _immutable(obj, []);\n    }\n\n    /**\n     * Retrieves the list of the own enumerable properties of an object.<br/>\n     * Although [Object.keys]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}\n     * is already present in ECMAScript 5, its behaviour changed in the subsequent specifications\n     * of the standard.<br/>\n     * This function <em>shims</em> the ECMAScript 6 version, by forcing a conversion to\n     * object for any value but <code>null</code> and <code>undefined</code>.\n     * @example <caption>Showing the difference with {@link module:lamb.enumerables|enumerables}:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3},\n     *     d: {value: 4, enumerable: true}\n     * });\n     *\n     * _.enumerables(foo) // => [\"d\", \"a\"]\n     * _.keys(foo) // => [\"d\"]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.enumerables|enumerables}\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    var keys = _unsafeKeyListFrom(_safeKeys);\n\n    /**\n     * Builds a predicate to check if the given key satisfies the desided condition\n     * on an object.\n     * @example\n     * var users = [\n     *     {name: \"John\", age: 25},\n     *     {name: \"Jane\", age: 15},\n     * ];\n     * var isGreaterThan = _.curryRight(_.isGT);\n     * var isAdult = _.keySatisfies(isGreaterThan(17), \"age\");\n     *\n     * isAdult(users[0]) // => true\n     * isAdult(users[1]) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pathSatisfies|pathSatisfies}\n     * @param {Function} predicate\n     * @param {String} key\n     * @returns {Function}\n     */\n    function keySatisfies (predicate, key) {\n        return function (obj) {\n            return predicate.call(this, obj[key]);\n        };\n    }\n\n    /**\n     * Builds an object from the two given lists, using the first one as keys and the last\n     * one as values.<br/>\n     * If the list of keys is longer than the values one, the keys will be created with\n     * <code>undefined</code> values.<br/>\n     * If more values than keys are supplied, the extra values will be ignored.\n     * @example\n     * _.make([\"a\", \"b\", \"c\"], [1, 2, 3]) // => {a: 1, b: 2, c: 3}\n     * _.make([\"a\", \"b\", \"c\"], [1, 2]) // => {a: 1, b: 2, c: undefined}\n     * _.make([\"a\", \"b\"], [1, 2, 3]) // => {a: 1, b: 2}\n     * _.make([null, void 0, 2], [1, 2, 3]) // => {\"null\": 1, \"undefined\": 2, \"2\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.tear|tear}, {@link module:lamb.tearOwn|tearOwn} for the reverse operation\n     * @param {String[]} names\n     * @param {ArrayLike} values\n     * @returns {Object}\n     */\n    function make (names, values) {\n        var result = {};\n        var valuesLen = values.length;\n\n        for (var i = 0, len = names.length; i < len; i++) {\n            result[names[i]] = i < valuesLen ? values[i] : void 0;\n        }\n\n        return result;\n    }\n\n    /**\n     * Merges the enumerable properties of the provided sources into a new object.<br/>\n     * In case of key homonymy each source has precedence over the previous one.\n     * @example\n     * _.merge({a: 1}, {b: 3, c: 4}, {b: 5}) // => {a: 1, b: 5, c: 4}\n     *\n     * @example <caption>Array-like objects will be transformed to objects with numbers as keys:</caption>\n     * _.merge([1, 2], {a: 2}) // => {\"0\": 1, \"1\": 2, a: 2}\n     * _.merge(\"foo\", {a: 2}) // => {\"0\": \"f\", \"1\": \"o\", \"2\": \"o\", a: 2}\n     *\n     * @example <caption>Every other value will be treated as an empty object:</caption>\n     * _.merge({a: 2}, null, NaN) // => {a: 2}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.mergeOwn|mergeOwn} to merge own properties only\n     * @function\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    var merge = partial(_merge, _safeEnumerables);\n\n    /**\n     * Same as {@link module:lamb.merge|merge}, but only the own properties of the\n     * sources are taken into account.\n     * @example <caption>Showing the difference with <code>merge</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * var bar = {d: 4};\n     *\n     * _.merge(foo, bar) // => {a: 1, b: 2, c: 3, d: 4}\n     * _.mergeOwn(foo, bar) // => {c: 3, d: 4}\n     *\n     * @example <caption>Array-like objects will be transformed to objects with numbers as keys:</caption>\n     * _.mergeOwn([1, 2], {a: 2}) // => {\"0\": 1, \"1\": 2, a: 2}\n     * _.mergeOwn(\"foo\", {a: 2}) // => {\"0\": \"f\", \"1\": \"o\", \"2\": \"o\", a: 2}\n     *\n     * @example <caption>Every other value will be treated as an empty object:</caption>\n     * _.mergeOwn({a: 2}, null, NaN) // => {a: 2}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.merge|merge} to merge all enumerable properties\n     * @function\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    var mergeOwn = partial(_merge, _safeKeys);\n\n    /**\n     * Same as {@link module:lamb.pairs|pairs}, but only the own enumerable properties of the object are\n     * taken into account.<br/>\n     * See also {@link module:lamb.fromPairs|fromPairs} for the reverse operation.\n     * @example <caption>Showing the difference with <code>pairs</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.pairs(foo) // => [[\"c\", 3], [\"b\", 2], [\"a\", 1]]\n     * _.ownPairs(foo) // => [[\"c\", 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pairs|pairs}\n     * @see {@link module:lamb.fromPairs|fromPairs}\n     * @function\n     * @param {Object} obj\n     * @returns {Array<Array<String, *>>}\n     */\n    var ownPairs = _pairsFrom(keys);\n\n    /**\n     * Same as {@link module:lamb.values|values}, but only the own enumerable properties of the object are\n     * taken into account.<br/>\n     * @example <caption>Showing the difference with <code>values</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.values(foo) // => [3, 2, 1]\n     * _.ownValues(foo) // => [3]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.values|values}\n     * @function\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var ownValues = _valuesFrom(keys);\n\n    /**\n     * Converts an object into an array of key / value pairs of its enumerable properties.<br/>\n     * See also {@link module:lamb.ownPairs|ownPairs} for picking only the own enumerable\n     * properties and {@link module:lamb.fromPairs|fromPairs} for the reverse operation.\n     * @example\n     * _.pairs({a: 1, b: 2, c: 3}) // => [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.ownPairs|ownPairs}\n     * @see {@link module:lamb.fromPairs|fromPairs}\n     * @function\n     * @param {Object} obj\n     * @returns {Array<Array<String, *>>}\n     */\n    var pairs = _pairsFrom(enumerables);\n\n    /**\n     * Builds a partial application of {@link module:lamb.pathExistsIn|pathExistsIn} using the given\n     * path and the optional separator. The resulting function expects the object to check.<br/>\n     * Note that the function will check even non-enumerable properties.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     address: {\n     *         city: \"New York\"\n     *     },\n     *     scores: [10, 20, 15]\n     * };\n     *\n     * var hasCity = _.pathExists(\"address.city\");\n     * var hasCountry = _.pathExists(\"address.country\");\n     * var hasAtLeastThreeScores = _.pathExists(\"scores.2\");\n     *\n     * hasCity(user) // => true\n     * hasCountry(user) // => false\n     * hasAtLeastThreeScores(user) // => true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function pathExists (path, separator) {\n        return function (obj) {\n            return pathExistsIn(obj, path, separator);\n        };\n    }\n\n    /**\n     * Checks if the provided path exists in the given object.<br/>\n     * Note that the function will check even non-enumerable properties.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     address: {\n     *         city: \"New York\"\n     *     },\n     *     scores: [10, 20, 15]\n     * };\n     *\n     * _.pathExistsIn(user, \"address.city\") // => true\n     * _.pathExistsIn(user, \"address.country\") // => false\n     * _.pathExistsIn(user, \"scores.1\") // => true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pathExists|pathExists}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @param {Object} obj\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Boolean}\n     */\n    function pathExistsIn (obj, path, separator) {\n        var pathInfo = _getPathInfo(obj, _toPathParts(path, separator), true);\n\n        return pathInfo.isValid;\n    }\n\n    /**\n     * Builds a predicate that verifies if a condition is satisfied for the given\n     * path in an object.<br/>\n     * Like the other \"path functions\" you can use integers in the path, even\n     * negative ones, to refer to array-like object indexes, but the priority will\n     * be given to existing object keys.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     performance: {\n     *         scores: [1, 5, 10]\n     *     }\n     * };\n     *\n     * var isGreaterThan = _.curryRight(_.isGT);\n     * var gotAnHighScore = _.pathSatisfies(_.contains(10), \"performance.scores\");\n     * var hadAGoodStart = _.pathSatisfies(isGreaterThan(6), \"performance.scores.0\");\n     *\n     * gotAnHighScore(user) // => true\n     * hadAGoodStart(user) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.keySatisfies|keySatisfies}\n     * @param {Function} predicate\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function pathSatisfies (predicate, path, separator) {\n        return function (obj) {\n            var pathInfo = _getPathInfo(obj, _toPathParts(path, separator), true);\n\n            return predicate.call(this, pathInfo.target);\n        };\n    }\n\n    /**\n     * Returns an object containing only the specified properties of the given object.<br/>\n     * Non existent properties will be ignored.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.pick(user, [\"name\", \"age\"]) // => {\"name\": \"john\", \"age\": 30};\n     * _.pick(user, [\"name\", \"email\"]) // => {\"name\": \"john\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pickIf|pickIf}, {@link module:lamb.pickKeys|pickKeys}\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipIf|skipIf}\n     * @param {Object} source\n     * @param {String[]} whitelist\n     * @returns {Object}\n     */\n    function pick (source, whitelist) {\n        var result = {};\n\n        forEach(whitelist, function (key) {\n            if (has(source, key)) {\n                result[key] = source[key];\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Builds a function expecting an object whose enumerable properties will be checked\n     * against the given predicate.<br/>\n     * The properties satisfying the predicate will be included in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var pickIfIsString = _.pickIf(_.isType(\"String\"));\n     *\n     * pickIfIsString(user) // => {name: \"john\", surname: \"doe\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys}\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipKeys|skipKeys},\n     * {@link module:lamb.skipIf|skipIf}\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    function pickIf (predicate, predicateContext) {\n        if (arguments.length === 2) {\n            predicate = predicate.bind(predicateContext);\n        }\n\n        return function (source) {\n            var result = {};\n\n            forEach(enumerables(source), function (key) {\n                if (predicate(source[key], key, source)) {\n                    result[key] = source[key];\n                }\n            });\n\n            return result;\n        };\n    }\n\n    /**\n     * A curried version of {@link module:lamb.pick|pick}, expecting a whitelist of keys to build\n     * a function waiting for the object to act upon.\n     * @example\n     * var user = {id: 1, name: \"Jane\", surname: \"Doe\", active: false};\n     * var getUserInfo = _.pickKeys([\"id\", \"active\"]);\n     *\n     * getUserInfo(user) // => {id: 1, active: false}\n     *\n     * @example <caption>A useful composition with <code>mapWith</code>:</caption>\n     * var users = [\n     *     {id: 1, name: \"Jane\", surname: \"Doe\", active: false},\n     *     {id: 2, name: \"John\", surname: \"Doe\", active: true},\n     *     {id: 3, name: \"Mario\", surname: \"Rossi\", active: true},\n     *     {id: 4, name: \"Paolo\", surname: \"Bianchi\", active: false}\n     * ];\n     * var select = _.compose(_.mapWith, _.pickKeys);\n     * var selectUserInfo = select([\"id\", \"active\"]);\n     *\n     * selectUserInfo(users) // =>\n     * // [\n     * //     {id: 1, active: false},\n     * //     {id: 2, active: true},\n     * //     {id: 3, active: true},\n     * //     {id: 4, active: false}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickIf|pickIf}\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipKeys|skipKeys},\n     * {@link module:lamb.skipIf|skipIf}\n     * @param {String[]} whitelist\n     * @returns {Function}\n     */\n    var pickKeys = _curry(pick, 2, true);\n\n    /**\n     * Creates a copy of the given object with its enumerable keys renamed as\n     * indicated in the provided lookup table.\n     * @example\n     * var person = {\"firstName\": \"John\", \"lastName\": \"Doe\"};\n     * var keysMap = {\"firstName\": \"name\", \"lastName\": \"surname\"};\n     *\n     * _.rename(person, keysMap) // => {\"name\": \"John\", \"surname\": \"Doe\"}\n     *\n     * @example <caption>It's safe using it to swap keys:</caption>\n     * var keysMap = {\"firstName\": \"lastName\", \"lastName\": \"firstName\"};\n     *\n     * _.rename(person, keysMap) // => {\"lastName\": \"John\", \"firstName\": \"Doe\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.renameKeys|renameKeys}, {@link module:lamb.renameWith|renameWith}\n     * @param {Object} source\n     * @param {Object} keysMap\n     * @returns {Object}\n     */\n    function rename (source, keysMap) {\n        keysMap = Object(keysMap);\n        var result = {};\n        var oldKeys = enumerables(source);\n\n        for (var prop in keysMap) {\n            if (~oldKeys.indexOf(prop)) {\n                result[keysMap[prop]] = source[prop];\n            }\n        }\n\n        for (var i = 0, len = oldKeys.length, key; i < len; i++) {\n            key = oldKeys[i];\n\n            if (!(key in keysMap || key in result)) {\n                result[key] = source[key];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.rename|rename} expecting a\n     * <code>keysMap</code> to build a function waiting for the object to act upon.\n     * @example\n     * var persons = [\n     *     {\"firstName\": \"John\", \"lastName\": \"Doe\"},\n     *     {\"first_name\": \"Mario\", \"last_name\": \"Rossi\"},\n     * ];\n     * var normalizeKeys = _.renameKeys({\n     *     \"firstName\": \"name\",\n     *     \"first_name\": \"name\",\n     *     \"lastName\": \"surname\",\n     *     \"last_name\": \"surname\"\n     * });\n     *\n     * _.map(persons, normalizeKeys) // =>\n     * // [\n     * //     {\"name\": \"John\", \"surname\": \"Doe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.rename|rename}, {@link module:lamb.renameWith|renameWith}\n     * @param {Object} keysMap\n     * @returns {Function}\n     */\n    var renameKeys = _curry(rename, 2, true);\n\n    /**\n     * Uses the provided function as a <code>keysMap</code> generator and returns\n     * a function expecting the object whose keys we want to {@link module:lamb.rename|rename}.\n     * @example\n     * var person = {\"NAME\": \"John\", \"SURNAME\": \"Doe\"};\n     * var arrayToLower = _.mapWith(_.invoker(\"toLowerCase\"));\n     * var makeLowerKeysMap = function (source) {\n     *     var sourceKeys = _.keys(source);\n     *\n     *     return _.make(sourceKeys, arrayToLower(sourceKeys));\n     * };\n     * var lowerKeysFor = _.renameWith(makeLowerKeysMap);\n     *\n     * lowerKeysFor(person) // => {\"name\": \"John\", \"surname\": \"doe\"};\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.rename|rename}, {@link module:lamb.renameKeys|renameKeys}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function renameWith (fn) {\n        return function (source) {\n            return rename(source, fn(source));\n        };\n    }\n\n    /**\n     * Returns a copy of the source object without the specified properties.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.skip(user, [\"name\", \"age\"]) // => {surname: \"doe\"};\n     * _.skip(user, [\"name\", \"email\"]) // => {surname: \"doe\", age: 30};\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.skipKeys|skipKeys}, {@link module:lamb.skipIf|skipIf}\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys},\n     * {@link module:lamb.pickIf|pickIf}\n     * @param {Object} source\n     * @param {String[]} blacklist\n     * @returns {Object}\n     */\n    function skip (source, blacklist) {\n        var result = {};\n\n        forEach(enumerables(source), function (key) {\n            if (!isIn(blacklist, key)) {\n                result[key] = source[key];\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Builds a function expecting an object whose enumerable properties will be checked\n     * against the given predicate.<br/>\n     * The properties satisfying the predicate will be omitted in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var skipIfIstring = _.skipIf(_.isType(\"String\"));\n     *\n     * skipIfIstring(user) // => {age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipKeys|skipKeys}\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys},\n     * {@link module:lamb.pickIf|pickIf}\n     * @param {ObjectIteratorCallback} predicate\n     * @param {Object} [predicateContext]\n     * @returns {Function}\n     */\n    var skipIf = tapArgs(pickIf, not);\n\n    /**\n     * A curried version of {@link module:lamb.skip|skip}, expecting a blacklist of keys to build\n     * a function waiting for the object to act upon.\n     * @example\n     * var user = {id: 1, name: \"Jane\", surname: \"Doe\", active: false};\n     * var getUserInfo = _.skipKeys([\"name\", \"surname\"]);\n     *\n     * getUserInfo(user) // => {id: 1, active: false}\n     *\n     * @example <caption>A useful composition with <code>mapWith</code>:</caption>\n     * var users = [\n     *     {id: 1, name: \"Jane\", surname: \"Doe\", active: false},\n     *     {id: 2, name: \"John\", surname: \"Doe\", active: true},\n     *     {id: 3, name: \"Mario\", surname: \"Rossi\", active: true},\n     *     {id: 4, name: \"Paolo\", surname: \"Bianchi\", active: false}\n     * ];\n     * var discard = _.compose(_.mapWith, _.skipKeys);\n     * var discardNames = discard([\"name\", \"surname\"]);\n     *\n     * discardNames(users) // =>\n     * // [\n     * //     {id: 1, active: false},\n     * //     {id: 2, active: true},\n     * //     {id: 3, active: true},\n     * //     {id: 4, active: false}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipIf|skipIf}\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys},\n     * {@link module:lamb.pickIf|pickIf}\n     * @param {String[]} blacklist\n     * @returns {Function}\n     */\n    var skipKeys = _curry(skip, 2, true);\n\n    /**\n     * Tears an object apart by transforming it in an array of two lists: one containing\n     * its enumerable keys, the other containing the corresponding values.<br/>\n     * Although this \"tearing apart\" may sound as a rather violent process, the source\n     * object will be unharmed.\n     * @example\n     * _.tear({a: 1, b: 2, c: 3}) // => [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.tearOwn|tearOwn}\n     * @see {@link module:lamb.make|make} for the reverse operation\n     * @param {Object} obj\n     * @returns {Array<Array<String>, Array<*>>}\n     */\n    var tear = _tearFrom(enumerables);\n\n    /**\n     * Same as {@link module:lamb.tear|tear}, but only the own properties of the object are\n     * taken into account.\n     * @example <caption>Showing the difference with <code>tear</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.tear(foo) // => [[\"c\", \"b\", \"a\"], [3, 2, 1]]\n     * _.tearOwn(foo) // => [[\"c\"], [3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.tear|tear}\n     * @see {@link module:lamb.make|make} for the reverse operation\n     * @function\n     * @param {Object} obj\n     * @returns {Array<Array<String>, Array<*>>}\n     */\n    var tearOwn = _tearFrom(keys);\n\n    /**\n     * Validates an object with the given list of {@link module:lamb.checker|checker} functions.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isGreaterThan = _.curryRight(_.isGT);\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isGreaterThan(17), \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * _.validate(user1, userCheckers) // => []\n     * _.validate(user2, userCheckers) // =>\n     * // [\n     * //     [\"Surname is required\", [\"surname\"]],\n     * //     [\"Must be at least 18 years old\", [\"age\"]]\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.validateWith|validateWith}\n     * @see {@link module:lamb.checker|checker}\n     * @param {Object} obj\n     * @param {Function[]} checkers\n     * @returns {Array<Array<String, String[]>>} An array of errors in the form returned by\n     * {@link module:lamb.checker|checker}, or an empty array.\n     */\n    function validate (obj, checkers) {\n        return reduce(checkers, function (errors, _checker) {\n            var result = _checker(obj);\n\n            result.length && errors.push(result);\n\n            return errors;\n        }, []);\n    }\n\n    /**\n     * A curried version of {@link module:lamb.validate|validate} accepting a list of\n     * {@link module:lamb.checker|checkers} and returning a function expecting the object to validate.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var isGreaterThan = _.curryRight(_.isGT);\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(isGreaterThan(17), \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     * var validateUser = _.validateWith(userCheckers);\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * validateUser(user1) // => []\n     * validateUser(user2) // =>\n     * // [\n     * //     [\"Surname is required\", [\"surname\"]],\n     * //     [\"Must be at least 18 years old\", [\"age\"]]\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.validate|validate}\n     * @see {@link module:lamb.checker|checker}\n     * @param {Function[]} checkers\n     * @returns {Function}\n     */\n    var validateWith = _curry(validate, 2, true);\n\n    /**\n     * Generates an array with the values of the enumerable properties of the given object.<br/>\n     * See also {@link module:lamb.ownValues|ownValues} to pick only from the own properties of the object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.values(user) // => [\"john\", \"doe\", 30]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.ownValues|ownValues}\n     * @function\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var values = _valuesFrom(enumerables);\n\n    lamb.checker = checker;\n    lamb.enumerables = enumerables;\n    lamb.fromPairs = fromPairs;\n    lamb.has = has;\n    lamb.hasKey = hasKey;\n    lamb.hasKeyValue = hasKeyValue;\n    lamb.hasOwn = hasOwn;\n    lamb.hasOwnKey = hasOwnKey;\n    lamb.hasPathValue = hasPathValue;\n    lamb.immutable = immutable;\n    lamb.keys = keys;\n    lamb.keySatisfies = keySatisfies;\n    lamb.make = make;\n    lamb.merge = merge;\n    lamb.mergeOwn = mergeOwn;\n    lamb.ownPairs = ownPairs;\n    lamb.ownValues = ownValues;\n    lamb.pairs = pairs;\n    lamb.pathExists = pathExists;\n    lamb.pathExistsIn = pathExistsIn;\n    lamb.pathSatisfies = pathSatisfies;\n    lamb.pick = pick;\n    lamb.pickIf = pickIf;\n    lamb.pickKeys = pickKeys;\n    lamb.rename = rename;\n    lamb.renameKeys = renameKeys;\n    lamb.renameWith = renameWith;\n    lamb.skip = skip;\n    lamb.skipIf = skipIf;\n    lamb.skipKeys = skipKeys;\n    lamb.tear = tear;\n    lamb.tearOwn = tearOwn;\n    lamb.validate = validate;\n    lamb.validateWith = validateWith;\n    lamb.values = values;\n\n    /**\n     * Pads a string to the desired length with the given char starting from the beginning of the string.\n     * @example\n     * _.padLeft(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", 5) // => \"--foo\"\n     * _.padLeft(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padLeft(\"foo\", \"ab\", 7) // => \"aaaafoo\"\n     * _.padLeft(\"foo\", \"\", 5) // => \"foo\"\n     * _.padLeft(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @see {@link module:lamb.padRight|padRight}\n     * @param {String} source\n     * @param {String} char - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padLeft (source, char, len) {\n        return _getPadding(source, char, len) + source;\n    }\n\n    /**\n     * Pads a string to the desired length with the given char starting from the end of the string.\n     * @example\n     * _.padRight(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", 5) // => \"foo--\"\n     * _.padRight(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padRight(\"foo\", \"ab\", 7) // => \"fooaaaa\"\n     * _.padRight(\"foo\", \"\", 5) // => \"foo\"\n     * _.padRight(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @see {@link module:lamb.padLeft|padLeft}\n     * @param {String} source\n     * @param {String} char - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padRight (source, char, len) {\n        return source + _getPadding(source, char, len);\n    }\n\n    /**\n     * Builds a new string by repeating the source string the desired amount of times.<br/>\n     * Note that unlike the current ES6 proposal for\n     * [String.prototype.repeat]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat},\n     * this function doesn't throw a RangeError if <code>times</code> is negative,\n     * but returns an empty string instead.\n     * @example\n     * _.repeat(\"Hello\", -1) // => \"\"\n     * _.repeat(\"Hello\", 1) // => \"Hello\"\n     * _.repeat(\"Hello\", 3) // => \"HelloHelloHello\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {Number} times\n     * @returns {String}\n     */\n    function repeat (source, times) {\n        if (isNil(source)) {\n            throw _makeTypeErrorFor(source, \"string\");\n        }\n\n        return _repeat(source, Math.floor(times));\n    }\n\n    /**\n     * Builds a predicate expecting a string to test against the given regular expression pattern.\n     * @example\n     * var hasNumbersOnly = _.testWith(/^\\d+$/);\n     *\n     * hasNumbersOnly(\"123\") // => true\n     * hasNumbersOnly(\"123 Kg\") // => false\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {RegExp} pattern\n     * @returns {Function}\n     */\n    function testWith (pattern) {\n        return function (s) {\n            return _search(s, pattern) !== -1;\n        };\n    }\n\n    lamb.padLeft = padLeft;\n    lamb.padRight = padRight;\n    lamb.repeat = repeat;\n    lamb.testWith = testWith;\n\n    /* istanbul ignore next */\n    if (typeof exports === \"object\") {\n        module.exports = lamb;\n    } else if (typeof define === \"function\" && define.amd) {\n        define(function () {\n            return lamb;\n        });\n    } else {\n        host.lamb = lamb;\n    }\n})(this);\n\n/**\n * @callback AccumulatorCallback\n * @global\n * @param {*} previousValue - The value returned it the last execution of the accumulator or, in the first\n * iteration, the {@link module:lamb.reduce|initialValue} if supplied.\n * @param {*} currentValue - The value being processed in the current iteration.\n * @param {Number} idx - The index of the element being processed.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in arguments object.\n * @typedef {arguments} arguments\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments|arguments} in Mozilla documentation.\n */\n\n/**\n * The built-in Array object.\n * @typedef {Array} Array\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array|Array} in Mozilla documentation.\n */\n\n/**\n * Any array-like object.\n * @typedef {Array|String|arguments|?} ArrayLike\n * @global\n */\n\n/**\n * The built-in Boolean object.\n * @typedef {Boolean} Boolean\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean|Boolean} in Mozilla documentation.\n */\n\n/**\n * The built-in Date object.\n * @typedef {Date} Date\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date} in Mozilla documentation.\n */\n\n/**\n * The built-in Function object.\n * @typedef {Function} function\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function|Function} and\n *      {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions|Functions} in Mozilla documentation.\n */\n\n/**\n * @callback ListIteratorCallback\n * @global\n * @param {*} element - The element being evaluated.\n * @param {Number} idx - The index of the element within the list.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in Number object.\n * @typedef {Number} Number\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number} in Mozilla documentation.\n */\n\n/**\n * The built-in Object object.\n * @typedef {Object} Object\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object|Object} in Mozilla documentation.\n */\n\n/**\n * @callback ObjectIteratorCallback\n * @global\n * @param {*} value - The value of the current property.\n * @param {String} key - The property name.\n * @param {Object} source - The object being traversed.\n */\n\n/**\n * The built-in RegExp object.\n * @typedef {RegExp} RegExp\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp|RegExp} in Mozilla documentation.\n */\n\n/**\n * Represent a sorting criteria used by {@link module:lamb.sortedInsert|sortedInsert},\n * {@link module:lamb.sort|sort} and {@link module:lamb.sortWith|sortWith}, and it's\n * usually built using {@link module:lamb.sorter|sorter} and {@link module:lamb.sorterDesc|sorterDesc}.\n * @typedef {Sorter} Sorter\n * @global\n * @property {Boolean} isDescending\n * @property {Function} compare\n */\n\n/**\n * The built-in String object.\n * @typedef {String} String\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String} in Mozilla documentation.\n */\n\n/**\n * The built-in primitive value <code>undefined</code>\n * @typedef {Undefined} Undefined\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined|undefined} in Mozilla documentation.\n */\n"]}