{"version":3,"sources":["lamb.js"],"names":["host","always","value","compose","functions","arguments","len","length","result","apply","this","i","call","identity","partial","fn","args","_argsTail","boundArg","lastIdx","newArgs","argsLen","_","_argsToArrayFrom","idx","Array","_asPartial","argsHolder","argsHolderLen","canApply","_comparer","a","b","String","areSVZ","_compareWith","criteria","criterion","compare","index","isDescending","_currier","arity","isRightCurry","isAutoCurry","holderLen","newArgsLen","reverse","_curry","_curry2","_curry3","c","_flatten","array","isDeep","output","j","vLen","isArray","_getInsertionIndex","element","comparer","start","end","pivot","_getNumConsecutiveHits","arrayLike","predicate","_getPadding","source","char","isNil","type","_repeat","Math","ceil","_getPathInfo","obj","parts","walkNonEnumerables","_makeTypeErrorFor","key","target","_getPathKey","isUndefined","isValid","includeNonEnumerables","Object","_isEnumerable","n","_groupWith","makeValue","iteratee","_immutable","seen","indexOf","push","freeze","forEach","getOwnPropertyNames","isNull","_invoker","boundArgs","methodName","method","boundArgsLen","ofs","_isArrayIndex","_isOwnEnumerable","_safeEnumerables","_makeArrayChecker","defaultResult","_makeCriteria","sorters","map","_makeCriterion","_sorter","_makePartial3","shouldAritize","f","binary","_makePartial4","_makeReducer","step","accumulator","initialValue","nCalls","_toArrayLength","TypeError","desiredType","toLowerCase","_merge","getKeys","reduce","times","_setIn","prop","_setIndex","updater","slice","_toNaturalIndex","isNaN","_setPathIn","v","partsLen","targetKey","reader","clamp","MAX_ARRAY_LENGTH","_toInteger","floor","abs","isInteger","NaN","_toPathParts","path","separator","split","filter","find","findIndex","isIn","begin","upTo","resultLen","adapter","list","allOf","predicates","anyOf","areSame","case_","condition","trueFn","falseFn","gt","gte","lt","lte","not","unless","when","min","max","divide","generate","limit","isFinite_","isFinite","isSafeInteger","modulo","multiply","randomInt","random","range","add","remainder","subtract","sum","isInstanceOf","constructor","isType","typeName","_objectProto","toString","getIn","getIndex","getPathIn","setIn","setPathIn","updateAt","updateIn","enumerables","updatePathIn","pathInfo","appendTo","concat","difference","rest","flatMap","drop","isInRest","dropFrom","dropWhile","el","arr","rLen","insert","splice","intersection","uniques","item","everyIn","contains","partition","pluck","getKey","pullFrom","values","takeFrom","takeWhile","transpose","minLen","elementLen","unionBy","uniquesBy","flatMapWith","hasNaN","sort","sortedInsert","sortWith","application","aritize","asPartial","collect","applyTo","curry","curryable","curryableRight","curryRight","debounce","timespan","timeoutID","debounced","bind","clearTimeout","setTimeout","flip","getArgAt","invoker","invokerOn","mapArgs","mapper","mapWith","tapArgs","tappers","tappersLen","throttle","lastCall","now","Date","unary","fromPairs","pairsList","pair","immutable","make","names","valuesLen","pick","whitelist","has","pickIf","rename","keysMap","oldKeys","renameWith","skip","blacklist","props","checker","message","keyPaths","pathSeparator","getValues","hasKeyValue","hasPathValue","keySatisfies","pathExistsIn","pathSatisfies","validate","checkers","errors","_checker","padLeft","padRight","repeat","testWith","pattern","s","_search","lamb","create","_version","prototype","_stringProto","generic","Function","propertyIsEnumerable","_keyToPairIn","_makeArrayFlattener","_pairsFrom","_safeKeys","keys","search","_tearFrom","_unsafeKeyListFrom","_valuesFrom","every","filterWith","findIndexWhere","findWhere","reduceRight","reduceRightWith","reduceWith","sliceAt","someIn","some","is","isGT","isGTE","isLT","isLTE","isSVZ","case","clampWithin","deduct","divideBy","multiplyBy","getAt","getPath","head","last","setAt","setIndex","setKey","setPath","updateIndex","updateKey","updatePath","append","flatten","init","insertAt","partitionWith","pluckKey","pull","shallowFlatten","tail","take","union","zip","zipWithIndex","count","countBy","group","groupBy","indexBy","sorter","sorterDesc","pipe","merge","mergeOwn","ownPairs","ownValues","pairs","pickKeys","renameKeys","skipIf","skipKeys","tear","tearOwn","hasKey","hasOwn","hasOwnProperty","hasOwnKey","pathExists","validateWith","exports","module","define","amd"],"mappings":"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","file":"lamb.min.js","sourcesContent":["/**\n * @overview lamb - A lightweight, and docile, JavaScript library to help embracing functional programming.\n * @author Andrea Scartabelli <andrea.scartabelli@gmail.com>\n * @version 0.51.0\n * @module lamb\n * @license MIT\n * @preserve\n */\n(function (host) {\n    \"use strict\";\n\n    var lamb = Object.create(null);\n\n    /**\n     * The current module version.\n     * @memberof module:lamb\n     * @private\n     * @type String\n     */\n    lamb._version = \"0.51.0\";\n\n    // alias used as a placeholder argument for partial application\n    var _ = lamb;\n\n    // prototype shortcuts\n    var _objectProto = Object.prototype;\n    var _stringProto = String.prototype;\n\n    // constants\n    var MAX_ARRAY_LENGTH = 4294967295;\n\n    /**\n     * Builds a function that returns a constant value.\n     * It's actually the simplest form of the K combinator or Kestrel.\n     * @example\n     * var truth = _.always(true);\n     *\n     * truth() // => true\n     * truth(false) // => true\n     * truth(1, 2) // => true\n     *\n     * // the value being returned is actually the\n     * // very same value passed to the function\n     * var foo = {bar: \"baz\"};\n     * var alwaysFoo = _.always(foo);\n     *\n     * alwaysFoo() === foo // => true\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {Function}\n     */\n    function always (value) {\n        return function () {\n            return value;\n        };\n    }\n\n    /**\n     * Returns a function that is the composition of the functions given as parameters.\n     * Each function consumes the result of the function that follows.\n     * @example\n     * var sayHi = function (name) { return \"Hi, \" + name; };\n     * var capitalize = function (s) {\n     *     return s[0].toUpperCase() + s.substr(1).toLowerCase();\n     * };\n     * var fixNameAndSayHi = _.compose(sayHi, capitalize);\n     *\n     * sayHi(\"bOb\") // => \"Hi, bOb\"\n     * fixNameAndSayHi(\"bOb\") // \"Hi, Bob\"\n     *\n     * var users = [{name: \"fred\"}, {name: \"bOb\"}];\n     * var sayHiToUser = _.compose(fixNameAndSayHi, _.getKey(\"name\"));\n     *\n     * _.map(users, sayHiToUser) // [\"Hi, Fred\", \"Hi, Bob\"]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.pipe|pipe}\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function compose () {\n        var functions = arguments;\n\n        return function () {\n            var len = functions.length - 1;\n            var result = functions[len].apply(this, arguments);\n\n            for (var i = len - 1; i > -1; i--) {\n                result = functions[i].call(this, result);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Creates generic functions out of methods.\n     * @author A very little change on a great idea by [Irakli Gozalishvili]{@link https://github.com/Gozala/}.\n     * Thanks for this *beautiful* one-liner (never liked your \"unbind\" naming choice, though).\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     * var s = \"hello\";\n     * var join = _.generic(Array.prototype.join);\n     *\n     * join(arr, \"-\") // => \"1-2-3-4-5\"\n     *\n     * // the function will work with any array-like object\n     * join(\"s\", \"-\") // => \"h-e-l-l-o\"\n     *\n     * @param {Function} method\n     * @returns {Function}\n     */\n    var generic = Function.bind.bind(Function.call);\n\n    /**\n     * The I combinator. Any value passed to the function is simply returned as it is.\n     * @example\n     * var foo = {bar: \"baz\"};\n     *\n     * _.identity(foo) === foo // true\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see [SKI combinator calculus]{@link https://en.wikipedia.org/wiki/SKI_combinator_calculus}\n     * @param {*} value\n     * @returns {*} The value passed as parameter.\n     */\n    function identity (value) {\n        return value;\n    }\n\n    /**\n     * Builds a partially applied function. The <code>lamb</code> object itself can be used\n     * as a placeholder argument and it's useful to alias it with a short symbol such as <code>_</code>.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\", active: true, confirmedMail: true},\n     *     {id: 2, name: \"Jane\", active: true, confirmedMail: false},\n     *     {id: 3, name: \"Mario\", active: false, confirmedMail: false}\n     * ];\n     * var isKeyTrue = _.partial(_.hasKeyValue, _, true);\n     * var isActive = isKeyTrue(\"active\");\n     * var hasConfirmedMail = isKeyTrue(\"confirmedMail\");\n     *\n     * _.map(users, isActive) // => [true, true, false]\n     * _.map(users, hasConfirmedMail) // => [true, false, false]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.asPartial|asPartial}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @param {Function} fn\n     * @param {...*} args\n     * @returns {Function}\n     */\n    function partial (fn) {\n        var args = _argsTail.apply(null, arguments);\n\n        return function () {\n            var lastIdx = 0;\n            var newArgs = [];\n            var argsLen = args.length;\n\n            for (var i = 0, boundArg; i < argsLen; i++) {\n                boundArg = args[i];\n                newArgs[i] = boundArg === _ ? arguments[lastIdx++] : boundArg;\n            }\n\n            for (var len = arguments.length; lastIdx < len; lastIdx++) {\n                newArgs[i++] = arguments[lastIdx];\n            }\n\n            return fn.apply(this, newArgs);\n        };\n    }\n\n    lamb.always = always;\n    lamb.compose = compose;\n    lamb.generic = generic;\n    lamb.identity = identity;\n    lamb.partial = partial;\n\n    /**\n     * Builds an array with the received arguments excluding the first one.<br/>\n     * To be used with the arguments object, which needs to be passed to the apply\n     * method of this function.\n     * @private\n     * @function\n     * @param {...*} value\n     * @returns {Array}\n     */\n    var _argsTail = _argsToArrayFrom(1);\n\n    /**\n     * Builds helper functions to extract portions of the arguments\n     * object rather efficiently without having to write for loops\n     * manually for each case.<br/>\n     * The arguments object needs to be passed to the apply method\n     * of the generated function.\n     * @private\n     * @param {Number} idx\n     * @returns {Function}\n     */\n    function _argsToArrayFrom (idx) {\n        return function () {\n            var argsLen = arguments.length || idx;\n            var len = argsLen - idx;\n            var result = Array(len);\n\n            for (var i = 0; i < len; i++) {\n                result[i] = arguments[i + idx];\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Keeps building a partial application of the received function as long\n     * as it's called with placeholders; applies the original function with\n     * the collected parameters otherwise.\n     * @private\n     * @param {Function} fn\n     * @param {Array} argsHolder\n     * @returns {Function|*}\n     */\n    function _asPartial (fn, argsHolder) {\n        return function () {\n            var argsHolderLen = argsHolder.length;\n            var argsLen = arguments.length;\n            var lastIdx = 0;\n            var newArgs = [];\n            var canApply = true;\n\n            for (var i = 0; i < argsLen; i++) {\n                if (arguments[i] === _) {\n                    canApply = false;\n                    break;\n                }\n            }\n\n            for (var idx = 0, boundArg; idx < argsHolderLen; idx++) {\n                boundArg = argsHolder[idx];\n                newArgs[idx] = lastIdx < argsLen && boundArg === _ ? arguments[lastIdx++] : boundArg;\n            }\n\n            while (lastIdx < argsLen) {\n                newArgs[idx++] = arguments[lastIdx++];\n            }\n\n            return canApply ? fn.apply(this, newArgs) : _asPartial(fn, newArgs);\n        };\n    }\n\n    /**\n     * The default comparer for sorting functions.<br/>\n     * If the given values are of different types they\n     * will be both converted to strings.<br/>\n     * Uses the SameValueZero comparison.\n     * @private\n     * @param {*} a\n     * @param {*} b\n     * @returns {Number} -1 | 0 | 1\n     */\n    function _comparer (a, b) {\n        var result = 0;\n\n        if (typeof a !== typeof b) {\n            a = String(a);\n            b = String(b);\n        }\n\n        /* eslint-disable no-self-compare */\n\n        if (!areSVZ(a, b)) {\n            if (a > b || a !== a) {\n                result = 1;\n            } else if (a < b || b !== b) {\n                result = -1;\n            }\n        }\n\n        /* eslint-enable no-self-compare */\n\n        return result;\n    }\n\n    /**\n     * Accepts a list of sorting criteria with at least one element\n     * and builds a function that compares two values with such criteria.\n     * @private\n     * @param {Sorter[]} criteria\n     * @returns {Function}\n     */\n    function _compareWith (criteria) {\n        return function (a, b) {\n            var len = criteria.length;\n            var criterion = criteria[0];\n            var result = criterion.compare(a.value, b.value);\n\n            for (var i = 1; result === 0 && i < len; i++) {\n                criterion = criteria[i];\n                result = criterion.compare(a.value, b.value);\n            }\n\n            if (result === 0) {\n                result = a.index - b.index;\n            }\n\n            return criterion.isDescending ? -result : result;\n        };\n    }\n\n    /**\n     * Used by curry functions to collect arguments until the arity is consumed,\n     * then applies the original function.\n     * @private\n     * @param {Function} fn\n     * @param {Number} arity\n     * @param {Boolean} isRightCurry\n     * @param {Boolean} isAutoCurry\n     * @param {Array} argsHolder\n     * @returns {Function}\n     */\n    function _currier (fn, arity, isRightCurry, isAutoCurry, argsHolder) {\n        return function () {\n            var holderLen = argsHolder.length;\n            var argsLen = arguments.length;\n            var newArgsLen = holderLen + (argsLen > 1 && isAutoCurry ? argsLen : 1);\n            var newArgs = Array(newArgsLen);\n\n            for (var i = 0; i < holderLen; i++) {\n                newArgs[i] = argsHolder[i];\n            }\n\n            for (; i < newArgsLen; i++) {\n                newArgs[i] = arguments[i - holderLen];\n            }\n\n            if (newArgsLen >= arity) {\n                return fn.apply(this, isRightCurry ? newArgs.reverse() : newArgs);\n            } else {\n                return _currier(fn, arity, isRightCurry, isAutoCurry, newArgs);\n            }\n        };\n    }\n\n    /**\n     * Prepares a function for currying. If it's not auto-currying and the arity\n     * is 2 or 3 returns optimized functions, otherwise delegates the currying\n     * to the <code>_currier</code> function.<br/>\n     * If the desumed arity isn't greater than one, it will return the received\n     * function itself, instead.\n     * @private\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @param {Boolean} [isRightCurry=false]\n     * @param {Boolean} [isAutoCurry=false]\n     * @returns {Function}\n     */\n    function _curry (fn, arity, isRightCurry, isAutoCurry) {\n        if (arity >>> 0 !== arity) {\n            arity = fn.length;\n        }\n\n        if (isAutoCurry && arity > 1 || arity > 3) {\n            return _currier(fn, arity, isRightCurry, isAutoCurry, []);\n        } else if (arity === 2) {\n            return _curry2(fn, isRightCurry);\n        } else if (arity === 3) {\n            return _curry3(fn, isRightCurry);\n        } else {\n            return fn;\n        }\n    }\n\n    /**\n     * Curries a function of arity 2.\n     * @private\n     * @param {Function} fn\n     * @param {Boolean} [isRightCurry=false]\n     * @returns {Function}\n     */\n    function _curry2 (fn, isRightCurry) {\n        return function (a) {\n            return function (b) {\n                return isRightCurry ? fn.call(this, b, a) : fn.call(this, a, b);\n            };\n        };\n    }\n\n    /**\n     * Curries a function of arity 3.\n     * @private\n     * @param {Function} fn\n     * @param {Boolean} [isRightCurry=false]\n     * @returns {Function}\n     */\n    function _curry3 (fn, isRightCurry) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return isRightCurry ? fn.call(this, c, b, a) : fn.call(this, a, b, c);\n                };\n            };\n        };\n    }\n\n    /**\n     * Flattens an array.\n     * @private\n     * @param {Array} array - The source array\n     * @param {Boolean} isDeep - Whether to perform a deep flattening or not\n     * @param {Array} output - An array to collect the result\n     * @param {Number} idx - The next index to be filled in the output\n     * @returns {Array} The output array filled with the results\n     */\n    function _flatten (array, isDeep, output, idx) {\n        for (var i = 0, len = array.length, value, j, vLen; i < len; i++) {\n            value = array[i];\n\n            if (!Array.isArray(value)) {\n                output[idx++] = value;\n            } else if (isDeep) {\n                _flatten(value, true, output, idx);\n                idx = output.length;\n            } else {\n                vLen = value.length;\n                output.length += vLen;\n\n                for (j = 0; j < vLen; j++) {\n                    output[idx++] = value[j];\n                }\n            }\n        }\n\n        return output;\n    }\n\n    /**\n     * Establishes at which index an element should be inserted in a sorted array to respect\n     * the array order. Needs the comparer used to sort the array.\n     * @private\n     * @param {Array} array\n     * @param {*} element\n     * @param {Function} comparer\n     * @param {Number} start\n     * @param {Number} end\n     * @returns {Number}\n     */\n    function _getInsertionIndex (array, element, comparer, start, end) {\n        if (array.length === 0) {\n            return 0;\n        }\n\n        var pivot = (start + end) >> 1;\n        var result = comparer(\n            {value: element, index: pivot},\n            {value: array[pivot], index: pivot}\n        );\n\n        if (end - start <= 1) {\n            return result < 0 ? pivot : pivot + 1;\n        } else if (result < 0) {\n            return _getInsertionIndex(array, element, comparer, start, pivot);\n        } else if (result === 0) {\n            return pivot + 1;\n        } else {\n            return _getInsertionIndex(array, element, comparer, pivot, end);\n        }\n    }\n\n    /**\n     * Gets the number of consecutive elements satisfying a predicate in an array-like object.\n     * @private\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @returns {Number}\n     */\n    function _getNumConsecutiveHits (arrayLike, predicate) {\n        var idx = 0;\n        var len = arrayLike.length;\n\n        while (idx < len && predicate(arrayLike[idx], idx, arrayLike)) {\n            idx++;\n        }\n\n        return idx;\n    }\n\n    /**\n     * Builds the prefix or suffix to be used when padding a string.\n     * @private\n     * @param {String} source\n     * @param {String} char\n     * @param {Number} len\n     * @returns {String}\n     */\n    function _getPadding (source, char, len) {\n        if (!isNil(source) && type(source) !== \"String\") {\n            source = String(source);\n        }\n\n        return _repeat(String(char)[0] || \"\", Math.ceil(len - source.length));\n    }\n\n    /**\n     * Checks if a path is valid in the given object and retrieves the path target.\n     * @private\n     * @param {Object} obj\n     * @param {String[]} parts\n     * @param {Boolean} walkNonEnumerables\n     * @returns {Object}\n     */\n    function _getPathInfo (obj, parts, walkNonEnumerables) {\n        if (isNil(obj)) {\n            throw _makeTypeErrorFor(obj, \"object\");\n        }\n\n        var target = obj;\n        var i = -1;\n        var len = parts.length;\n        var key;\n\n        while (++i < len) {\n            key = _getPathKey(target, parts[i], walkNonEnumerables);\n\n            if (isUndefined(key)) {\n                break;\n            }\n\n            target = target[key];\n        }\n\n        return i === len ? {isValid: true, target: target} : {isValid: false, target: void 0};\n    }\n\n    /**\n     * Helper to retrieve the correct key while evaluating a path.\n     * @private\n     * @param {Object} target\n     * @param {String} key\n     * @param {Boolean} includeNonEnumerables\n     * @returns {String|Number|Undefined}\n     */\n    function _getPathKey (target, key, includeNonEnumerables) {\n        if (includeNonEnumerables && key in Object(target) || _isEnumerable(target, key)) {\n            return key;\n        }\n\n        var n = +key;\n        var len = target && target.length;\n\n        return n >= -len && n < len ? n < 0 ? n + len : n : void 0;\n    }\n\n    /**\n     * Builds a \"grouping function\" for an array-like object.\n     * @private\n     * @param {Function} makeValue\n     * @returns {Function}\n     */\n    function _groupWith (makeValue) {\n        return function (arrayLike, iteratee) {\n            var result = {};\n            var len = arrayLike.length;\n\n            for (var i = 0, element, key; i < len; i++) {\n                element = arrayLike[i];\n                key = iteratee(element, i, arrayLike);\n                result[key] = makeValue(result[key], element);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Makes an object immutable by recursively calling <code>Object.freeze</code>\n     * on its members.\n     * @private\n     * @param {Object} obj\n     * @param {Array} seen\n     * @returns {Object} The obj parameter itself, not a copy.\n     */\n    function _immutable (obj, seen) {\n        if (seen.indexOf(obj) === -1) {\n            seen.push(Object.freeze(obj));\n\n            forEach(Object.getOwnPropertyNames(obj), function (key) {\n                var value = obj[key];\n\n                if (typeof value === \"object\" && !isNull(value)) {\n                    _immutable(value, seen);\n                }\n            });\n        }\n\n        return obj;\n    }\n\n    /**\n     * If a method with the given name exists on the target, applies it to the provided\n     * arguments and returns the result. Returns <code>undefined</code> otherwise.<br/>\n     * The arguments for the method are built by concatenating the array of bound arguments,\n     * optionally received by {@link module:lamb.invoker|invoker}, with the final set of, also\n     * optional, <code>args</code>.\n     * @private\n     * @param {Array} boundArgs\n     * @param {String} methodName\n     * @param {Object} target\n     * @param {...*} [args]\n     * @returns {*}\n     */\n    function _invoker (boundArgs, methodName, target) {\n        var method = target[methodName];\n\n        if (typeof method !== \"function\") {\n            return void 0;\n        }\n\n        var boundArgsLen = boundArgs.length;\n        var ofs = 3 - boundArgsLen;\n        var len = arguments.length - ofs;\n        var args = Array(len);\n\n        for (var i = 0; i < boundArgsLen; i++) {\n            args[i] = boundArgs[i];\n        }\n\n        for (; i < len; i++) {\n            args[i] = arguments[i + ofs];\n        }\n\n        return method.apply(target, args);\n    }\n\n    /**\n     * Accepts a target object and a key name and verifies that the target is an array and that\n     * the key is an existing index.\n     * @private\n     * @param {Object} target\n     * @param {String|Number} key\n     * @returns {Boolean}\n     */\n    function _isArrayIndex (target, key) {\n        var n = +key;\n\n        return Array.isArray(target) && n % 1 === 0 && !(n < 0 && _isEnumerable(target, key));\n    }\n\n    /**\n     * Checks whether the specified key is an enumerable property of the given object or not.\n     * @private\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    function _isEnumerable (obj, key) {\n        return key in Object(obj) && (_isOwnEnumerable(obj, key) || ~_safeEnumerables(obj).indexOf(key));\n    }\n\n    /**\n     * Checks whether the specified key is a own enumerable property of the given object or not.\n     * @private\n     * @function\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    var _isOwnEnumerable = generic(_objectProto.propertyIsEnumerable);\n\n    /**\n     * Accepts an object and build a function expecting a key to create a \"pair\" with the key\n     * and its value.\n     * @private\n     * @function\n     * @param {Object} obj\n     * @returns {Function}\n     */\n    var _keyToPairIn = _curry2(function (obj, key) {\n        return [key, obj[key]];\n    });\n\n    /**\n     * Helper to build the {@link module:lamb.everyIn|everyIn} or the\n     * {@link module:lamb.someIn|someIn} function.\n     * @private\n     * @param {Boolean} defaultResult\n     * @returns {Function}\n     */\n    function _makeArrayChecker (defaultResult) {\n        return function (arrayLike, predicate) {\n            for (var i = 0, len = arrayLike.length; i < len; i++) {\n                if (defaultResult ^ !!predicate(arrayLike[i], i, arrayLike)) {\n                    return !defaultResult;\n                }\n            }\n\n            return defaultResult;\n        };\n    }\n\n    /**\n     * Helper to build the {@link module:lamb.flatten|flatten} and\n     * {@link module:lamb.shallowFlatten|shallowFlatten} functions.\n     * @private\n     * @function\n     * @param {Boolean} isDeep\n     * @returns {Function}\n     */\n    var _makeArrayFlattener = _curry2(function (isDeep, array) {\n        return Array.isArray(array) ? _flatten(array, isDeep, [], 0) : slice(array, 0, array.length);\n    });\n\n    /**\n     * Builds a list of sorting criteria from a list of sorter functions. Returns a list containing\n     * a single default sorting criterion if the sorter list is empty.\n     * @private\n     * @param {Function[]} sorters\n     * @returns {Sorter[]}\n     */\n    function _makeCriteria (sorters) {\n        return sorters.length ? map(sorters, _makeCriterion) : [_sorter()];\n    }\n\n    /**\n     * Converts a sorting function to a sorting criterion if necessary.\n     * @private\n     * @param {Function} criterion\n     * @returns {Sorter}\n     */\n    function _makeCriterion (criterion) {\n        return criterion && typeof criterion.compare === \"function\" ? criterion : _sorter(criterion);\n    }\n\n    /**\n     * Builds a partial application of a ternary function so that its first parameter\n     * is expected as the last one.<br/>\n     * The <code>shouldAritize</code> parameter is for the \"reduce\" functions, where\n     * the absence of the <code>initialValue</code> transforms the \"reduce\" into a \"fold\".\n     * @private\n     * @param {Function} fn\n     * @param {Boolean} shouldAritize\n     * @returns {Function}\n     */\n    function _makePartial3 (fn, shouldAritize) {\n        return function (a, b) {\n            var f = shouldAritize && arguments.length !== 2 ? binary(fn) : fn;\n\n            return partial(f, _, a, b);\n        };\n    }\n\n    /**\n     * Builds a partial application of a quaternary function so that its first parameter\n     * is expected as the last one.\n     * @private\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function _makePartial4 (fn) {\n        return function (a, b, c) {\n            return partial(fn, _, a, b, c);\n        };\n    }\n\n    /**\n     * Builds a reduce function. The <code>step</code> parameter must be <code>1</code>\n     * to build  {@link module:lamb.reduce|reduce} and <code>-1</code> to build\n     * {@link module:lamb.reduceRight|reduceRight}.\n     * @private\n     * @param {Number} step\n     * @returns {Function}\n     */\n    function _makeReducer (step) {\n        return function (arrayLike, accumulator, initialValue) {\n            var len = _toArrayLength(arrayLike.length);\n            var idx = step === 1 ? 0 : len - 1;\n            var nCalls;\n            var result;\n\n            if (arguments.length === 3) {\n                nCalls = len;\n                result = initialValue;\n            } else {\n                if (len === 0) {\n                    throw new TypeError(\"Reduce of empty array-like with no initial value\");\n                }\n\n                result = arrayLike[idx];\n                idx += step;\n                nCalls = len - 1;\n            }\n\n            for (; nCalls--; idx += step) {\n                result = accumulator(result, arrayLike[idx], idx, arrayLike);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Builds a TypeError stating that it's not possible to convert the given value to the\n     * desired type.\n     * @private\n     * @param {*} value\n     * @param {String} desiredType\n     * @returns {TypeError}\n     */\n    function _makeTypeErrorFor (value, desiredType) {\n        return new TypeError(\"Cannot convert \" + type(value).toLowerCase() + \" to \" + desiredType);\n    }\n\n    /**\n     * Merges the received objects using the provided function to retrieve their keys.\n     * @private\n     * @param {Function} getKeys\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    function _merge (getKeys) {\n        return reduce(_argsTail.apply(null, arguments), function (result, source) {\n            forEach(getKeys(source), function (key) {\n                result[key] = source[key];\n            });\n\n            return result;\n        }, {});\n    }\n\n    /**\n     * Using the provided function to retrieve the keys, builds a new function\n     * expecting an object to create a list of key / value pairs.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _pairsFrom = _curry2(function (getKeys, obj) {\n        return map(getKeys(obj), _keyToPairIn(obj));\n    });\n\n    /**\n     * A null-safe function to repeat the source string the desired amount of times.\n     * @private\n     * @param {String} source\n     * @param {Number} times\n     * @returns {String}\n     */\n    function _repeat (source, times) {\n        var result = \"\";\n\n        for (var i = 0; i < times; i++) {\n            result += source;\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a list of the enumerable properties of an object.\n     * The function is null-safe, unlike the public one.\n     * @private\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    function _safeEnumerables (obj) {\n        var result = [];\n\n        for (var key in obj) {\n            result.push(key);\n        }\n\n        return result;\n    }\n\n    /**\n     * A null-safe version of <code>Object.keys</code>.\n     * @private\n     * @function\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    var _safeKeys = compose(Object.keys, Object);\n\n    /**\n     * A generic version of <code>String.prototype.search</code>\n     * @private\n     * @function\n     * @param {String} s\n     * @param {RegExp} pattern\n     * @return {Number}\n     */\n    var _search = generic(_stringProto.search);\n\n    /**\n     * Sets, or creates, a property in a copy of the provided object to the desired value.\n     * @param {Object} source\n     * @param {String} key\n     * @param {*} value\n     * @returns {Object}\n     */\n    function _setIn (source, key, value) {\n        var result = {};\n\n        for (var prop in source) {\n            result[prop] = source[prop];\n        }\n\n        result[key] = value;\n\n        return result;\n    }\n\n    /**\n     * Sets an index in an array-like object.<br/>\n     * If provided with an updater function it will use it to update the current value,\n     * otherwise sets the index to the specified value.\n     * @private\n     * @param {ArrayLike} arrayLike\n     * @param {Number} idx\n     * @param {*} [value]\n     * @param {Function} [updater]\n     * @returns {Array}\n     */\n    function _setIndex (arrayLike, idx, value, updater) {\n        var result = slice(arrayLike, 0, arrayLike.length);\n        var n = _toNaturalIndex(idx, result.length);\n\n        if (!isNaN(n)) {\n            result[n] = arguments.length === 4 ? updater(arrayLike[n]) : value;\n        }\n\n        return result;\n    }\n\n    /**\n     * Sets the object's property targeted by the given path to the desired value.<br/>\n     * Works with arrays and is able to set their indexes, even negative ones.\n     * @private\n     * @param {Object|Array} obj\n     * @param {String[]} parts\n     * @param {*} value\n     * @returns {Object|Array}\n     */\n    function _setPathIn (obj, parts, value) {\n        var key = parts[0];\n        var partsLen = parts.length;\n        var v;\n\n        if (partsLen === 1) {\n            v = value;\n        } else {\n            var targetKey = _getPathKey(obj, key, false);\n\n            v = _setPathIn(\n                isUndefined(targetKey) ? targetKey : obj[targetKey],\n                slice(parts, 1, partsLen),\n                value\n            );\n        }\n\n        return _isArrayIndex(obj, key) ? _setIndex(obj, +key, v) : _setIn(obj, key, v);\n    }\n\n    /**\n     * Builds a sorting criterion. If the comparer function is missing, the default\n     * comparer will be used instead.\n     * @private\n     * @param {Function} reader\n     * @param {Boolean} isDescending\n     * @param {Function} [comparer]\n     * @returns {Sorter}\n     */\n    function _sorter (reader, isDescending, comparer) {\n        if (typeof reader !== \"function\" || reader === identity) {\n            reader = null;\n        }\n\n        if (typeof comparer !== \"function\") {\n            comparer = _comparer;\n        }\n\n        return {\n            isDescending: isDescending === true,\n            compare: function (a, b) {\n                if (reader) {\n                    a = reader(a);\n                    b = reader(b);\n                }\n\n                return comparer(a, b);\n            }\n        };\n    }\n\n    /**\n     * Using the provided function to retrieve the keys of an object, builds\n     * a function expecting an object to create an array containing a list\n     * of the keys in its first index and the corresponding list of values\n     * in the second one.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _tearFrom = _curry2(function (getKeys, obj) {\n        return reduce(getKeys(obj), function (result, key) {\n            result[0].push(key);\n            result[1].push(obj[key]);\n\n            return result;\n        }, [[], []]);\n    });\n\n    /**\n     * Converts a value to a valid array length, thus an integer within\n     * <code>0</code> and <code>2<sup>32</sup> - 1</code> (both included).\n     * @private\n     * @param {*} value\n     * @returns {Number}\n     */\n    function _toArrayLength (value) {\n        return clamp(value, 0, MAX_ARRAY_LENGTH) >>> 0;\n    }\n\n    /**\n     * Converts a value to an integer.\n     * @private\n     * @param {*} value\n     * @returns {Number}\n     */\n    function _toInteger (value) {\n        var n = +value;\n\n        if (isNaN(n)) {\n            return 0;\n        } else if (n % 1 === 0) {\n            return n;\n        } else {\n            return Math.floor(Math.abs(n)) * (n < 0 ? -1 : 1);\n        }\n    }\n\n    /**\n     * Checks if the given index, even negative, is an integer within the provided\n     * length. If so returns its natural number equivalent.<br/>\n     * Returns <code>undefined<code> otherwise.\n     * @private\n     * @param {Number} idx\n     * @param {Number} len\n     * @returns {Number}\n     */\n    function _toNaturalIndex (idx, len) {\n        if (isInteger(idx)) {\n            return idx >= -len && idx < len ? idx < 0 ? idx + len : idx : NaN;\n        }\n\n        return NaN;\n    }\n\n    /**\n     * Splits a sting path using the provided separator and returns an array\n     * of path parts.\n     * @private\n     * @param {String} path\n     * @param {String} separator\n     * @returns {String[]}\n     */\n    function _toPathParts (path, separator) {\n        return String(path).split(separator || \".\");\n    }\n\n    /**\n     * Creates a non-null-safe version of the provided \"getKeys\" function.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _unsafeKeyListFrom = _curry2(function (getKeys, obj) {\n        if (isNil(obj)) {\n            throw _makeTypeErrorFor(obj, \"object\");\n        }\n\n        return getKeys(obj);\n    });\n\n    /**\n     * Using the provided function to retrieve the keys of an object, builds\n     * a function expecting an object to create the list of values for such keys.\n     * @private\n     * @function\n     * @param {Function} getKeys\n     * @returns {Function}\n     */\n    var _valuesFrom = _curry2(function (getKeys, obj) {\n        return map(getKeys(obj), partial(getIn, obj));\n    });\n\n    /**\n     * Builds a predicate to check if an array-like object contains the given value.<br/>\n     * Please note that the equality test is made with {@link module:lamb.areSVZ|areSVZ}; so you can\n     * check for <code>NaN</code>, but <code>0</code> and <code>-0</code> are the same value.<br/>\n     * See also {@link module:lamb.isIn|isIn} for an uncurried version.\n     * @example\n     * var containsNaN = _.contains(NaN);\n     *\n     * containsNaN([0, 1, 2, 3, NaN]) // => true\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.isIn|isIn}\n     * @param {*} value\n     * @returns {Function}\n     */\n    var contains = _curry2(isIn, true);\n\n    /**\n     * Checks if all the elements in an array-like object satisfy the given predicate.<br/>\n     * The function will stop calling the predicate as soon as it returns a <em>falsy</em> value.<br/>\n     * Note that an empty array-like will always produce a <code>true</code> result regardless of the\n     * predicate because of [vacuous truth]{@link https://en.wikipedia.org/wiki/Vacuous_truth}.<br/>\n     * Also note that unlike the native\n     * [Array.prototype.every]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every},\n     * this function won't skip deleted or unassigned indexes.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12, active: true},\n     *     {\"name\": \"John\", \"age\": 40, active: true},\n     *     {\"name\": \"Mario\", \"age\": 17, active: true},\n     *     {\"name\": \"Paolo\", \"age\": 15, active: true}\n     * ];\n     * var isAdult = _.keySatisfies(_.isGTE(18), \"age\");\n     * var isActive = _.hasKeyValue(\"active\", true);\n     *\n     * _.everyIn(persons, isAdult) // => false\n     * _.everyIn(persons, isActive) // => true\n     *\n     * @example <caption>Showing the difference with <code>Array.prototype.every</code>:</caption>\n     * var isDefined = _.not(_.isUndefined);\n     * var arr = new Array(5);\n     * arr[3] = 99;\n     *\n     * arr.every(isDefined) // => true\n     * _.everyIn(arr, isDefined) // => false\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.every|every}\n     * @see {@link module:lamb.some|some}, {@link module:lamb.someIn|someIn}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @returns {Boolean}\n     */\n    var everyIn = _makeArrayChecker(true);\n\n    /**\n     * A curried version of {@link module:lamb.everyIn|everyIn} that expects a predicate\n     * to build a function waiting for the array-like to act upon.\n     * @example\n     * var data = [2, 3, 5, 6, 8];\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var allEvens = _.every(isEven);\n     * var allIntegers = _.every(_.isInteger);\n     *\n     * allEvens(data) // => false\n     * allIntegers(data) // => true\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.everyIn|everyIn}\n     * @see {@link module:lamb.some|some}, {@link module:lamb.someIn|someIn}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    var every = _curry2(everyIn, true);\n\n    /**\n     * Builds an array comprised of all values of the array-like object passing the <code>predicate</code>\n     * test.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.filter]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example\n     * var isLowerCase = function (s) { return s.toLowerCase() === s; };\n     *\n     * _.filter([\"Foo\", \"bar\", \"baZ\"], isLowerCase) // => [\"bar\"]\n     *\n     * // the function will work with any array-like object\n     * _.filter(\"fooBAR\", isLowerCase) // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.filterWith|filterWith}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @returns {Array}\n     */\n    function filter (arrayLike, predicate) {\n        var len = arrayLike.length;\n        var result = [];\n\n        for (var i = 0; i < len; i++) {\n            predicate(arrayLike[i], i, arrayLike) && result.push(arrayLike[i]);\n        }\n\n        return result;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.filter|filter} that uses the given predicate\n     * to build a function expecting the array-like object to act upon.\n     * @example\n     * var isLowerCase = function (s) { return s.toLowerCase() === s; };\n     * var getLowerCaseEntries = _.filterWith(isLowerCase);\n     *\n     * getLowerCaseEntries([\"Foo\", \"bar\", \"baZ\"]) // => [\"bar\"]\n     *\n     * // array-like objects can be used as well\n     * getLowerCaseEntries(\"fooBAR\") // => [\"f\", \"o\", \"o\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.filter|filter}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    var filterWith = _curry2(filter, true);\n\n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns it if\n     * the search is successful. Returns <code>undefined</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.find(persons, _.hasKeyValue(\"age\", 40)) // => {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40}\n     * _.find(persons, _.hasKeyValue(\"age\", 41)) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.findWhere|findWhere}\n     * @see {@link module:lamb.findIndex|findIndex}, {@link module:lamb.findIndexWhere|findIndexWhere}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @returns {*}\n     */\n    function find (arrayLike, predicate) {\n        var idx = findIndex(arrayLike, predicate);\n\n        return idx === -1 ? void 0 : arrayLike[idx];\n    }\n\n    /**\n     * Searches for an element satisfying the predicate in the given array-like object and returns its\n     * index if the search is successful. Returns <code>-1</code> otherwise.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 40}\n     * ];\n     *\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 40)) // => 1\n     * _.findIndex(persons, _.hasKeyValue(\"age\", 41)) // => -1\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.findIndexWhere|findIndexWhere}\n     * @see {@link module:lamb.find|find}, {@link module:lamb.findWhere|findWhere}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @returns {Number}\n     */\n    function findIndex (arrayLike, predicate) {\n        var result = -1;\n\n        for (var i = 0, len = arrayLike.length; i < len; i++) {\n            if (predicate(arrayLike[i], i, arrayLike)) {\n                result = i;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.findIndex|findIndex} that uses the given predicate\n     * to build a function expecting the array-like object to search.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var findEvenIdx = _.findIndexWhere(isEven);\n     *\n     * findEvenIdx([1, 3, 4, 5, 7]) // => 2\n     * findEvenIdx([1, 3, 5, 7]) // => -1\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.findIndex|findIndex}\n     * @see {@link module:lamb.find|find}, {@link module:lamb.findWhere|findWhere}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    var findIndexWhere = _curry2(findIndex, true);\n\n    /**\n     * A curried version of {@link module:lamb.find|find} expecting the array-like object\n     * to search.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var findEven = _.findWhere(isEven);\n     *\n     * findEven([1, 3, 4, 5, 7]) // => 4\n     * findEven([1, 3, 5, 7]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.find|find}\n     * @see {@link module:lamb.findIndex|findIndex}, {@link module:lamb.findIndexWhere|findIndexWhere}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    var findWhere = _curry2(find, true);\n\n    /**\n     * Executes the provided <code>iteratee</code> for each element of the given array-like object.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.forEach]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example <caption>Adding a CSS class to all elements of a NodeList in a browser environment:</caption>\n     * var addClass = _.curry(function (className, element) {\n     *     element.classList.add(className);\n     * });\n     * var paragraphs = document.querySelectorAll(\"#some-container p\");\n     *\n     * _.forEach(paragraphs, addClass(\"main\"));\n     * // each \"p\" element in the container will have the \"main\" class now\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Undefined}\n     */\n    function forEach (arrayLike, iteratee) {\n        for (var i = 0, len = _toArrayLength(arrayLike.length); i < len; i++) {\n            iteratee(arrayLike[i], i, arrayLike);\n        }\n    }\n\n    /**\n     * Checks if an array-like object contains the given value.<br/>\n     * Please note that the equality test is made with {@link module:lamb.areSVZ|areSVZ}; so you can\n     * check for <code>NaN</code>, but <code>0</code> and <code>-0</code> are the same value.<br/>\n     * See also {@link module:lamb.contains|contains} for a curried version building a predicate.\n     * @example\n     * var numbers = [0, 1, 2, 3, NaN];\n     *\n     * _.isIn(numbers, 1) // => true\n     * _.isIn(numbers, 0) // => true\n     * _.isIn(numbers, -0) // => true\n     * _.isIn(numbers, NaN) // => true\n     * _.isIn(numbers, 5) // => false\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.contains|contains}\n     * @param {ArrayLike} arrayLike\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isIn (arrayLike, value) {\n        var result = false;\n\n        for (var i = 0, len = arrayLike.length; i < len; i++) {\n            if (areSVZ(value, arrayLike[i])) {\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Generates an array with the values passed as arguments.<br/>\n     * Behaves like ES6's [Array.of]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of}.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @param {...*} value\n     * @returns {Array}\n     */\n    var list = _argsToArrayFrom(0);\n\n    /**\n     * Builds a new array by applying the iteratee function to each element of the\n     * received array-like object.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.map]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example\n     * _.map([\"Joe\", \"Mario\", \"Jane\"], _.invoker(\"toUpperCase\")) // => [\"JOE\", \"MARIO\", \"JANE\"]\n     *\n     * _.map([4, 9, 16], Math.sqrt); // => [2, 3, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.mapWith|mapWith}\n     * @see {@link module:lamb.flatMap|flatMap}, {@link module:lamb.flatMapWith|flatMapWith}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Array}\n     */\n    function map (arrayLike, iteratee) {\n        var len = _toArrayLength(arrayLike.length);\n        var result = Array(len);\n\n        for (var i = 0; i < len; i++) {\n            result[i] = iteratee(arrayLike[i], i, arrayLike);\n        }\n\n        return result;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.map|map} that uses the provided iteratee to\n     * build a function expecting the array-like object to act upon.\n     * @example\n     * var square = function (n) { return n * n; };\n     * var getSquares = _.mapWith(square);\n     *\n     * getSquares([1, 2, 3, 4, 5]) // => [1, 4, 9, 16, 25]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.map|map}\n     * @see {@link module:lamb.flatMap|flatMap}, {@link module:lamb.flatMapWith|flatMapWith}\n     * @param {ListIteratorCallback} iteratee\n     * @returns {function}\n     */\n    var mapWith = _curry2(map, true);\n\n    /**\n     * Reduces (or folds) the values of an array-like object, starting from the first, to a new\n     * value using the provided <code>accumulator</code> function.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.reduce]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @example\n     * _.reduce([1, 2, 3, 4], _.sum) // => 10\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduceRight|reduceRight}\n     * @see {@link module:lamb.reduceWith|reduceWith}, {@link module:lamb.reduceRightWith|reduceRightWith}\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduce = _makeReducer(1);\n\n    /**\n     * Same as {@link module:lamb.reduce|reduce}, but starts the fold operation from the last\n     * element instead.<br/>\n     * Since version <code>0.34.0</code> this function is no longer a generic version of\n     * [Array.prototype.reduceRight]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight}\n     * for performance reasons.<br/>\n     * Note that unlike the native array method this function doesn't skip unassigned or deleted indexes.\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduce|reduce}\n     * @see {@link module:lamb.reduceWith|reduceWith}, {@link module:lamb.reduceRightWith|reduceRightWith}\n     * @param {ArrayLike} arrayLike\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {*}\n     */\n    var reduceRight = _makeReducer(-1);\n\n    /**\n     * A partial application of {@link module:lamb.reduce|reduceRight} that uses the\n     * provided <code>accumulator</code> and the optional <code>initialValue</code> to\n     * build a function expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.reduceRightWith(_.sum)(arr) // => 15\n     * _.reduceRightWith(_.subtract)(arr) // => -5\n     * _.reduceRightWith(_.subtract, 0)(arr) // => -15\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduceWith|reduceWith}\n     * @see {@link module:lamb.reduce|reduce}, {@link module:lamb.reduce|reduceRight}\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {Function}\n     */\n    var reduceRightWith = _makePartial3(reduceRight, true);\n\n    /**\n     * A partial application of {@link module:lamb.reduce|reduce} that uses the\n     * provided <code>accumulator</code> and the optional <code>initialValue</code> to\n     * build a function expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.reduceWith(_.sum)(arr) // => 15\n     * _.reduceWith(_.subtract)(arr) // => -13\n     * _.reduceWith(_.subtract, 0)(arr) // => -15\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.reduceRightWith|reduceRightWith}\n     * @see {@link module:lamb.reduce|reduce}, {@link module:lamb.reduce|reduceRight}\n     * @param {AccumulatorCallback} accumulator\n     * @param {*} [initialValue]\n     * @returns {Function}\n     */\n    var reduceWith = _makePartial3(reduce, true);\n\n    /**\n     * Reverses a copy of the given array-like object.\n     * @example\n     * var arr = [1, 2, 3];\n     *\n     * _.reverse(arr) // => [3, 2, 1];\n     *\n     * // `arr` still is [1, 2, 3]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    function reverse (arrayLike) {\n        var len = _toArrayLength(arrayLike.length);\n        var result = Array(len);\n\n        for (var i = 0, ofs = len - 1; i < len; i++) {\n            result[i] = arrayLike[ofs - i];\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds an array by extracting a portion of an array-like object.<br/>\n     * Since version <code>0.48.0</code> this function is no longer a generic version of\n     * [Array.prototype.slice]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}\n     * to ensure that dense arrays are returned.<br/>\n     * Also note that, unlike the native method, the <code>start</code> and <code>end</code>\n     * parameters aren't optional and will be simply converted to integer.<br/>\n     * See also {@link module:lamb.dropFrom|dropFrom} and {@link module:lamb.drop|drop} if you want a\n     * slice to the end of the array-like.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.slice(arr, 0, 2) // => [1, 2]\n     * _.slice(arr, 2, -1) // => [3, 4]\n     * _.slice(arr, -3, 5) // => [3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sliceAt|sliceAt}\n     * @see {@link module:lamb.dropFrom|dropFrom}, {@link module:lamb.drop|drop}\n     * @param {ArrayLike} arrayLike - Any array like object.\n     * @param {Number} start - Index at which to begin extraction.\n     * @param {Number} end - Index at which to end extraction. Extracts up to but not including end.\n     * @returns {Array}\n     */\n    function slice (arrayLike, start, end) {\n        var len = _toArrayLength(arrayLike.length);\n        var begin = _toInteger(start);\n        var upTo = _toInteger(end);\n\n        if (begin < 0) {\n            begin = begin < -len ? 0 : begin + len;\n        }\n\n        if (upTo < 0) {\n            upTo = upTo < -len ? 0 : upTo + len;\n        } else if (upTo > len) {\n            upTo = len;\n        }\n\n        var resultLen = upTo - begin;\n        var result = resultLen > 0 ? Array(resultLen) : [];\n\n        for (var i = 0; i < resultLen; i++) {\n            result[i] = arrayLike[begin + i];\n        }\n\n        return result;\n    }\n\n    /**\n     * Given the <code>start</code> and <code>end</code> bounds, builds a partial application\n     * of {@link module:lamb.slice|slice} expecting the array-like object to slice.<br/>\n     * See also {@link module:lamb.dropFrom|dropFrom} and {@link module:lamb.drop|drop} if you want a\n     * slice to the end of the array-like.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     * var s = \"hello\";\n     * var dropFirstAndLast = _.sliceAt(1, -1);\n     *\n     * dropFirstAndLast(arr) // => [2, 3, 4]\n     * dropFirstAndLast(s) // => [\"e\", \"l\", \"l\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.slice|slice}\n     * @see {@link module:lamb.dropFrom|dropFrom}, {@link module:lamb.drop|drop}\n     * @param {Number} start - Index at which to begin extraction.\n     * @param {Number} end - Index at which to end extraction. Extracts up to but not including end.\n     * @returns {Function}\n     */\n    var sliceAt = _makePartial3(slice);\n\n    /**\n     * Checks if at least one element in an array-like object satisfies the given predicate.<br/>\n     * The function will stop calling the predicate as soon as it returns a <em>truthy</em> value.<br/>\n     * Note that unlike the native\n     * [Array.prototype.some]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some},\n     * this function won't skip deleted or unassigned indexes.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12, active: false},\n     *     {\"name\": \"John\", \"age\": 40, active: false},\n     *     {\"name\": \"Mario\", \"age\": 17, active: false},\n     *     {\"name\": \"Paolo\", \"age\": 15, active: false}\n     * ];\n     * var isAdult = _.keySatisfies(_.isGTE(18), \"age\");\n     * var isActive = _.hasKeyValue(\"active\", true);\n     *\n     * _.someIn(persons, isAdult) // => true\n     * _.someIn(persons, isActive) // => false\n     *\n     * @example <caption>Showing the difference with <code>Array.prototype.some</code>:</caption>\n     * var arr = new Array(5);\n     * arr[3] = 99;\n     *\n     * arr.some(_.isUndefined) // => false\n     * _.someIn(arr, _.isUndefined) // => true\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.some|some}\n     * @see {@link module:lamb.every|every}, {@link module:lamb.everyIn|everyIn}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @returns {Boolean}\n     */\n    var someIn = _makeArrayChecker(false);\n\n    /**\n     * A curried version of {@link module:lamb.someIn|someIn} that uses the given predicate to\n     * build a function waiting for the array-like to act upon.\n     * @example\n     * var data = [1, 3, 5, 6, 7, 8];\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var containsEvens = _.some(isEven);\n     * var containsStrings = _.some(_.isType(\"String\"));\n     *\n     * containsEvens(data) // => true\n     * containsStrings(data) // => false\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.someIn|someIn}\n     * @see {@link module:lamb.every|every}, {@link module:lamb.everyIn|everyIn}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    var some = _curry2(someIn, true);\n\n    lamb.contains = contains;\n    lamb.every = every;\n    lamb.everyIn = everyIn;\n    lamb.filter = filter;\n    lamb.filterWith = filterWith;\n    lamb.find = find;\n    lamb.findIndex = findIndex;\n    lamb.findIndexWhere = findIndexWhere;\n    lamb.findWhere = findWhere;\n    lamb.forEach = forEach;\n    lamb.isIn = isIn;\n    lamb.list = list;\n    lamb.map = map;\n    lamb.mapWith = mapWith;\n    lamb.reduce = reduce;\n    lamb.reduceRight = reduceRight;\n    lamb.reduceRightWith = reduceRightWith;\n    lamb.reduceWith = reduceWith;\n    lamb.reverse = reverse;\n    lamb.slice = slice;\n    lamb.sliceAt = sliceAt;\n    lamb.some = some;\n    lamb.someIn = someIn;\n\n    /**\n     * Accepts a series of functions and builds a function that applies the received\n     * arguments to each one and returns the first non-<code>undefined</code> value.<br/>\n     * Meant to work in sinergy with {@link module:lamb.case|case} and\n     * {@link module:lamb.invoker|invoker}, can be useful as a strategy pattern for functions,\n     * to mimic conditional logic or pattern matching, and also to build polymorphic functions.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var filterString = _.compose(_.invoker(\"join\", \"\"), _.filter);\n     * var filterAdapter = _.adapter(\n     *     _.invoker(\"filter\"),\n     *     _.case(_.isType(\"String\"), filterString)\n     * );\n     *\n     * filterAdapter([1, 2, 3, 4, 5, 6], isEven) // => [2, 4, 6]\n     * filterAdapter(\"123456\", isEven) // => \"246\"\n     * filterAdapter({}, isEven) // => undefined\n     *\n     * // obviously it's composable\n     * var filterWithDefault = _.adapter(filterAdapter, _.always(\"Not implemented\"));\n     *\n     * filterWithDefault([1, 2, 3, 4, 5, 6], isEven) // => [2, 4, 6]\n     * filterWithDefault(\"123456\", isEven) // => \"246\"\n     * filterWithDefault({}, isEven) // => \"Not implemented\"\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.case|case}\n     * @see {@link module:lamb.invoker|invoker}\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function adapter () {\n        var functions = list.apply(null, arguments);\n\n        return function () {\n            var len = functions.length;\n            var result;\n\n            for (var i = 0; i < len; i++) {\n                result = functions[i].apply(this, arguments);\n\n                if (!isUndefined(result)) {\n                    break;\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Accepts a series of predicates and builds a new one that returns true if they are all satisfied\n     * by the same arguments. The functions in the series will be applied one at a time until a\n     * <code>false</code> value is produced, which is returned immediately.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isPositiveEven = _.allOf(isEven, _.isGT(0));\n     *\n     * isPositiveEven(-2) // => false\n     * isPositiveEven(11) // => false\n     * isPositiveEven(6) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.anyOf|anyOf}\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function allOf () {\n        var predicates = list.apply(null, arguments);\n\n        return function () {\n            for (var i = 0, len = predicates.length; i < len; i++) {\n                if (!predicates[i].apply(this, arguments)) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n    }\n\n    /**\n     * Accepts a series of predicates and builds a new one that returns true if at least one of them is\n     * satisfied by the received arguments. The functions in the series will be applied one at a time\n     * until a <code>true</code> value is produced, which is returned immediately.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\", group: \"guest\"},\n     *     {id: 2, name: \"Jane\", group: \"root\"},\n     *     {id: 3, name: \"Mario\", group: \"admin\"}\n     * ];\n     * var isInGroup = _.partial(_.hasKeyValue, \"group\");\n     * var isSuperUser = _.anyOf(isInGroup(\"admin\"), isInGroup(\"root\"));\n     *\n     * isSuperUser(users[0]) // => false\n     * isSuperUser(users[1]) // => true\n     * isSuperUser(users[2]) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.allOf|allOf}\n     * @param {...Function} predicate\n     * @returns {Function}\n     */\n    function anyOf () {\n        var predicates = list.apply(null, arguments);\n\n        return function () {\n            for (var i = 0, len = predicates.length; i < len; i++) {\n                if (predicates[i].apply(this, arguments)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    /**\n     * Verifies that the two supplied values are the same value using the \"SameValue\" comparison.<br/>\n     * Note that this doesn't behave as the strict equality operator, but rather as a shim of ES6's\n     * [Object.is]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is}.\n     * Differences are that <code>0</code> and <code>-0</code> aren't the same value and, finally,\n     * <code>NaN</code> is equal to itself.<br/>\n     * See also {@link module:lamb.is|is} for a curried version building a predicate and\n     * {@link module:lamb.areSVZ|areSVZ} and {@link module:lamb.isSVZ|isSVZ} to perform a \"SameValueZero\"\n     * comparison.\n     * @example\n     * var testObject = {};\n     *\n     * _.areSame({}, testObject) // => false\n     * _.areSame(testObject, testObject) // => true\n     * _.areSame(\"foo\", \"foo\") // => true\n     * _.areSame(0, -0) // => false\n     * _.areSame(0 / 0, NaN) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.is|is}\n     * @see {@link module:lamb.areSVZ|areSVZ}, {@link module:lamb.isSVZ|isSVZ}\n     * @see [SameValue comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevalue}\n     * @see [SameValueZero comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero}\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function areSame (a, b) {\n        return a === 0 && b === 0 ? 1 / a === 1 / b : areSVZ(a, b);\n    }\n\n    /**\n     * Verifies that the two supplied values are the same value using the \"SameValueZero\" comparison.<br/>\n     * With this comparison <code>NaN</code> is equal to itself, but <code>0</code> and <code>-0</code> are\n     * considered the same value.<br/>\n     * See also {@link module:lamb.isSVZ|isSVZ} for a curried version building a predicate and\n     * {@link module:lamb.areSame|areSame} and {@link module:lamb.is|is} to perform a \"SameValue\" comparison.\n     * @example\n     * var testObject = {};\n     *\n     * _.areSVZ({}, testObject) // => false\n     * _.areSVZ(testObject, testObject) // => true\n     * _.areSVZ(\"foo\", \"foo\") // => true\n     * _.areSVZ(0, -0) // => true\n     * _.areSVZ(0 / 0, NaN) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.isSVZ|isSVZ}\n     * @see {@link module:lamb.areSame|areSame}, {@link module:lamb.is|is}\n     * @see [SameValue comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevalue}\n     * @see [SameValueZero comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero}\n     * @param {*} a\n     * @param {*} b\n     * @returns {Boolean}\n     */\n    function areSVZ (a, b) {\n        // eslint-disable-next-line no-self-compare\n        return a !== a ? b !== b : a === b;\n    }\n\n    /**\n     * Builds a case for {@link module:lamb.adapter|adapter}.<br/>\n     * The function will apply the received arguments to <code>fn</code> if the predicate is satisfied\n     * with the same arguments, otherwise will return <code>undefined</code>.<br/>\n     * See also {@link module:lamb.condition|condition} to build a condition with two branching functions.\n     * @example\n     * var halveIfNumber = _.case(_.isType(\"Number\"), _.divideBy(2));\n     *\n     * halveIfNumber(2) // => 1\n     * halveIfNumber(\"2\") // => undefined\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @alias case\n     * @see {@link module:lamb.adapter|adapter}\n     * @see {@link module:lamb.condition|condition}\n     * @param {Function} predicate\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function case_ (predicate, fn) {\n        return function () {\n            return predicate.apply(this, arguments) ? fn.apply(this, arguments) : void 0;\n        };\n    }\n\n    /**\n     * Builds a function that will apply the received arguments to <code>trueFn</code>,\n     * if the predicate is satisfied with the same arguments, or to <code>falseFn</code> otherwise.<br/>\n     * Although you can use other <code>condition</code>s as <code>trueFn</code> or <code>falseFn</code>,\n     * it's probably better to use {@link module:lamb.adapter|adapter} to build more complex behaviours.<br/>\n     * See also {@link module:lamb.unless|unless} and {@link module:lamb.when|when} as they are\n     * shortcuts to common use cases.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halveEvenAndDoubleOdd = _.condition(isEven, _.divideBy(2), _.multiplyBy(2));\n     *\n     * halveEvenAndDoubleOdd(5) // => 10\n     * halveEvenAndDoubleOdd(6) // => 3\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.unless|unless}\n     * @see {@link module:lamb.when|when}\n     * @param {Function} predicate\n     * @param {Function} trueFn\n     * @param {Function} falseFn\n     * @returns {Function}\n     */\n    function condition (predicate, trueFn, falseFn) {\n        return function () {\n            return (predicate.apply(this, arguments) ? trueFn : falseFn).apply(this, arguments);\n        };\n    }\n\n    /**\n     * Verifies that the first given value is greater than the second.<br/>\n     * Wraps the native <code>&gt;</code> operator within a function.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.gt(today, pastDate) // => true\n     * _.gt(pastDate, today) // => false\n     * _.gt(3, 4) // => false\n     * _.gt(3, 3) // => false\n     * _.gt(3, 2) // => true\n     * _.gt(0, -0) // => false\n     * _.gt(-0, 0) // => false\n     * _.gt(\"a\", \"A\") // => true\n     * _.gt(\"b\", \"a\") // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.gte|gte}\n     * @see {@link module:lamb.lt|lt}, {@link module:lamb.lte|lte}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function gt (a, b) {\n        return a > b;\n    }\n\n    /**\n     * Verifies that the first given value is greater than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native\n     * <code>&gt;=</code> operator, so <code>-0 === 0</code>.\n     * @example\n     * _.gte(3, 4) // => false\n     * _.gte(3, 3) // => true\n     * _.gte(3, 2) // => true\n     * _.gte(0, -0) // => true\n     * _.gte(-0, 0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.gt|gt}\n     * @see {@link module:lamb.lt|lt}, {@link module:lamb.lte|lte}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function gte (a, b) {\n        return a >= b;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.areSame|areSame}.<br/>\n     * Accepts a value and builds a predicate that checks whether the value\n     * and the one received by the predicate are the same using the \"SameValue\"\n     * comparison.<br/>\n     * See also {@link module:lamb.areSVZ|areSVZ} and {@link module:lamb.isSVZ|isSVZ}\n     * to perform a \"SameValueZero\" comparison.\n     * @example\n     * var john = {name: \"John\", surname: \"Doe\"};\n     * var isJohn = _.is(john);\n     * var isNegativeZero = _.is(-0);\n     * var isReallyNaN = _.is(NaN);\n     *\n     * isJohn(john) // => true\n     * isJohn({name: \"John\", surname: \"Doe\"}) // => false\n     *\n     * isNegativeZero(0) // => false\n     * isNegativeZero(-0) // => true\n     *\n     * isNaN(NaN) // => true\n     * isNaN(\"foo\") // => true\n     *\n     * isReallyNaN(NaN) // => true\n     * isReallyNaN(\"foo\") // => false\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @see {@link module:lamb.areSame|areSame}\n     * @see {@link module:lamb.areSVZ|areSVZ}, {@link module:lamb.isSVZ|isSVZ}\n     * @see [SameValue comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevalue}\n     * @see [SameValueZero comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero}\n     * @param {*} value\n     * @returns {Function}\n     */\n    var is = _curry2(areSame);\n\n    /**\n     * A right curried version of {@link module:lamb.gt|gt}.<br/>\n     * Accepts a value and builds a predicate that checks whether the value\n     * is greater than the one received by the predicate.\n     * @example\n     * var isGreaterThan5 = _.isGT(5);\n     *\n     * isGreaterThan5(3) // => false\n     * isGreaterThan5(5) // => false\n     * isGreaterThan5(7) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @see {@link module:lamb.isGTE|isGTE}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @see {@link module:lamb.gt|gt}, {@link module:lamb.gte|gte}\n     * @see {@link module:lamb.lt|lt}, {@link module:lamb.lte|lte}\n     * @param {Number|String|Date|Boolean} value\n     * @returns {Function}\n     */\n    var isGT = _curry2(gt, true);\n\n    /**\n     * A right curried version of {@link module:lamb.gte|gte}.<br/>\n     * Accepts a value and builds a predicate that checks whether the value\n     * is greater than or equal to the one received by the predicate.\n     * @example\n     * var isPositiveOrZero = _.isGTE(0);\n     *\n     * isPositiveOrZero(-3) // => false\n     * isPositiveOrZero(-0) // => true\n     * isPositiveOrZero(0) // => true\n     * isPositiveOrZero(5) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @see {@link module:lamb.isGT|isGT}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @see {@link module:lamb.gt|gt}, {@link module:lamb.gte|gte}\n     * @see {@link module:lamb.lt|lt}, {@link module:lamb.lte|lte}\n     * @param {Number|String|Date|Boolean} value\n     * @returns {Function}\n     */\n    var isGTE = _curry2(gte, true);\n\n    /**\n     * A right curried version of {@link module:lamb.lt|lt}.<br/>\n     * Accepts a value and builds a predicate that checks whether the value\n     * is less than the one received by the predicate.\n     * @example\n     * var isLessThan5 = _.isLT(5);\n     *\n     * isLessThan5(7) // => false\n     * isLessThan5(5) // => false\n     * isLessThan5(3) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @see {@link module:lamb.isLTE|isLTE}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @see {@link module:lamb.lt|lt}, {@link module:lamb.lte|lte}\n     * @see {@link module:lamb.gt|gt}, {@link module:lamb.gte|gte}\n     * @param {Number|String|Date|Boolean} value\n     * @returns {Function}\n     */\n    var isLT = _curry2(lt, true);\n\n    /**\n     * A right curried version of {@link module:lamb.lte|lte}.<br/>\n     * Accepts a value and builds a predicate that checks whether the value\n     * is less than or equal to the one received by the predicate.\n     * @example\n     * var isNegativeOrZero = _.isLTE(0);\n     *\n     * isNegativeOrZero(5) // => false\n     * isNegativeOrZero(-0) // => true\n     * isNegativeOrZero(0) // => true\n     * isNegativeOrZero(-3) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @see {@link module:lamb.isLT|isLT}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @see {@link module:lamb.lt|lt}, {@link module:lamb.lte|lte}\n     * @see {@link module:lamb.gt|gt}, {@link module:lamb.gte|gte}\n     * @param {Number|String|Date|Boolean} value\n     * @returns {Function}\n     */\n    var isLTE = _curry2(lte, true);\n\n    /**\n     * A curried version of {@link module:lamb.areSVZ|areSVZ}.<br/>\n     * Accepts a value and builds a predicate that checks whether the value\n     * and the one received by the predicate are the same using the \"SameValueZero\"\n     * comparison.<br/>\n     * See also {@link module:lamb.areSame|areSame} and {@link module:lamb.is|is}\n     * to perform a \"SameValue\" comparison.\n     * @example\n     * var john = {name: \"John\", surname: \"Doe\"};\n     * var isJohn = _.isSVZ(john);\n     * var isZero = _.isSVZ(0);\n     * var isReallyNaN = _.isSVZ(NaN);\n     *\n     * isJohn(john) // => true\n     * isJohn({name: \"John\", surname: \"Doe\"}) // => false\n     *\n     * isZero(0) // => true\n     * isZero(-0) // => true\n     *\n     * isNaN(NaN) // => true\n     * isNaN(\"foo\") // => true\n     *\n     * isReallyNaN(NaN) // => true\n     * isReallyNaN(\"foo\") // => false\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @function\n     * @see {@link module:lamb.areSVZ|areSVZ}\n     * @see {@link module:lamb.areSame|areSame}, {@link module:lamb.is|is}\n     * @see [SameValue comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevalue}\n     * @see [SameValueZero comparison]{@link http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero}\n     * @param {*} value\n     * @returns {Function}\n     */\n    var isSVZ = _curry2(areSVZ);\n\n    /**\n     * Verifies that the first given value is less than the second.<br/>\n     * Wraps the native <code>&lt;</code> operator within a function.\n     * @example\n     * var pastDate = new Date(2010, 2, 12);\n     * var today = new Date();\n     *\n     * _.lt(today, pastDate) // => false\n     * _.lt(pastDate, today) // => true\n     * _.lt(3, 4) // => true\n     * _.lt(3, 3) // => false\n     * _.lt(3, 2) // => false\n     * _.lt(0, -0) // => false\n     * _.lt(-0, 0) // => false\n     * _.lt(\"a\", \"A\") // => false\n     * _.lt(\"a\", \"b\") // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.lte|lte}\n     * @see {@link module:lamb.gt|gt}, {@link module:lamb.gte|gte}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function lt (a, b) {\n        return a < b;\n    }\n\n    /**\n     * Verifies that the first given value is less than or equal to the second.\n     * Regarding equality, beware that this is simply a wrapper for the native\n     * <code>&lt;=</code> operator, so <code>-0 === 0</code>.\n     * @example\n     * _.lte(3, 4) // => true\n     * _.lte(3, 3) // => true\n     * _.lte(3, 2) // => false\n     * _.lte(0, -0) // => true\n     * _.lte(-0, 0) // => true\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.lt|lt}\n     * @see {@link module:lamb.gt|gt}, {@link module:lamb.gte|gte}\n     * @see {@link module:lamb.isLT|isLT}, {@link module:lamb.isLTE|isLTE}\n     * @see {@link module:lamb.isGT|isGT}, {@link module:lamb.isGTE|isGTE}\n     * @param {Number|String|Date|Boolean} a\n     * @param {Number|String|Date|Boolean} b\n     * @returns {Boolean}\n     */\n    function lte (a, b) {\n        return a <= b;\n    }\n\n    /**\n     * Returns a predicate that negates the given one.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var isOdd = _.not(isEven);\n     *\n     * isOdd(5) // => true\n     * isOdd(4) // => false\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @param {Function} predicate\n     * @returns {Function}\n     */\n    function not (predicate) {\n        return function () {\n            return !predicate.apply(this, arguments);\n        };\n    }\n\n    /**\n     * Builds a unary function that will check its argument against the given predicate.\n     * If the predicate isn't satisfied, the provided <code>fn</code> function will be\n     * applied to the same value. The received argument is returned as it is otherwise.<br/>\n     * See {@link module:lamb.when|when} for the opposite behaviour.<br/>\n     * It's a shortcut for a common use case of {@link module:lamb.condition|condition},\n     * where its <code>trueFn</code> parameter is the [identity function]{@link module:lamb.identity}.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0};\n     * var halveUnlessIsEven = _.unless(isEven, _.divideBy(2));\n     *\n     * halveUnlessIsEven(5) // => 2.5\n     * halveUnlessIsEven(6) // => 6\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.condition|condition}\n     * @see {@link module:lamb.when|when}\n     * @param {Function} predicate\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function unless (predicate, fn) {\n        return function (value) {\n            return predicate.call(this, value) ? value : fn.call(this, value);\n        };\n    }\n\n    /**\n     * Builds a unary function that will check its argument against the given predicate.\n     * If the predicate is satisfied, the provided <code>fn</code> function will be\n     * applied to the same value. The received argument is returned as it is otherwise.<br/>\n     * See {@link module:lamb.unless|unless} for the opposite behaviour.<br/>\n     * It's a shortcut for a common use case of {@link module:lamb.condition|condition},\n     * where its <code>falseFn</code> parameter is the [identity function]{@link module:lamb.identity}.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var halveIfEven = _.when(isEven, _.divideBy(2));\n     *\n     * halveIfEven(5) // => 5\n     * halveIfEven(6) // => 3\n     *\n     * @memberof module:lamb\n     * @category Logic\n     * @see {@link module:lamb.condition|condition}\n     * @see {@link module:lamb.unless|unless}\n     * @param {Function} predicate\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function when (predicate, fn) {\n        return function (value) {\n            return predicate.call(this, value) ? fn.call(this, value) : value;\n        };\n    }\n\n    lamb.adapter = adapter;\n    lamb.allOf = allOf;\n    lamb.anyOf = anyOf;\n    lamb.areSame = areSame;\n    lamb.areSVZ = areSVZ;\n    lamb.case = case_;\n    lamb.condition = condition;\n    lamb.gt = gt;\n    lamb.gte = gte;\n    lamb.is = is;\n    lamb.isGT = isGT;\n    lamb.isGTE = isGTE;\n    lamb.isLT = isLT;\n    lamb.isLTE = isLTE;\n    lamb.isSVZ = isSVZ;\n    lamb.lt = lt;\n    lamb.lte = lte;\n    lamb.not = not;\n    lamb.unless = unless;\n    lamb.when = when;\n\n    /**\n     * A curried version of {@link module:lamb.sum|sum}.\n     * @example\n     * var add5 = _.add(5);\n     *\n     * _.add5(4) // => 9\n     * _.add5(-2) // => 3\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @function\n     * @see {@link module:lamb.sum|sum}\n     * @param {Number} a\n     * @returns {Function}\n     */\n    var add = _curry2(sum, true);\n\n    /**\n     * \"Clamps\" a number within the given limits, both included.<br/>\n     * The function will convert to number all its parameters before starting any\n     * evaluation, and will return <code>NaN</code> if <code>min</code> is greater\n     * than <code>max</code>.\n     * @example\n     * _.clamp(-5, 0, 10) // => 0\n     * _.clamp(5, 0, 10) // => 5\n     * _.clamp(15, 0, 10) // => 10\n     * _.clamp(0, 0, 10) // => 0\n     * _.clamp(10, 0, 10) // => 10\n     * _.is(_.clamp(-0, 0, 10), -0) // => true\n     * _.clamp(10, 20, 15) // => NaN\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.clampWithin|clampWithin}\n     * @param {Number} n\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function clamp (n, min, max) {\n        n = +n;\n        min = +min;\n        max = +max;\n\n        if (min > max) {\n            return NaN;\n        } else {\n            return n < min ? min : n > max ? max : n;\n        }\n    }\n\n    /**\n     * A curried version of {@link module:lamb.clamp|clamp}, expecting a <code>min</code>\n     * and a <code>max</code> value, that builds a function waiting for the number to clamp.\n     * @example\n     * _.clampWithin(0, 10)(-5) // => 0\n     * _.clampWithin(0, 10)(5) // => 5\n     * _.clampWithin(0, 10)(15) // => 10\n     * _.clampWithin(0, 10)(0) // => 0\n     * _.clampWithin(0, 10)(10) // => 10\n     * _.is(_.clampWithin(0, 10)(-0), -0) // => true\n     * _.clampWithin(20, 15)(10) // => NaN\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @function\n     * @see {@link module:lamb.clamp|clamp}\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Function}\n     */\n    var clampWithin = _makePartial3(clamp);\n\n    /**\n     * A curried version of {@link module:lamb.subtract|subtract} that expects the\n     * subtrahend to build a function waiting for the minuend.\n     * @example\n     * var deduct5 = _.deduct(5);\n     *\n     * deduct5(12) // => 7\n     * deduct5(3) // => -2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @function\n     * @see {@link module:lamb.subtract|subtract}\n     * @param {Number} a\n     * @returns {Function}\n     */\n    var deduct = _curry2(subtract, true);\n\n    /**\n     * Divides two numbers.\n     * @example\n     * _.divide(5, 2) // => 2.5\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.divideBy|divideBy}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function divide (a, b) {\n        return a / b;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.divide|divide} that expects a divisor to\n     * build a function waiting for the dividend.\n     * @example\n     * var halve = divideBy(2);\n     *\n     * halve(10) // => 5\n     * halve(5) // => 2.5\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @function\n     * @see {@link module:lamb.divide|divide}\n     * @param {Number} a\n     * @returns {Function}\n     */\n    var divideBy = _curry2(divide, true);\n\n    /**\n     * Generates a sequence of values of the desired length with the provided iteratee.\n     * The values being iterated, and received by the iteratee, are the results generated so far.\n     * @example\n     * var fibonacci = function (n, idx, results) {\n     *     return n + (results[idx - 1] || 0);\n     * };\n     *\n     * _.generate(1, 10, fibonacci) // => [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.range|range}\n     * @param {*} start - The starting value\n     * @param {Number} len - The desired length for the sequence\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Array}\n     */\n    function generate (start, len, iteratee) {\n        var result = [start];\n\n        for (var i = 0, limit = len - 1; i < limit; i++) {\n            result.push(iteratee(result[i], i, result));\n        }\n\n        return result;\n    }\n\n    /**\n     * Verifies whether the received value is a finite number.<br/>\n     * Behaves almost as a shim of ES6's [Number.isFinite]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite},\n     * but with a difference: it will return <code>true</code> even for Number object's instances.\n     * @example\n     * _.isFinite(5) // => true\n     * _.isFinite(new Number(5)) // => true\n     * _.isFinite(Infinity) // => false\n     * _.isFinite(-Infinity) // => false\n     * _.isFinite(\"5\") // => false\n     * _.isFinite(NaN) // => false\n     * _.isFinite(null) // => false\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @alias isFinite\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isFinite_ (value) {\n        return type(value) === \"Number\" && isFinite(value);\n    }\n\n    /**\n     * Verifies whether the received value is a number and an integer.\n     * Behaves almost as a shim of ES6's [Number.isInteger]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger},\n     * but with a difference: it will return <code>true</code> even for Number object's instances.\n     * @example\n     * _.isInteger(5) // => true\n     * _.isInteger(new Number(5)) // => true\n     * _.isInteger(2.5) // => false\n     * _.isInteger(Infinity) // => false\n     * _.isInteger(-Infinity) // => false\n     * _.isInteger(\"5\") // => false\n     * _.isInteger(NaN) // => false\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.isSafeInteger|isSafeInteger}\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isInteger (value) {\n        return type(value) === \"Number\" && value % 1 === 0;\n    }\n\n    /**\n     * Verifies whether the received value is a \"safe integer\", meaning that is a number and that\n     * can be exactly represented as an IEEE-754 double precision number.\n     * The safe integers consist of all integers from -(2<sup>53</sup> - 1) inclusive to\n     * 2<sup>53</sup> - 1 inclusive.<br/>\n     * Behaves almost as a shim of ES6's [Number.isSafeInteger]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger},\n     * but with a difference: it will return <code>true</code> even for Number object's instances.\n     * @example\n     * _.isSafeInteger(5) // => true\n     * _.isSafeInteger(new Number(5)) // => true\n     * _.isSafeInteger(Math.pow(2, 53) - 1) // => true\n     * _.isSafeInteger(Math.pow(2, 53)) // => false\n     * _.isSafeInteger(2e32) // => false\n     * _.isSafeInteger(2.5) // => false\n     * _.isSafeInteger(Infinity) // => false\n     * _.isSafeInteger(-Infinity) // => false\n     * _.isSafeInteger(\"5\") // => false\n     * _.isSafeInteger(NaN) // => false\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.isInteger|isInteger}\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isSafeInteger (value) {\n        return isInteger(value) && Math.abs(value) <= 9007199254740991;\n    }\n\n    /**\n     * Performs the modulo operation and should not be confused with the\n     * {@link module:lamb.remainder|remainder}.\n     * The function performs a floored division to calculate the result and not\n     * a truncated one, hence the sign of the dividend is not kept, unlike the\n     * {@link module:lamb.remainder|remainder}.\n     * @example\n     * _.modulo(5, 3) // => 2\n     * _.remainder(5, 3) // => 2\n     *\n     * _.modulo(-5, 3) // => 1\n     * _.remainder(-5, 3) // => -2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.remainder|remainder}\n     * @see [Modulo operation on Wikipedia]{@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function modulo (a, b) {\n        return a - (b * Math.floor(a / b));\n    }\n\n    /**\n     * Multiplies two numbers.\n     * @example\n     * _.multiply(5, 3) // => 15\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.multiplyBy|multiplyBy}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function multiply (a, b) {\n        return a * b;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.multiply|multiply}.\n     * @example\n     * var double = _.multiplyBy(2);\n     *\n     * double(5) // => 10\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @function\n     * @see {@link module:lamb.multiply|multiply}\n     * @param {Number} a\n     * @returns {Function}\n     */\n    var multiplyBy = _curry2(multiply, true);\n\n    /**\n     * Generates a random integer between two given integers, both included.\n     * Note that no safety measure is taken if the provided arguments aren't integers, so\n     * you may end up with unexpected (not really) results.\n     * For example <code>randomInt(0.1, 1.2)</code> could be <code>2</code>.\n     * @example\n     *\n     * _.randomInt(1, 10) // => an integer >=1 && <= 10\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @param {Number} min\n     * @param {Number} max\n     * @returns {Number}\n     */\n    function randomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    /**\n     * Generates an arithmetic progression of numbers starting from <code>start</code> up to,\n     * but not including, <code>limit</code>, using the given <code>step</code>.\n     * @example\n     * _.range(2, 10) // => [2, 3, 4, 5, 6, 7, 8, 9]\n     * _.range(2, 10, 0) // => [2]\n     * _.range(1, -10, -2) // => [1, -1, -3, -5, -7, -9]\n     * _.range(1, -10, 2) // => [1]\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.generate|generate}\n     * @param {Number} start\n     * @param {Number} limit\n     * @param {Number} [step=1]\n     * @returns {Number[]}\n     */\n    function range (start, limit, step) {\n        if (step === 0 || arguments.length < 2) {\n            return [start];\n        }\n\n        if (!step) {\n            step = 1;\n        }\n\n        var len = Math.max(Math.ceil((limit - start) / step), 0);\n\n        return generate(start, len, add(step));\n    }\n\n    /**\n     * Gets the remainder of the division of two numbers.\n     * Not to be confused with the {@link module:lamb.modulo|modulo} as the remainder\n     * keeps the sign of the dividend and may lead to some unexpected results.\n     * @example\n     * // example of wrong usage of the remainder\n     * // (in this case the modulo operation should be used)\n     * var isOdd = function (n) { return _.remainder(n, 2) === 1; };\n     * isOdd(-3) // => false as -3 % 2 === -1\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.modulo|modulo}\n     * @see [Modulo operation on Wikipedia]{@link http://en.wikipedia.org/wiki/Modulo_operation}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function remainder (a, b) {\n        return a % b;\n    }\n\n    /**\n     * Subtracts two numbers.\n     * @example\n     * _.subtract(5, 3) // => 2\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.deduct|deduct}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function subtract (a, b) {\n        return a - b;\n    }\n\n    /**\n     * Sums two numbers.\n     * @example\n     * _.sum(4, 5) // => 9\n     *\n     * @memberof module:lamb\n     * @category Math\n     * @see {@link module:lamb.add|add}\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {Number}\n     */\n    function sum (a, b) {\n        return a + b;\n    }\n\n    lamb.add = add;\n    lamb.clamp = clamp;\n    lamb.clampWithin = clampWithin;\n    lamb.deduct = deduct;\n    lamb.divide = divide;\n    lamb.divideBy = divideBy;\n    lamb.generate = generate;\n    lamb.isFinite = isFinite_;\n    lamb.isInteger = isInteger;\n    lamb.isSafeInteger = isSafeInteger;\n    lamb.modulo = modulo;\n    lamb.multiply = multiply;\n    lamb.multiplyBy = multiplyBy;\n    lamb.randomInt = randomInt;\n    lamb.range = range;\n    lamb.remainder = remainder;\n    lamb.subtract = subtract;\n    lamb.sum = sum;\n\n    /**\n     * Accepts a constructor and builds a predicate expecting an object,\n     * which will be tested to verify whether the prototype of the constructor\n     * is in its prototype chain.<br/>\n     * Wraps in a convenient way the native\n     * [instanceof]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof} operator.\n     * @example\n     * function SomeObjA () {}\n     *\n     * var a = new SomeObjA();\n     * var sObj = new String(\"foo\");\n     * var s = \"foo\";\n     *\n     * _.isInstanceOf(Object)(a) // => true\n     * _.isInstanceOf(SomeObjA)(a) // => true\n     *\n     * _.isInstanceOf(Object)(sObj) // => true\n     * _.isInstanceOf(String)(sObj) // => true\n     *\n     * _.isInstanceOf(Object)(s) // => false\n     * _.isInstanceOf(String)(s) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isType|isType}\n     * @param {*} constructor\n     * @returns {Function}\n     */\n    function isInstanceOf (constructor) {\n        return function (obj) {\n            return obj instanceof constructor;\n        };\n    }\n\n    /**\n     * Verifies if a value is <code>null</code> or <code>undefined</code>.\n     * @example\n     * _.isNil(NaN) // => false\n     * _.isNil({}) // => false\n     * _.isNil(null) // => true\n     * _.isNil(void 0) // => true\n     * _.isNil() // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNull|isNull}\n     * @see {@link module:lamb.isUndefined|isUndefined}\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isNil (value) {\n        return isNull(value) || isUndefined(value);\n    }\n\n    /**\n     * Verifies if a value is <code>null</code>.\n     * @example\n     * _.isNull(null) // => true\n     * _.isNull(void 0) // => false\n     * _.isNull(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNil|isNil} if you want to check for <code>undefined</code> too.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isNull (value) {\n        return value === null;\n    }\n\n    /**\n     * Builds a predicate that expects a value to check against the specified type.\n     * @example\n     * var isString = _.isType(\"String\");\n     *\n     * isString(\"Hello\") // => true\n     * isString(new String(\"Hi\")) // => true\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.type|type}\n     * @param {String} typeName\n     * @returns {Function}\n     */\n    function isType (typeName) {\n        return function (value) {\n            return type(value) === typeName;\n        };\n    }\n\n    /**\n     * Verifies if a value is <code>undefined</code>.\n     * @example\n     * _.isUndefined(null) // => false\n     * _.isUndefined(void 0) // => true\n     * _.isUndefined(false) // => false\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isNil|isNil} if you want to check for <code>null</code> too.\n     * @param {*} value\n     * @returns {Boolean}\n     */\n    function isUndefined (value) {\n        return value === void 0;\n    }\n\n    /**\n     * Retrieves the \"type tag\" from the given value.\n     * @example\n     * var x = 5;\n     * var y = new Number(5);\n     *\n     * typeof x // => \"number\"\n     * typeof y // => \"object\"\n     * _.type(x) // => \"Number\"\n     * _.type(y) // => \"Number\"\n     *\n     * _.type(Object.prototype.toString) // => \"Function\"\n     * _.type(/a/) // => \"RegExp\"\n     *\n     * @memberof module:lamb\n     * @category Type\n     * @see {@link module:lamb.isType|isType}\n     * @param {*} value\n     * @returns {String}\n     */\n    function type (value) {\n        return _objectProto.toString.call(value).slice(8, -1);\n    }\n\n    lamb.isInstanceOf = isInstanceOf;\n    lamb.isNil = isNil;\n    lamb.isNull = isNull;\n    lamb.isType = isType;\n    lamb.isUndefined = isUndefined;\n    lamb.type = type;\n\n    /**\n     * A curried version of {@link module:lamb.getIndex|getIndex} that uses the provided index\n     * to build a function expecting the array-like object holding the element we want to retrieve.\n     * @example\n     * var getFifthElement = _.getAt(4);\n     *\n     * getFifthElement([1, 2, 3, 4, 5]) // => 5\n     * getFifthElement(\"foo bar\") // => \"b\"\n     * getFifthElement([]) // => undefined\n     * getFifthElement(\"foo\") // => undefined\n     *\n     * @example <caption>Using negative indexes:</caption>\n     * _.getAt(-2)([1, 2, 3]) // => 2\n     * _.getAt(-3)(\"foo\") // => \"f\"\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.getIndex|getIndex}\n     * @see {@link module:lamb.head|head} and {@link module:lamb.last|last} for common use cases shortcuts.\n     * @param {Number} index\n     * @returns {Function}\n     */\n    var getAt = _curry2(getIndex, true);\n\n    /**\n     * Returns the value of the object property with the given key.\n     * @example\n     * var user = {name: \"John\"};\n     *\n     * _.getIn(user, \"name\") // => \"John\";\n     * _.getIn(user, \"surname\") // => undefined\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getKey|getKey}\n     * @see {@link module:lamb.getPath|getPath}, {@link module:lamb.getPathIn|getPathIn}\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {*}\n     */\n    function getIn (obj, key) {\n        return obj[key];\n    }\n\n    /**\n     * Retrieves the element at the given index in an array-like object.<br/>\n     * Like {@link module:lamb.slice|slice} the index can be negative.<br/>\n     * If the index isn't supplied, or if its value isn't an integer within the array-like bounds,\n     * the function will return <code>undefined</code>.<br/>\n     * <code>getIndex</code> will throw an exception when receives <code>null</code> or\n     * <code>undefined</code> in place of an array-like object, but returns <code>undefined</code>\n     * for any other value.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.getIndex(arr, 1) // => 2\n     * _.getIndex(arr, -1) // => 5\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.getAt|getAt}\n     * @see {@link module:lamb.head|head} and {@link module:lamb.last|last} for common use cases shortcuts.\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @returns {*}\n     */\n    function getIndex (arrayLike, index) {\n        var idx = _toNaturalIndex(index, _toArrayLength(arrayLike.length));\n\n        return isNaN(idx) ? void 0 : arrayLike[idx];\n    }\n\n    /**\n     * A curried version of {@link module:lamb.getIn|getIn}.<br/>\n     * Receives a property name and builds a function expecting the object from which we want to retrieve\n     * the property.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {name: \"jane\"};\n     * var getName = _.getKey(\"name\");\n     *\n     * getName(user1) // => \"john\"\n     * getName(user2) // => \"jane\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.getIn|getIn}\n     * @see {@link module:lamb.getPath|getPath}, {@link module:lamb.getPathIn|getPathIn}\n     * @param {String} key\n     * @returns {Function}\n     */\n    var getKey = _curry2(getIn, true);\n\n    /**\n     * Builds a partial application of {@link module:lamb.getPathIn|getPathIn} with the given\n     * path and separator, expecting the object to act upon.<br/>\n     * @example\n     *  var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         \"user.name\": \"jdoe\",\n     *         password: \"abc123\"\n     *     }\n     * };\n     *\n     * var getPwd = _.getPath(\"login.password\");\n     * var getUsername = _.getPath(\"login/user.name\", \"/\");\n     *\n     * getPwd(user) // => \"abc123\";\n     * getUsername(user) // => \"jdoe\"\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.getPathIn|getPathIn}\n     * @see {@link module:lamb.getIn|getIn}, {@link module:lamb.getKey|getKey}\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    var getPath = _makePartial3(getPathIn);\n\n    /**\n     * Gets a nested property value from an object using the given path.<br/>\n     * The path is a string with property names separated by dots by default, but\n     * it can be customised with the optional third parameter.<br/>\n     * You can use integers in the path, even negative ones, to refer to array-like\n     * object indexes, but the priority will be given to existing object keys:\n     * the last example explains this particular case.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         \"user.name\": \"jdoe\",\n     *         password: \"abc123\"\n     *     },\n     *     scores: [\n     *         {id: 1, value: 10},\n     *         {id: 2, value: 20},\n     *         {id: 3, value: 30}\n     *     ]\n     * };\n     *\n     * _.getPathIn(user, \"name\") // => \"John\"\n     * _.getPathIn(user, \"login.password\") // => \"abc123\";\n     * _.getPathIn(user, \"login/user.name\", \"/\") // => \"jdoe\"\n     * _.getPathIn(user, \"name.foo\") // => undefined\n     * _.getPathIn(user, \"name.foo.bar\") // => undefined\n     *\n     * @example <caption>Accessing array-like objects indexes:</caption>\n     * _.getPathIn(user, \"login.password.1\") // => \"b\"\n     * _.getPathIn(user, \"scores.0\") // => {id: 1, value: 10}\n     * _.getPathIn(user, \"scores.-1.value\") // => 30\n     *\n     * @example <caption>Priority will be given to existing object keys over indexes:</caption>\n     * _.getPathIn(user, \"scores.-1\") // => {id: 3, value: 30}\n     *\n     * // let's do something funny\n     * user.scores[\"-1\"] = \"foo bar\";\n     *\n     * _.getPathIn(user, \"scores.-1\") // => \"foo bar\";\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.getPath|getPath}\n     * @see {@link module:lamb.getIn|getIn}, {@link module:lamb.getKey|getKey}\n     * @param {Object|ArrayLike} obj\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {*}\n     */\n    function getPathIn (obj, path, separator) {\n        return _getPathInfo(obj, _toPathParts(path, separator), true).target;\n    }\n\n    /**\n     * Retrieves the first element of an array-like object.<br/>\n     * Just a common use case of {@link module:lamb.getAt|getAt} exposed for convenience.\n     * @example\n     * _.head([1, 2, 3]) // => 1\n     * _.head(\"hello\") // => \"h\"\n     * _.head([]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.last|last}\n     * @see {@link module:lamb.getIndex|getIndex}, {@link module:lamb.getAt|getAt}\n     * @param {ArrayLike} arrayLike\n     * @returns {*}\n     */\n    var head = getAt(0);\n\n    /**\n     * Retrieves the last element of an array-like object.<br/>\n     * Just a common use case of {@link module:lamb.getAt|getAt} exposed for convenience.\n     * @example\n     * _.last([1, 2, 3]) // => 3\n     * _.last(\"hello\") // => \"o\"\n     * _.last([]) // => undefined\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.head|head}\n     * @see {@link module:lamb.getIndex|getIndex}, {@link module:lamb.getAt|getAt}\n     * @param {ArrayLike} arrayLike\n     * @returns {*}\n     */\n    var last = getAt(-1);\n\n    /**\n     * Builds a function that creates a copy of an array-like object with the given\n     * index changed to the desired value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function\n     * will return a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.setAt(2, 99)(arr) // => [1, 2, 99, 4, 5]\n     * arr // => [1, 2, 3, 4, 5]\n     *\n     * _.setAt(10, 99)(arr) // => [1, 2, 3, 4, 5] (not a reference to `arr`)\n     *\n     * @example <caption>Using negative indexes:</caption>\n     * _.setAt(-1, 99)(arr) // => [1, 2, 3, 4, 99]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.setIndex|setIndex}\n     * @param {Number} index\n     * @param {*} value\n     * @returns {Function}\n     */\n    var setAt = _makePartial3(_setIndex);\n\n    /**\n     * Sets the specified key to the given value in a copy of the provided object.<br/>\n     * All the remaining enumerable keys of the source object will be simply copied in the\n     * result object without breaking references.<br/>\n     * If the specified key is not part of the source object, it will be added to the\n     * result.<br/>\n     * The main purpose of the function is to work on simple plain objects used as\n     * data structures, such as JSON objects, and makes no effort to play nice with\n     * objects created from an OOP perspective (it's not worth it).<br/>\n     * For example the prototype of the result will be <code>Object</code>'s regardless\n     * of the <code>source</code>'s one.\n     * @example\n     * var user = {name: \"John\", surname: \"Doe\", age: 30};\n     *\n     * _.setIn(user, \"name\", \"Jane\") // => {name: \"Jane\", surname: \"Doe\", age: 30}\n     * _.setIn(user, \"gender\", \"male\") // => {name: \"John\", surname: \"Doe\", age: 30, gender: \"male\"}\n     *\n     * // `user` still is {name: \"John\", surname: \"Doe\", age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setKey|setKey}\n     * @see {@link module:lamb.setPath|setPath}, {@link module:lamb.setPathIn|setPathIn}\n     * @param {Object} source\n     * @param {String} key\n     * @param {*} value\n     * @returns {Object}\n     */\n    function setIn (source, key, value) {\n        if (isNil(source)) {\n            throw _makeTypeErrorFor(source, \"object\");\n        }\n\n        return _setIn(source, key, value);\n    }\n\n    /**\n     * Creates a copy of an array-like object with the given index changed to\n     * the desired value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function\n     * will return a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [1, 2, 3];\n     *\n     * _.setIndex(arr, 1, 99) // => [1, 99, 3]\n     * _.setIndex(arr, -1, 99) // => [1, 2, 99]\n     * _.setIndex(arr, 10, 99) // => [1, 2, 3] (not a reference to `arr`)\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.setAt|setAt}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @param {*} value\n     * @returns {Array}\n     */\n    var setIndex = aritize(_setIndex, 3);\n\n    /**\n     * Builds a partial application of {@link module:lamb.setIn|setIn} with the provided\n     * <code>key</code> and <code>value</code>.<br/>\n     * The resulting function expects the object to act upon.<br/>\n     * Please refer to {@link module:lamb.setIn|setIn}'s description for explanations about\n     * how the copy of the source object is made.\n     * @example\n     * var user = {name: \"John\", surname: \"Doe\", age: 30};\n     * var setAgeTo40 = _.setKey(\"age\", 40);\n     *\n     * setAgeTo40(user) // => {name: \"john\", surname: \"doe\", age: 40}\n     *\n     * // `user` still is {name: \"John\", surname: \"Doe\", age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.setIn|setIn}\n     * @see {@link module:lamb.setPath|setPath}, {@link module:lamb.setPathIn|setPathIn}\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    var setKey = _makePartial3(setIn);\n\n    /**\n     * Builds a partial application of {@link module:lamb.setPathIn|setPathIn} expecting the\n     * object to act upon.<br/>\n     * See {@link module:lamb.setPathIn|setPathIn} for more details and examples.\n     * @example\n     * var user = {id: 1, status: {active: false}};\n     * var activate = _.setPath(\"status.active\", true);\n     *\n     * activate(user) // => {id: 1, status: {active: true}}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.setPathIn|setPathIn}\n     * @see {@link module:lamb.setIn|setIn}, {@link module:lamb.setKey|setKey}\n     * @param {String} path\n     * @param {*} value\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    var setPath = _makePartial4(setPathIn);\n\n    /**\n     * Allows to change a nested value in a copy of the provided object.<br/>\n     * The function will delegate the \"set action\" to {@link module:lamb.setIn|setIn} or\n     * {@link module:lamb.setAt|setAt} depending on the value encountered in the path,\n     * so please refer to the documentation of those functions for specifics about the\n     * implementation.<br/>\n     * Note anyway that the distinction will be between <code>Array</code>s, delegated\n     * to {@link module:lamb.setAt|setAt}, and everything else (including array-like objects),\n     * which will be delegated to {@link module:lamb.setIn|setIn}.<br/>\n     * As a result of that, array-like objects will be converted to objects having numbers as keys\n     * and paths targeting non-object values will be converted to empty objects.<br/>\n     * You can anyway target array elements using integers in the path, even negative ones, but\n     * the priority will be given to existing, and enumerable, object keys.<br/>\n     * Non-enumerable properties encountered in the path will be considered as non-existent properties.<br/>\n     * Like {@link module:lamb.getPathIn|getPathIn} or {@link module:lamb.getPath|getPath} you can\n     * use custom path separators.\n     * @example\n     * var user = {id: 1, status: {active : false, scores: [2, 4, 6]}};\n     *\n     * _.setPathIn(user, \"status.active\", true) // => {id: 1, status: {active : true, scores: [2, 4, 6]}}\n     *\n     * @example <caption>Targeting arrays:</caption>\n     * _.setPathIn(user, \"status.scores.0\", 8) // => {id: 1, status: {active : false, scores: [8, 4, 6]}}\n     *\n     * // you can use negative indexes as well\n     * _.setPathIn(user, \"status.scores.-1\", 8) // => {id: 1, status: {active : false, scores: [2, 4, 8]}}\n     *\n     * @example <caption>Arrays can also be part of the path and not necessarily its target:</caption>\n     * var user = {id: 1, scores: [\n     *     {value: 2, year: \"2000\"},\n     *     {value: 4, year: \"2001\"},\n     *     {value: 6, year: \"2002\"}\n     * ]};\n     *\n     * var newUser = _.setPathIn(user, \"scores.0.value\", 8);\n     * // \"newUser\" holds:\n     * // {id: 1, scores: [\n     * //     {value: 8, year: \"2000\"},\n     * //     {value: 4, year: \"2001\"},\n     * //     {value: 6, year: \"2002\"}\n     * // ]}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.setPath|setPath}\n     * @see {@link module:lamb.setIn|setIn}, {@link module:lamb.setKey|setKey}\n     * @param {Object|Array} source\n     * @param {String} path\n     * @param {*} value\n     * @param {String} [separator=\".\"]\n     * @returns {Object|Array}\n     */\n    function setPathIn (source, path, value, separator) {\n        if (isNil(source)) {\n            throw _makeTypeErrorFor(source, \"object\");\n        }\n\n        return _setPathIn(source, _toPathParts(path, separator), value);\n    }\n\n    /**\n     * Builds a function that creates a copy of an array-like object with the given index\n     * changed by applying the provided function to its value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function will return\n     * a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [\"a\", \"b\", \"c\"];\n     * var toUpperCase = _.invoker(\"toUpperCase\");\n     *\n     * _.updateAt(1, toUpperCase)(arr) // => [\"a\", \"B\", \"c\"]\n     * _.updateAt(-1, toUpperCase)(arr) // => [\"a\", \"b\", \"C\"]\n     * _.updateAt(10, toUpperCase)(arr) // => [\"a\", \"b\", \"c\"] (not a reference to `arr`)\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.updateIndex|updateIndex}\n     * @param {Number} index\n     * @param {Function} updater\n     * @returns {Function}\n     */\n    function updateAt (index, updater) {\n        return function (arrayLike) {\n            return _setIndex(arrayLike, index, null, updater);\n        };\n    }\n\n    /**\n     * Creates a copy of the given object having the desired key value updated by applying\n     * the provided function to it.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setIn|setIn}; a copy of the\n     * <code>source</code> is returned otherwise.\n     * @example\n     * var user = {name: \"John\", visits: 2};\n     * var toUpperCase = _.invoker(\"toUpperCase\");\n     *\n     * _.updateIn(user, \"name\", toUpperCase) // => {name: \"JOHN\", visits: 2}\n     * _.updateIn(user, \"surname\", toUpperCase) // => {name: \"John\", visits: 2}\n     *\n     * @example <caption>Non-enumerable properties will be treated as non-existent:</caption>\n     * var user = Object.create({name: \"John\"}, {visits: {value: 2}});\n     *\n     * _.updateIn(user, \"visits\", _.add(1)) // => {name: \"John\", visits: 2}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.updateKey|updateKey}\n     * @see {@link module:lamb.updatePath|updatePath}, {@link module:lamb.updatePathIn|updatePathIn}\n     * @param {Object} source\n     * @param {String} key\n     * @param {Function} updater\n     * @returns {Object}\n     */\n    function updateIn (source, key, updater) {\n        return _isEnumerable(source, key) ?\n            _setIn(source, key, updater(source[key])) :\n            _merge(enumerables, source);\n    }\n\n    /**\n     * Creates a copy of an array-like object with the given index changed by applying the\n     * provided function to its value.<br/>\n     * If the index is not an integer or if it's out of bounds, the function will return\n     * a copy of the original array.<br/>\n     * Negative indexes are allowed.\n     * @example\n     * var arr = [\"a\", \"b\", \"c\"];\n     * var toUpperCase = _.invoker(\"toUpperCase\");\n     *\n     * _.updateIndex(arr, 1, toUpperCase) // => [\"a\", \"B\", \"c\"]\n     * _.updateIndex(arr, -1, toUpperCase) // => [\"a\", \"b\", \"C\"]\n     * _.updateIndex(arr, 10, toUpperCase) // => [\"a\", \"b\", \"c\"] (not a reference to `arr`)\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.updateAt|updateAt}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @param {Function} updater\n     * @returns {Array}\n     */\n    var updateIndex = partial(_setIndex, _, _, null, _);\n\n    /**\n     * Builds a partial application of {@link module:lamb.updateIn|updateIn} with the provided\n     * <code>key</code> and <code>updater</code>, expecting the object to act upon.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setIn|setIn}; a copy of the\n     * <code>source</code> is returned otherwise.\n     * @example\n     * var user = {name: \"John\", visits: 2};\n     * var incrementVisits = _.updateKey(\"visits\", _.add(1));\n     *\n     * incrementVisits(user) // => {name: \"John\", visits: 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.updateIn|updateIn}\n     * @see {@link module:lamb.updatePath|updatePath}, {@link module:lamb.updatePathIn|updatePathIn}\n     * @param {String} key\n     * @param {Function} updater\n     * @returns {Function}\n     */\n    var updateKey = _makePartial3(updateIn);\n\n    /**\n     * Builds a partial application of {@link module:lamb.updatePathIn|updatePathIn}\n     * expecting the object to act upon.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setPathIn|setPathIn}; a copy of the\n     * <code>source</code> is returned otherwise.<br/>\n     * Like the other \"path\" functions, negative indexes can be used to access array elements, but\n     * the priority will be given to existing, and enumerable, object keys.\n     * @example\n     * var user = {id: 1, status: {scores: [2, 4, 6], visits: 0}};\n     * var incrementScores = _.updatePath(\"status.scores\", _.mapWith(_.add(1)))\n     *\n     * incrementScores(user) // => {id: 1, status: {scores: [3, 5, 7], visits: 0}}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.updatePathIn|updatePathIn}\n     * @see {@link module:lamb.updateIn|updateIn}, {@link module:lamb.updateKey|updateKey}\n     * @param {String} path\n     * @param {Function} updater\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    var updatePath = _makePartial4(updatePathIn, false);\n\n    /**\n     * Allows to change a nested value in a copy of the given object by applying the provided\n     * function to it.<br/>\n     * This function is meant for updating existing enumerable properties, and for those it\n     * will delegate the \"set action\" to {@link module:lamb.setPathIn|setPathIn}; a copy of the\n     * <code>source</code> is returned otherwise.<br/>\n     * Like the other \"path\" functions, negative indexes can be used to access array elements, but\n     * the priority will be given to existing, and enumerable, object keys.\n     * @example\n     * var user = {id: 1, status: {scores: [2, 4, 6], visits: 0}};\n     * var inc = _.add(1);\n     *\n     * _.updatePathIn(user, \"status.visits\", inc) // => {id: 1, status: {scores: [2, 4, 6]}, visits: 1}\n     *\n     * @example <caption>Targeting arrays:</caption>\n     * _.updatePathIn(user, \"status.scores.0\", inc) // => {id: 1, status: {scores: [3, 4, 6], visits: 0}}\n     *\n     * // you can use negative indexes as well\n     * _.updatePathIn(user, \"status.scores.-1\", inc) // => {id: 1, status: {scores: [2, 4, 7], visits: 0}}\n     *\n     * @example <caption>Arrays can also be part of the path and not necessarily its target:</caption>\n     * var user = {id: 1, scores: [\n     *     {value: 2, year: \"2000\"},\n     *     {value: 4, year: \"2001\"},\n     *     {value: 6, year: \"2002\"}\n     * ]};\n     *\n     * var newUser = _.updatePathIn(user, \"scores.0.value\", increment);\n     * // \"newUser\" holds:\n     * // {id: 1, scores: [\n     * //     {value: 3, year: \"2000\"},\n     * //     {value: 4, year: \"2001\"},\n     * //     {value: 6, year: \"2002\"}\n     * // ]}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.updatePath|updatePath}\n     * @see {@link module:lamb.updateIn|updateIn}, {@link module:lamb.updateKey|updateKey}\n     * @param {Object|Array} source\n     * @param {String} path\n     * @param {Function} updater\n     * @param {String} [separator=\".\"]\n     * @returns {Object|Array}\n     */\n    function updatePathIn (source, path, updater, separator) {\n        var parts = _toPathParts(path, separator);\n        var pathInfo = _getPathInfo(source, parts, false);\n\n        if (pathInfo.isValid) {\n            return _setPathIn(source, parts, updater(pathInfo.target));\n        } else {\n            return Array.isArray(source) ? slice(source, 0, source.length) : _merge(enumerables, source);\n        }\n    }\n\n    lamb.getAt = getAt;\n    lamb.getIn = getIn;\n    lamb.getIndex = getIndex;\n    lamb.getKey = getKey;\n    lamb.getPath = getPath;\n    lamb.getPathIn = getPathIn;\n    lamb.head = head;\n    lamb.last = last;\n    lamb.setAt = setAt;\n    lamb.setIn = setIn;\n    lamb.setIndex = setIndex;\n    lamb.setKey = setKey;\n    lamb.setPath = setPath;\n    lamb.setPathIn = setPathIn;\n    lamb.updateAt = updateAt;\n    lamb.updateIn = updateIn;\n    lamb.updateIndex = updateIndex;\n    lamb.updateKey = updateKey;\n    lamb.updatePath = updatePath;\n    lamb.updatePathIn = updatePathIn;\n\n    /**\n     * A curried version of {@link module:lamb.appendTo|appendTo} that uses the value to append\n     * to build a function expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4];\n     *\n     * _.append(5)(arr) // => [1, 2, 3, 4, 5]\n     * _.append([5])(arr) // => [1, 2, 3, 4, [5]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.appendTo|appendTo}\n     * @see {@link module:lamb.insert|insert}, {@link module:lamb.insertAt|insertAt}\n     * @param {*} value\n     * @returns {Function}\n     */\n    var append = _curry2(appendTo, true);\n\n    /**\n     * Appends the given value at the end of a copy of the provided array-like object.\n     * @example\n     * var arr = [1, 2, 3, 4];\n     *\n     * _.appendTo(arr, 5) // => [1, 2, 3, 4, 5]\n     * _.appendTo(arr, [5]) // => [1, 2, 3, 4, [5]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.append|append}\n     * @see {@link module:lamb.insert|insert}, {@link module:lamb.insertAt|insertAt}\n     * @param {ArrayLike} arrayLike\n     * @param {*} value\n     * @returns {Array}\n     */\n    function appendTo (arrayLike, value) {\n        return slice(arrayLike, 0, arrayLike.length).concat([value]);\n    }\n\n    /**\n     * Returns an array of items present only in the first of the given arrays.<br/>\n     * Note that this function uses the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 4, 5];\n     * var a3 = [4, 5, 3, 1];\n     *\n     * _.difference(a1, a2) // => [1, 3]\n     * _.difference(a1, a2, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {Array} array\n     * @param {...Array} other\n     * @returns {Array}\n     */\n    function difference (array) {\n        var rest = flatMap(_argsTail.apply(null, arguments), drop(0));\n        var isInRest = partial(isIn, rest, _, 0);\n\n        return filter(array, not(isInRest));\n    }\n\n    /**\n     * A curried version of {@link module:lamb.dropFrom|dropFrom} that expects the number of elements\n     * to drop to build a function waiting for the list to take the elements from.<br/>\n     * See the note and examples for {@link module:lamb.dropFrom|dropFrom} about passing a\n     * negative <code>n</code>.\n     * @example\n     * var drop2 = _.drop(2);\n     *\n     * drop2([1, 2, 3, 4, 5]) // => [3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.dropFrom|dropFrom}\n     * @see {@link module:lamb.takeFrom|takeFrom}, {@link module:lamb.take|take}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var drop = _curry2(dropFrom, true);\n\n    /**\n     * Builds an array without the first <code>n</code> elements of the given array or array-like object.\n     * Note that, being this only a shortcut for a specific use case of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.dropFrom(arr, 2) // => [3, 4, 5]\n     * _.dropFrom(arr, -1) // => [5]\n     * _.dropFrom(arr, -10) // => [1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.drop|drop}\n     * @see {@link module:lamb.takeFrom|takeFrom}, {@link module:lamb.take|take}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    function dropFrom (arrayLike, n) {\n        return slice(arrayLike, n, arrayLike.length);\n    }\n\n    /**\n     * Builds a function that drops the first <code>n</code> elements satisfying a predicate\n     * from an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var dropWhileIsEven = _.dropWhile(isEven);\n     *\n     * dropWhileIsEven([2, 4, 6, 8]) // => []\n     * dropWhileIsEven([2, 4, 7, 8]) // => [7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.takeWhile|takeWhile}\n     * @see {@link module:lamb.dropFrom|dropFrom}, {@link module:lamb.drop|drop}\n     * @see {@link module:lamb.takeFrom|takeFrom}, {@link module:lamb.take|take}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    function dropWhile (predicate) {\n        return function (arrayLike) {\n            return slice(arrayLike, _getNumConsecutiveHits(arrayLike, predicate), arrayLike.length);\n        };\n    }\n\n    /**\n     * Similar to {@link module:lamb.map|map}, but if the mapping function returns an array this will\n     * be concatenated, rather than pushed, to the final result.\n     * @example <caption>Showing the difference with <code>map</code>:</caption>\n     * var words = [\"foo\", \"bar\"];\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     *\n     * _.map(words, toCharArray) // => [[\"f\", \"o\", \"o\"], [\"b\", \"a\", \"r\"]]\n     * _.flatMap(words, toCharArray) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.flatMapWith|flatMapWith}\n     * @see {@link module:lamb.map|map}, {@link module:lamb.mapWith|mapWith}\n     * @param {Array} array\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Array}\n     */\n    function flatMap (array, iteratee) {\n        return reduce(array, function (result, el, idx, arr) {\n            var v = iteratee(el, idx, arr);\n\n            if (!Array.isArray(v)) {\n                v = [v];\n            }\n\n            for (var i = 0, len = v.length, rLen = result.length; i < len; i++) {\n                result[rLen + i] = v[i];\n            }\n\n            return result;\n        }, []);\n    }\n\n    /**\n     * A curried version of {@link module:lamb.flatMap|flatMap} that uses provided iteratee\n     * to build a function expecting the array to act upon.\n     * @example\n     * var toCharArray = function (s) { return s.split(\"\"); };\n     * var wordsToCharArray = _.flatMapWith(toCharArray);\n     *\n     * wordsToCharArray([\"foo\", \"bar\"]) // => [\"f\", \"o\", \"o\", \"b\", \"a\", \"r\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.flatMap|flatMap}\n     * @see {@link module:lamb.map|map}, {@link module:lamb.mapWith|mapWith}\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Function}\n     */\n    var flatMapWith = _curry2(flatMap, true);\n\n    /**\n     * Flattens an array.\n     * @example <caption>Showing the difference with <code>shallowFlatten</code>:</caption>\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.shallowFlatten(arr) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.shallowFlatten|shallowFlatten}\n     * @param {Array} array\n     * @returns {Array}\n     */\n    var flatten = _makeArrayFlattener(true);\n\n    /**\n     * Returns a copy of the given array-like object without the last element.\n     * @example\n     * _.init([1, 2, 3, 4]) // => [1, 2, 3]\n     * _.init([1]) // => []\n     * _.init([]) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.tail|tail}\n     * @see {@link module:lamb.head|head}, {@link module:lamb.last|last}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var init = partial(slice, _, 0, -1);\n\n    /**\n     * Inserts the provided element in a copy of an array-like object at the\n     * specified index.<br/>\n     * If the index is greater than the length of the array-like, the element\n     * will be appended at the end.<br/>\n     * Negative indexes are allowed; when a negative index is out of bounds\n     * the element will be inserted at the start of the resulting array.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.insert(arr, 3, 99) // => [1, 2, 3, 99, 4, 5]\n     * _.insert(arr, -2, 99) // => [1, 2, 3, 99, 4, 5]\n     * _.insert(arr, 10, 99) // => [1, 2, 3, 4, 5, 99]\n     * _.insert(arr, -10, 99) // => [99, 1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.insertAt|insertAt}\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.append|append}, {@link module:lamb.appendTo|appendTo}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} index\n     * @param {*} element\n     * @returns {Array}\n     */\n    function insert (arrayLike, index, element) {\n        var result = slice(arrayLike, 0, arrayLike.length);\n\n        result.splice(index, 0, element);\n\n        return result;\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.insert|insert}\n     * expecting the array-like object to act upon.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.insertAt(3, 99)(arr) // => [1, 2, 3, 99, 4, 5]\n     * _.insertAt(-2, 99)(arr) // => [1, 2, 3, 99, 4, 5]\n     * _.insertAt(10, 99)(arr) // => [1, 2, 3, 4, 5, 99]\n     * _.insertAt(-10, 99)(arr) // => [99, 1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.insert|insert}\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.append|append}, {@link module:lamb.appendTo|appendTo}\n     * @param {Number} index\n     * @param {*} element\n     * @returns {Function}\n     */\n    var insertAt = _makePartial3(insert);\n\n    /**\n     * Returns an array of every item that is included in all given arrays.<br>\n     * Note that this function uses the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}.\n     * @example\n     * var a1 = [1, 2, 3, 4];\n     * var a2 = [2, 5, 4, 6];\n     * var a3 = [5, 6, 7];\n     *\n     * _.intersection(a1, a2) // => [2, 4]\n     * _.intersection(a1, a3) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @param {...Array} array\n     * @returns {Array}\n     */\n    function intersection () {\n        var rest = _argsTail.apply(null, arguments);\n\n        return filter(uniques(arguments[0]), function (item) {\n            return everyIn(rest, contains(item));\n        });\n    }\n\n    /**\n     * Splits an array-like object in two lists: the first with the elements satisfying the given predicate,\n     * the others with the remaining elements.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     *\n     * _.partition(numbers, isEven) // => [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.partitionWith|partitionWith}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} predicate\n     * @returns {Array<Array<*>, Array<*>>}\n     */\n    function partition (arrayLike, predicate) {\n        var result = [[], []];\n        var len = arrayLike.length;\n\n        for (var i = 0, el; i < len; i++) {\n            el = arrayLike[i];\n            result[predicate(el, i, arrayLike) ? 0 : 1].push(el);\n        }\n\n        return result;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.partition|partition} that uses the provided\n     * predicate to build a function expecting the array-like object to act upon.\n     * @example\n     * var users = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"active\": false},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"active\": true},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"active\": true},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"active\": false}\n     * ];\n     * var isActive = _.hasKeyValue(\"active\", true);\n     * var splitByActiveStatus = _.partitionWith(isActive);\n     *\n     * splitByActiveStatus(users) // =>\n     * // [[\n     * //     {\"name\": \"John\", \"surname\": \"Doe\", \"active\": true},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"active\": true}\n     * // ], [\n     * //     {\"name\": \"Jane\", \"surname\": \"Doe\", \"active\": false},\n     * //     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"active\": false}\n     * // ]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.partition|partition}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    var partitionWith = _curry2(partition, true);\n\n    /**\n     * \"Plucks\" the values of the specified key from a list of objects.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 15}\n     * ];\n     *\n     * _.pluck(persons, \"age\") // => [12, 40, 18, 15]\n     *\n     * var lists = [\n     *     [1, 2],\n     *     [3, 4, 5],\n     *     [6]\n     * ];\n     *\n     * _.pluck(lists, \"length\") // => [2, 3, 1]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.pluckKey|pluckKey}\n     * @param {ArrayLike} arrayLike\n     * @param {String} key\n     * @returns {Array}\n     */\n    function pluck (arrayLike, key) {\n        return map(arrayLike, getKey(key));\n    }\n\n    /**\n     * A curried version of {@link module:lamb.pluck|pluck} expecting the key to retrieve to\n     * build a function waiting for the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"surname\": \"Doe\", \"age\": 12},\n     *     {\"name\": \"John\", \"surname\": \"Doe\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"surname\": \"Bianchi\", \"age\": 15}\n     * ];\n     * var getAges = _.pluckKey(\"age\");\n     *\n     * getAges(persons) // => [12, 40, 18, 15]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.pluck|pluck}\n     * @param {String} key\n     * @returns {Function}\n     */\n    var pluckKey = compose(mapWith, getKey);\n\n    /**\n     * A curried version of {@link module:lamb.pullFrom|pullFrom} expecting\n     * a list of values to build a function waiting for an array-like object.<br/>\n     * The new function will create an array copy of the array-like without\n     * the specified values.<br/>\n     * The equality test is made with the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}.\n     * @example\n     * var scores = [40, 20, 30, 10];\n     * var newScores = [30, 10];\n     * var pullNewScores = _.pull(newScores);\n     *\n     * pullNewScores(scores) // => [40, 20]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.pullFrom|pullFrom}\n     * @param {ArrayLike} values\n     * @returns {Function}\n     */\n    var pull = _curry2(pullFrom, true);\n\n    /**\n     * Creates an array copy of the given array-like object without the\n     * specified values.<br/>\n     * The equality test is made with the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.pullFrom(arr, [2, 5]) // => [1, 3, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.pull|pull}\n     * @param {ArrayLike} arrayLike\n     * @param {ArrayLike} values\n     * @returns {Array}\n     */\n    function pullFrom (arrayLike, values) {\n        return values ? filter(arrayLike, function (element) {\n            return !isIn(values, element);\n        }) : slice(arrayLike, 0, arrayLike.length);\n    }\n\n    /**\n     * Flattens the \"first level\" of an array.\n     * @example <caption>Showing the difference with <code>flatten</code>:</caption>\n     * var arr = [1, 2, [3, 4, [5, 6]], 7, 8];\n     *\n     * _.flatten(arr) // => [1, 2, 3, 4, 5, 6, 7, 8]\n     * _.shallowFlatten(arr) // => [1, 2, 3, 4, [5, 6], 7, 8]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.flatten|flatten}\n     * @param {Array} array\n     * @returns {Array}\n     */\n    var shallowFlatten = _makeArrayFlattener(false);\n\n    /**\n     * Returns a copy of the given array-like object without the first element.\n     * @example\n     * _.tail([1, 2, 3, 4]) // => [2, 3, 4]\n     * _.tail([1]) // => []\n     * _.tail([]) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.init|init}\n     * @see {@link module:lamb.head|head}, {@link module:lamb.last|last}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var tail = drop(1);\n\n    /**\n     * A curried version of {@link module:lamb.takeFrom|takeFrom} that expects the number of elements\n     * to retrieve to build a function waiting for the list to take the elements from.<br/>\n     * See the note and examples for {@link module:lamb.takeFrom|takeFrom} about passing a\n     * negative <code>n</code>.\n     * @example\n     * var take2 = _.take(2);\n     *\n     * take2([1, 2, 3, 4, 5]) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.takeFrom|takeFrom}\n     * @see {@link module:lamb.dropFrom|dropFrom}, {@link module:lamb.drop|drop}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {Number} n\n     * @returns {Function}\n     */\n    var take = _curry2(takeFrom, true);\n\n    /**\n     * Retrieves the first <code>n</code> elements from an array or array-like object.<br/>\n     * Note that, being this a shortcut for a common use case of {@link module:lamb.slice|slice},\n     * <code>n</code> can be a negative number.\n     * @example\n     * var arr = [1, 2, 3, 4, 5];\n     *\n     * _.takeFrom(arr, 3) // => [1, 2, 3]\n     * _.takeFrom(arr, -1) // => [1, 2, 3, 4]\n     * _.takeFrom(arr, -10) // => []\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.take|take}\n     * @see {@link module:lamb.dropFrom|dropFrom}, {@link module:lamb.drop|drop}\n     * @see {@link module:lamb.takeWhile|takeWhile}, {@link module:lamb.dropWhile|dropWhile}\n     * @param {ArrayLike} arrayLike\n     * @param {Number} n\n     * @returns {Array}\n     */\n    function takeFrom (arrayLike, n) {\n        return slice(arrayLike, 0, n);\n    }\n\n    /**\n     * Builds a function that takes the first <code>n</code> elements satisfying a predicate from\n     * an array or array-like object.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var takeWhileIsEven = _.takeWhile(isEven);\n     *\n     * takeWhileIsEven([1, 2, 4, 6, 8]) // => []\n     * takeWhileIsEven([2, 4, 7, 8]) // => [2, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.dropWhile|dropWhile}\n     * @see {@link module:lamb.takeFrom|takeFrom}, {@link module:lamb.take|take}\n     * @see {@link module:lamb.dropFrom|dropFrom}, {@link module:lamb.drop|drop}\n     * @param {ListIteratorCallback} predicate\n     * @returns {Function}\n     */\n    function takeWhile (predicate) {\n        return function (arrayLike) {\n            return slice(arrayLike, 0, _getNumConsecutiveHits(arrayLike, predicate));\n        };\n    }\n\n    /**\n     * Transposes a matrix. Can also be used to reverse a {@link module:lamb.zip|zip} operation.<br/>\n     * Just like {@link module:lamb.zip|zip}, the received array-like objects will be truncated to the\n     * shortest length.\n     * @example <caption>Transposing a matrix:</caption>\n     * _.transpose([\n     *     [1, 2, 3],\n     *     [4, 5, 6],\n     *     [7, 8, 9]\n     * ]) // =>\n     * // [\n     * //     [1, 4, 7],\n     * //     [2, 5, 8],\n     * //     [3, 6, 9]\n     * // ]\n     *\n     * @example <caption>Showing the relationship with <code>zip</code>:</caption>\n     * var zipped = _.zip([\"a\", \"b\", \"c\"], [1, 2, 3]); // => [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n     *\n     * _.transpose(zipped) // => [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.zip|zip}\n     * @param {ArrayLike<ArrayLike<*>>} arrayLike\n     * @returns {Array<Array<*>>}\n     */\n    function transpose (arrayLike) {\n        var minLen = MAX_ARRAY_LENGTH;\n        var len = _toArrayLength(arrayLike.length);\n\n        if (len === 0) {\n            return [];\n        }\n\n        for (var j = 0, elementLen; j < len && minLen > 0; j++) {\n            elementLen = _toArrayLength(arrayLike[j].length);\n\n            if (elementLen < minLen) {\n                minLen = elementLen;\n            }\n        }\n\n        var result = Array(minLen);\n\n        for (var i = 0, el; i < minLen; i++) {\n            el = result[i] = Array(len);\n\n            for (j = 0; j < len; j++) {\n                el[j] = arrayLike[j][i];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns a list of every unique element present in the given array-like objects.<br/>\n     * Uses the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}\n     * to test the equality of values.<br/>\n     * When two values are considered equal, the first occurence will be the one included\n     * in the result array.<br/>\n     * See also {@link module:lamb.unionBy|unionBy} if you need to transform the values before\n     * the comparison or if you have to extract them from complex ones.\n     * @example\n     * _.union([1, 2, 3, 2], [3, 4], [1, 5]) // => [1, 2, 3, 4, 5]\n     * _.union(\"abc\", \"bcd\", \"cde\") // => [\"a\", \"b\", \"c\", \"d\", \"e\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.unionBy|unionBy}\n     * @param {...ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var union = unionBy(identity);\n\n    /**\n     * Using the provided iteratee, builds a function that will return an array of the unique elements\n     * in the provided array-like objects.<br/>\n     * Uses the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}\n     * to test the equality of values.<br/>\n     * When two values are considered equal, the first occurence will be the one included\n     * in the result array.<br/>\n     * See also {@link module:lamb.union|union} if you don't need to transform the values.\n     * @example\n     * var unionByFloor = _.unionBy(Math.floor);\n     *\n     * unionByFloor([2.8, 3.2, 1.5], [3.5, 1.2, 4]) // => [2.8, 3.2, 1.5, 4]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.union|union}\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Function}\n     */\n    function unionBy (iteratee) {\n        return compose(uniquesBy(iteratee), flatMapWith(drop(0)), list);\n    }\n\n    /**\n     * Returns an array comprised of the unique elements of the given array-like object.<br/>\n     * Note that this function uses the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}\n     * to test the equality of values.<br/>\n     * When two values are considered equal, the first occurence will be the one included\n     * in the result array.<br/>\n     * See also {@link module:lamb.uniquesBy|uniquesBy} if you need to transform your values before\n     * the comparison or if you have to extract them from complex ones.\n     * @example\n     * _.uniques([-0, 1, 2, 0, 2, 3, 4, 3, 5, 1]) // => [-0, 1, 2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.uniquesBy|uniquesBy}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array}\n     */\n    var uniques = uniquesBy(identity);\n\n    /**\n     * Using the provided iteratee, builds a function that will return an array comprised of the\n     * unique elements of an array-like object. The values being compared are the ones returned by\n     * the iteratee.<br/>\n     * The equality test is made with the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}.<br/>\n     * When two values are considered equal, the first occurence will be the one included\n     * in the result array.<br/>\n     * See also {@link module:lamb.uniques|uniques} if you don't need to transform your values before the\n     * comparison.\n     * @example\n     * var data  = [\n     *     {id: \"1\", name: \"John\"},\n     *     {id: \"4\", name: \"Jane\"},\n     *     {id: \"5\", name: \"Joe\"},\n     *     {id: \"1\", name: \"Mario\"},\n     *     {id: \"5\", name: \"Paolo\"},\n     * ];\n     * var uniquesById = _.uniquesBy(_.getKey(\"id\"));\n     *\n     * uniquesById(data) // => [{id: \"1\", name: \"John\"}, {id: \"4\", name: \"Jane\"}, {id: \"5\", name: \"Joe\"}]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.uniques|uniques}\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Function}\n     */\n    function uniquesBy (iteratee) {\n        return function (arrayLike) {\n            var result = [];\n            var len = arrayLike.length;\n\n            for (var i = 0, seen = [], hasNaN = false, value; i < len; i++) {\n                value = iteratee(arrayLike[i], i, arrayLike);\n\n                // eslint-disable-next-line no-self-compare\n                if (value === value) {\n                    if (seen.indexOf(value) === -1) {\n                        seen[seen.length] = value;\n                        result[result.length] = arrayLike[i];\n                    }\n                } else if (!hasNaN) {\n                    hasNaN = true;\n                    result[result.length] = arrayLike[i];\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Builds a list of arrays out of the given array-like objects by pairing items with the same index.<br/>\n     * The received array-like objects will be truncated to the shortest length.\n     * @example\n     * _.zip(\n     *     [\"a\", \"b\", \"c\"],\n     *     [1, 2, 3],\n     *     [true, false, true]\n     * ) // => [[\"a\", 1, true], [\"b\", 2, false], [\"c\", 3, true]]\n     *\n     * _.zip([1, 2, 3, 4], [5, 6, 7]) // => [[1, 5], [2, 6], [3, 7]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.transpose|transpose} for the reverse operation\n     * @see {@link module:lamb.zipWithIndex|zipWithIndex}\n     * @param {...ArrayLike} arrayLike\n     * @returns {Array<Array<*>>}\n     */\n    var zip = compose(transpose, list);\n\n    /**\n     * \"{@link module:lamb.zip|Zips}\" an array-like object by pairing its values with their index.\n     * @example\n     * _.zipWithIndex([\"a\", \"b\", \"c\"]) // => [[\"a\", 0], [\"b\", 1], [\"c\", 2]]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.zip|zip}\n     * @param {ArrayLike} arrayLike\n     * @returns {Array<Array<*, Number>>}\n     */\n    var zipWithIndex = mapWith(binary(list));\n\n    lamb.append = append;\n    lamb.appendTo = appendTo;\n    lamb.difference = difference;\n    lamb.drop = drop;\n    lamb.dropFrom = dropFrom;\n    lamb.dropWhile = dropWhile;\n    lamb.flatMap = flatMap;\n    lamb.flatMapWith = flatMapWith;\n    lamb.flatten = flatten;\n    lamb.init = init;\n    lamb.insert = insert;\n    lamb.insertAt = insertAt;\n    lamb.intersection = intersection;\n    lamb.partition = partition;\n    lamb.partitionWith = partitionWith;\n    lamb.pluck = pluck;\n    lamb.pluckKey = pluckKey;\n    lamb.pull = pull;\n    lamb.pullFrom = pullFrom;\n    lamb.shallowFlatten = shallowFlatten;\n    lamb.tail = tail;\n    lamb.take = take;\n    lamb.takeFrom = takeFrom;\n    lamb.takeWhile = takeWhile;\n    lamb.transpose = transpose;\n    lamb.union = union;\n    lamb.unionBy = unionBy;\n    lamb.uniques = uniques;\n    lamb.uniquesBy = uniquesBy;\n    lamb.zip = zip;\n    lamb.zipWithIndex = zipWithIndex;\n\n    /**\n     * Transforms an array-like object in a lookup table with the keys generated by the provided\n     * <code>iteratee</code>, having as values the count of matches for the key.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12},\n     *     {\"name\": \"John\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"age\": 17},\n     *     {\"name\": \"Paolo\", \"age\": 15}\n     * ];\n     * var getAgeStatus = function (person) { return person.age >= 18 ? \"adult\" : \"minor\"; };\n     *\n     * _.count(persons, getAgeStatus) // => {\"adult\": 1, \"minor\": 3}\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Object}\n     */\n    var count = _groupWith(function (a) {\n        return a ? ++a : 1;\n    });\n\n    /**\n     * A curried version of {@link module:lamb.count|count} that uses the provided iteratee to\n     * build a function expecting the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"city\": \"New York\"},\n     *     {\"name\": \"John\", \"city\": \"New York\"},\n     *     {\"name\": \"Mario\", \"city\": \"Rome\"},\n     *     {\"name\": \"Paolo\"}\n     * ];\n     * var getCityOrUnknown = _.adapter(_.getKey(\"city\"), _.always(\"Unknown\"));\n     * var countByCity = _.countBy(getCityOrUnknown);\n     *\n     * countByCity(persons) // => {\"New York\": 2, \"Rome\": 1, \"Unknown\": 1}\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.count|count}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Function}\n     */\n    var countBy = _curry2(count, true);\n\n    /**\n     * Transforms an array-like object into a lookup table using the provided iteratee as a grouping\n     * criterion to generate keys and values.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"city\": \"New York\"},\n     *     {\"name\": \"John\", \"city\": \"New York\"},\n     *     {\"name\": \"Mario\", \"city\": \"Rome\"},\n     *     {\"name\": \"Paolo\"}\n     * ];\n     * var getCity = _.getKey(\"city\");\n     * var personsByCity = _.group(persons, getCity);\n     *\n     * // \"personsByCity\" holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"undefined\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @example <caption>Adding a custom value for missing keys:</caption>\n     *\n     * var getCityOrUnknown = _.adapter(getCity, _.always(\"Unknown\"));\n     *\n     * var personsByCity = _.group(persons, getCityOrUnknown);\n     *\n     * // \"personsByCity\" holds:\n     * // {\n     * //     \"New York\": [\n     * //         {\"name\": \"Jane\", \"city\": \"New York\"},\n     * //         {\"name\": \"John\", \"city\": \"New York\"}\n     * //     ],\n     * //     \"Rome\": [\n     * //         {\"name\": \"Mario\", \"city\": \"Rome\"}\n     * //     ],\n     * //     \"Unknown\": [\n     * //         {\"name\": \"Paolo\"}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.groupBy|groupBy}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Object}\n     */\n    var group = _groupWith(function (a, b) {\n        if (!a) {\n            return [b];\n        }\n\n        a[a.length] = b;\n\n        return a;\n    });\n\n    /**\n     * A curried version of {@link module:lamb.group|group} that uses the provided iteratee\n     * to build a function expecting the array-like object to act upon.\n     * @example\n     * var persons = [\n     *     {\"name\": \"Jane\", \"age\": 12},\n     *     {\"name\": \"John\", \"age\": 40},\n     *     {\"name\": \"Mario\", \"age\": 18},\n     *     {\"name\": \"Paolo\", \"age\": 15}\n     * ];\n     *\n     * var getAgeStatus = function (person) { return person.age > 20 ? \"over 20\" : \"under 20\"; };\n     * var groupByAgeStatus = _.groupBy(getAgeStatus);\n     *\n     * var personsByAgeStatus = groupByAgeStatus(persons);\n     *\n     * // \"personsByAgeStatus\" holds:\n     * // {\n     * //     \"under 20\": [\n     * //         {\"name\": \"Jane\", \"age\": 12},\n     * //         {\"name\": \"Mario\", \"age\": 18},\n     * //         {\"name\": \"Paolo\", \"age\": 15}\n     * //     ],\n     * //     \"over 20\": [\n     * //         {\"name\": \"John\", \"age\": 40}\n     * //     ]\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.group|group}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.index|index}, {@link module:lamb.indexBy|indexBy}\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Function}\n     */\n    var groupBy = _curry2(group, true);\n\n    /**\n     * Similar to {@link module:lamb.group|group}, but the generated lookup table will have\n     * only one element of the original array-like object for each value.<br/>\n     * Should be used only when you're sure that your <code>iteratee</code> won't produce\n     * duplicate keys, otherwise only the last evaluated element will be in the result.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\"},\n     *     {id: 2, name: \"Jane\"},\n     *     {id: 3, name: \"Mario\"},\n     *     {id: 4, name: \"John\"}\n     * ];\n     *\n     * var indexedUsers = _.index(users, _.getKey(\"id\"));\n     *\n     * // \"indexedUsers\" holds:\n     * // {\n     * //     \"1\": {id: 1, name: \"John\"},\n     * //     \"2\": {id: 2, name: \"Jane\"},\n     * //     \"3\": {id: 3, name: \"Mario\"},\n     * //     \"4\": {id: 4, name: \"John\"}\n     * // }\n     *\n     * @example <caption>Result of an <code>iteratee</code> producing a duplicate key:</caption>\n     * var users = [\n     *     {id: 1, name: \"John\"},\n     *     {id: 2, name: \"Jane\"},\n     *     {id: 3, name: \"Mario\"},\n     *     {id: 4, name: \"John\"}\n     * ];\n     *\n     * var indexedUsers = _.index(users, _.getKey(\"name\"));\n     *\n     * // \"indexedUsers\" holds:\n     * // {\n     * //     \"John\": {\"id\": 4, \"name\": \"John\"},\n     * //     \"Jane\": {\"id\": 2, \"name\": \"Jane\"},\n     * //     \"Mario\": {\"id\": 3, \"name\": \"Mario\"}\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.indexBy|indexBy}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @param {ArrayLike} arrayLike\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Object}\n     */\n    var index = _groupWith(function (a, b) {\n        return b;\n    });\n\n    /**\n     * A curried version of {@link module:lamb.index|index} that uses the provided iteratee\n     * to build a function expecting the array-like object to act upon.\n     * @example\n     * var users = [\n     *     {id: 1, name: \"John\"},\n     *     {id: 2, name: \"Jane\"},\n     *     {id: 3, name: \"Mario\"}\n     * ];\n     * var indexByID = _.indexBy(_.getKey(\"id\"));\n     *\n     * var indexedUsers = indexByID(users);\n     *\n     * // \"indexedUsers\" holds:\n     * // {\n     * //     \"1\": {id: 1, name: \"John\"},\n     * //     \"2\": {id: 2, name: \"Jane\"},\n     * //     \"3\": {id: 3, name: \"Mario\"}\n     * // }\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.index|index}\n     * @see {@link module:lamb.count|count}, {@link module:lamb.countBy|countBy}\n     * @see {@link module:lamb.group|group}, {@link module:lamb.groupBy|groupBy}\n     * @param {ListIteratorCallback} iteratee\n     * @returns {Function}\n     */\n    var indexBy = _curry2(index, true);\n\n    lamb.count = count;\n    lamb.countBy = countBy;\n    lamb.group = group;\n    lamb.groupBy = groupBy;\n    lamb.index = index;\n    lamb.indexBy = indexBy;\n\n    /**\n     * Returns a [stably]{@link https://en.wikipedia.org/wiki/Sorting_algorithm#Stability} sorted\n     * copy of an array-like object using the given criteria.<br/>\n     * Sorting criteria are built using Lamb's {@link module:lamb.sorter|sorter} function, but you\n     * can also pass simple \"reader\" functions and default ascending sorters will be built for you.<br/>\n     * A \"reader\" is a function that evaluates the array element and supplies the value to be used\n     * in the comparison.<br/>\n     * Please note that if the arguments received by the default comparer aren't of the same type,\n     * they will be compared as strings.\n     *\n     * @example <caption>Stable sort:</caption>\n     * var persons = [\n     *     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"},\n     *     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     *     {\"name\": \"Jane\", \"surname\": \"Foe\"}\n     * ];\n     *\n     * var personsByName = _.sort(persons, _.getKey(\"name\"));\n     *\n     * // personsByName holds:\n     * // [\n     * //     {\"name\": \"Jane\", \"surname\": \"Foe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @example <caption>Stable multi-sort:</caption>\n     * var personsByNameAscSurnameDesc = _.sort(\n     *     persons,\n     *     _.getKey(\"name\"),\n     *     _.sorterDesc(_.getKey(\"surname\"))\n     * );\n     *\n     * // personsByNameAscSurnameDesc holds:\n     * // [\n     * //     {\"name\": \"Jane\", \"surname\": \"Foe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Moe\"},\n     * //     {\"name\": \"John\", \"surname\" :\"Doe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @example <caption>Using custom comparers:</caption>\n     * var localeSorter = new Intl.Collator(\"it\");\n     * var chars = [\"a\", \"è\", \"à\", \"é\", \"c\", \"b\", \"e\"];\n     *\n     * _.sort(chars, localeSorter) // => [\"a\", \"à\", \"b\", \"c\", \"e\", \"é\", \"è\"]\n     *\n     * var localeSorterDesc = _.sorterDesc(_.identity, localeSorter.compare);\n     *\n     * _.sort(chars, localeSorterDesc) // => [\"è\", \"é\", \"e\", \"c\", \"b\", \"à\", \"a\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {ArrayLike} arrayLike\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}]\n     * @returns {Array}\n     */\n    function sort (arrayLike) {\n        var criteria = _makeCriteria(_argsTail.apply(null, arguments));\n        var len = _toArrayLength(arrayLike.length);\n        var result = Array(len);\n\n        for (var i = 0; i < len; i++) {\n            result[i] = {value: arrayLike[i], index: i};\n        }\n\n        result.sort(_compareWith(criteria));\n\n        for (i = 0; i < len; i++) {\n            result[i] = result[i].value;\n        }\n\n        return result;\n    }\n\n    /**\n     * Inserts an element in a copy of a sorted array respecting the sort order.\n     * @example <caption>With simple values:</caption>\n     * _.sortedInsert([], 1) // => [1]\n     * _.sortedInsert([2, 4, 6], 5) // => [2, 4, 5, 6]\n     * _.sortedInsert([4, 2, 1], 3, _.sorterDesc()) // => [4, 3, 2, 1]\n     *\n     * @example <caption>With complex values:</caption>\n     * var persons = [\n     *     {\"name\": \"jane\", \"surname\": \"doe\"},\n     *     {\"name\": \"John\", \"surname\": \"Doe\"},\n     *     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * ];\n     *\n     * var getLowerCaseName = _.compose(\n     *     _.invoker(\"toLowerCase\"),\n     *     _.getKey(\"name\")\n     * );\n     *\n     * var result = _.sortedInsert(\n     *     persons,\n     *     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     *     getLowerCaseName\n     * );\n     *\n     * // `result` holds:\n     * // [\n     * //     {\"name\": \"jane\", \"surname\": \"doe\"},\n     * //     {\"name\": \"John\", \"surname\": \"Doe\"},\n     * //     {\"name\": \"marco\", \"surname\": \"Rossi\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @see {@link module:lamb.insert|insert}, {@link module:lamb.insertAt|insertAt} to insert the element\n     * at a specific index\n     * @param {ArrayLike} arrayLike\n     * @param {*} element\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}] - The sorting criteria\n     * used to sort the array.\n     * @returns {Array}\n     */\n    function sortedInsert (arrayLike, element) {\n        var result = slice(arrayLike, 0, arrayLike.length);\n\n        if (arguments.length === 1) {\n            return result;\n        }\n\n        var len = arguments.length - 2;\n        var sorters = Array(len);\n\n        for (var i = 0; i < len; i++) {\n            sorters[i] = arguments[i + 2];\n        }\n\n        var criteria = _makeCriteria(sorters);\n        var idx = _getInsertionIndex(result, element, _compareWith(criteria), 0, result.length);\n\n        result.splice(idx, 0, element);\n\n        return result;\n    }\n\n    /**\n     * Creates an ascending sort criterion with the provided <code>reader</code> and\n     * <code>comparer</code>.<br/>\n     * See {@link module:lamb.sort|sort} for various examples.\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {Function} [reader={@link module:lamb.identity|identity}] A function meant to generate a\n     * simple value from a complex one. The function should evaluate the array element and supply the\n     * value to be passed to the comparer.\n     * @param {Function} [comparer] An optional custom comparer function.\n     * @returns {Sorter}\n     */\n    var sorter = partial(_sorter, _, false, _);\n\n    /**\n     * Creates a descending sort criterion with the provided <code>reader</code> and\n     * <code>comparer</code>.<br/>\n     * See {@link module:lamb.sort|sort} for various examples.\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @function\n     * @see {@link module:lamb.sortedInsert|sortedInsert}\n     * @see {@link module:lamb.sort|sort}, {@link module:lamb.sortWith|sortWith}\n     * @see {@link module:lamb.sorter|sorter}\n     * @param {Function} [reader={@link module:lamb.identity|identity}] A function meant to generate a\n     * simple value from a complex one. The function should evaluate the array element and supply the\n     * value to be passed to the comparer.\n     * @param {Function} [comparer] An optional custom comparer function.\n     * @returns {Sorter}\n     */\n    var sorterDesc = partial(_sorter, _, true, _);\n\n    /**\n     * Builds a partial application of {@link module:lamb.sort|sort} using the provided criteria.\n     * The returned function expects the array-like object to sort.\n     * As usual, sorting criteria are built using Lamb's {@link module:lamb.sorter|sorter} function,\n     * but you can also pass simple \"reader\" functions and default ascending sorters will be built.<br/>\n     * A \"reader\" is a function that evaluates the array element and supplies the value to be used in\n     * the comparison.<br/>\n     * See {@link module:lamb.sort|sort} for more examples.\n     *\n     * @example\n     * var sortAsNumbers = _.sortWith(parseFloat);\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     *\n     * sortAsNumbers(weights) // => [\"1 Kg\", \"2 Kg\", \"7 Kg\", \"10 Kg\"]\n     *\n     * @memberof module:lamb\n     * @category Array\n     * @see {@link module:lamb.sort|sort}\n     * @see {@link module:lamb.sorter|sorter}, {@link module:lamb.sorterDesc|sorterDesc}\n     * @param {...(Sorter|Function)} [sorter={@link module:lamb.sorter|sorter()}]\n     * @returns {Function}\n     */\n    function sortWith () {\n        var sorters = list.apply(null, arguments);\n\n        return function (arrayLike) {\n            return sort.apply(null, [arrayLike].concat(sorters));\n        };\n    }\n\n    lamb.sort = sort;\n    lamb.sortedInsert = sortedInsert;\n    lamb.sorter = sorter;\n    lamb.sorterDesc = sorterDesc;\n    lamb.sortWith = sortWith;\n\n    /**\n     * Applies the given function to a list of arguments.\n     * @example\n     * _.application(_.sum, [3, 4]) // => 7\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.apply|apply}, {@link module:lamb.applyTo|applyTo}\n     * @param {Function} fn\n     * @param {ArrayLike} args\n     * @returns {*}\n     */\n    function application (fn, args) {\n        return fn.apply(this, Object(args));\n    }\n\n    /**\n     * A left-curried version of {@link module:lamb.application|application}. Expects the function\n     * to apply and builds a function waiting for the arguments array.\n     * @example\n     * var arrayMax = _.apply(Math.max);\n     *\n     * arrayMax([4, 5, 2, 6, 1]) // => 6\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @see {@link module:lamb.application|application}, {@link module:lamb.applyTo|applyTo}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    var apply = _curry2(application);\n\n    /**\n     * A right-curried version of {@link module:lamb.application|application}. Expects an array-like\n     * object to use as arguments and builds a function waiting for the target of the application.\n     * @example\n     * var data = [3, 4];\n     * var applyToData = _.applyTo(data);\n     *\n     * applyToData(_.sum) // => 7\n     * applyToData(_.multiply) // => 12\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @see {@link module:lamb.application|application}, {@link module:lamb.apply|apply}\n     * @param {ArrayLike} args\n     * @returns {Function}\n     */\n    var applyTo = _curry2(application, true);\n\n    /**\n     * Builds a new function that passes only the specified amount of arguments to the original one.<br/>\n     * As {@link module:lamb.slice|slice} is used to extract the arguments, you can also\n     * pass a negative arity.\n     * @example\n     * Math.max(10, 11, 45, 99) // => 99\n     * _.aritize(Math.max, 2)(10, 11, 45, 99) // => 11\n     *\n     * @example <caption>Using a negative arity:</caption>\n     * _.aritize(Math.max, -1)(10, 11, 45, 99) // => 45\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.binary|binary}, {@link module:lamb.unary|unary} for common use cases shortcuts\n     * @param {Function} fn\n     * @param {Number} arity\n     * @returns {Function}\n     */\n    function aritize (fn, arity) {\n        return function () {\n            var n = _toInteger(arity);\n            var args = list.apply(null, arguments).slice(0, n);\n\n            for (var i = args.length; i < n; i++) {\n                args[i] = void 0;\n            }\n\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Decorates the received function so that it can be called with\n     * placeholders to build a partial application of it.<br/>\n     * The difference with {@link module:lamb.partial|partial} is that, as long as\n     * you call the generated function with placeholders, another partial application\n     * of the original function will be built.<br/>\n     * The final application will happen when one of the generated functions is\n     * invoked without placeholders, using the parameters collected so far. <br/>\n     * This function comes in handy when you need to build different specialized\n     * functions starting from a basic one, but it's also useful when dealing with\n     * optional parameters as you can decide to apply the function even if its arity\n     * hasn't been entirely consumed.\n     * @example <caption>Explaining the function's behaviour:</caption>\n     * var f = _.asPartial(function (a, b, c) {\n     *     return a + b + c;\n     * });\n     *\n     * f(4, 3, 2) // => 9\n     * f(4, _, 2)(3) // => 9\n     * f(_, 3, _)(4, _)(2) // => 9\n     *\n     * @example <caption>Exploiting optional parameters:</caption>\n     * var f = _.asPartial(function (a, b, c) {\n     *     return a + b + (c || 0);\n     * });\n     *\n     * var addFive = f(5, _);\n     * addFive(2) // => 7\n     *\n     * var addNine = addFive(4, _);\n     * addNine(11) // => 20\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.partial|partial}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function asPartial (fn) {\n        return _asPartial(fn, []);\n    }\n\n    /**\n     * Builds a function that passes only two arguments to the given function.<br/>\n     * It's simply a shortcut for a common use case of {@link module:lamb.aritize|aritize},\n     * exposed for convenience.\n     * @example\n     * _.list(1, 2, 3, 4, 5) // => [1, 2, 3, 4, 5]\n     * _.binary(_.list)(1, 2, 3, 4, 5) // => [1, 2]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.aritize|aritize}\n     * @see {@link module:lamb.unary|unary}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function binary (fn) {\n        return function (a, b) {\n            return fn.call(this, a, b);\n        };\n    }\n\n    /**\n     * Accepts a series of functions and builds a new function. The functions in the series\n     * will then be applied, in order, with the values received by the function built with\n     * <code>collect</code>.<br/>\n     * The collected results will be returned in an array.\n     * @example\n     * var user = {\n     *     id: \"jdoe\",\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     scores: [2, 4, 7]\n     * };\n     * var getIDAndLastScore = _.collect(_.getKey(\"id\"), _.getPath(\"scores.-1\"));\n     *\n     * getIDAndLastScore(user) // => [\"jdoe\", 7]\n     *\n     * @example\n     * var minAndMax = _.collect(Math.min, Math.max);\n     *\n     * minAndMax(3, 1, -2, 5, 4, -1) // => [-2, 5]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    function collect () {\n        var functions = list.apply(null, arguments);\n\n        return function () {\n            return map(functions, applyTo(arguments));\n        };\n    }\n\n    /**\n     * Transforms the evaluation of the given function in the evaluation of a sequence of functions\n     * expecting only one argument. Each function of the sequence is a partial application of the\n     * original one, which will be applied when the specified (or derived) arity is consumed.<br/>\n     * Currying will start from the leftmost argument: use {@link module:lamb.curryRight|curryRight}\n     * for right currying.\n     * @example\n     * var makeWithKeys = _.curry(_.make);\n     * var makePerson = makeWithKeys([\"name\", \"surname\"]);\n     *\n     * makePerson([\"John\", \"Doe\"]) // => {name: \"John\", surname: \"Doe\"};\n     * makePerson([\"Mario\", \"Rossi\"]) // => {name: \"Mario\", surname: \"Rossi\"};\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curry (fn, arity) {\n        return _curry(fn, arity, false);\n    }\n\n    /**\n     * Builds an auto-curried function. The resulting function can be called multiple times with\n     * any number of arguments, and the original function will be applied only when the specified\n     * (or derived) arity is consumed.<br/>\n     * Currying will start from the leftmost argument: use {@link module:lamb.curryableRight|curryableRight}\n     * for right currying.\n     * @example\n     * var collectFourElements = _.curryable(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2)(3, 4)(5) // => [2, 3, 4, 5]\n     * collectFourElements(2, 3, 4, 5) // => [2, 3, 4, 5]\n     * collectFourElements(2, 3)(4, 5) // => [2, 3, 4, 5]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curryableRight|curryableRight}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryable (fn, arity) {\n        return _curry(fn, arity, false, true);\n    }\n\n    /**\n     * Same as {@link module:lamb.curryable|curryable}, but currying starts from the rightmost argument.\n     * @example\n     * var collectFourElements = _.curryableRight(_.list, 4);\n     *\n     * collectFourElements(2)(3)(4)(5) // => [5, 4, 3, 2]\n     * collectFourElements(2)(3, 4)(5) // => [5, 4, 3, 2]\n     * collectFourElements(2, 3, 4, 5) // => [5, 4, 3, 2]\n     * collectFourElements(2, 3)(4, 5) // => [5, 4, 3, 2]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curryable|curryable}\n     * @see {@link module:lamb.curry|curry}, {@link module:lamb.curryRight|curryRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryableRight (fn, arity) {\n        return _curry(fn, arity, true, true);\n    }\n\n    /**\n     * Same as {@link module:lamb.curry|curry}, but currying starts from the rightmost argument.\n     * @example\n     * var makeWithValues = _.curryRight(_.make);\n     * var makeJohnDoe = makeWithValues([\"John\", \"Doe\"]);\n     *\n     * makeJohnDoe([\"name\", \"surname\"]) // => {name: \"John\", surname: \"Doe\"};\n     * makeJohnDoe([\"firstName\", \"lastName\"]) // => {firstName: \"John\", lastName: \"Doe\"};\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.curry|curry}\n     * @see {@link module:lamb.curryable|curryable}, {@link module:lamb.curryableRight|curryableRight}\n     * @see {@link module:lamb.partial|partial}, {@link module:lamb.asPartial|asPartial}\n     * @param {Function} fn\n     * @param {Number} [arity=fn.length]\n     * @returns {Function}\n     */\n    function curryRight (fn, arity) {\n        return _curry(fn, arity, true);\n    }\n\n    /**\n     * Returns a function that will execute the given function only if it stops being called for the\n     * specified timespan.<br/>\n     * See also {@link module:lamb.throttle|throttle} for a different behaviour where the first call\n     * happens immediately.\n     * @example <caption>A common use case of <code>debounce</code> in a browser environment:</caption>\n     * var updateLayout = function () {\n     *     // some heavy DOM operations here\n     * };\n     *\n     * window.addEventListener(\"resize\", _.debounce(updateLayout, 200), false);\n     *\n     * // The resize event is fired repeteadly until the user stops resizing the\n     * // window, while the `updateLayout` function is called only once: 200 ms\n     * // after he stopped.\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.throttle|throttle}\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds\n     * @returns {Function}\n     */\n    function debounce (fn, timespan) {\n        var timeoutID;\n\n        return function () {\n            var args = arguments;\n            var debounced = function () {\n                timeoutID = null;\n                fn.apply(this, args);\n            }.bind(this);\n\n            clearTimeout(timeoutID);\n            timeoutID = setTimeout(debounced, timespan);\n        };\n    }\n\n    /**\n     * Returns a function that applies the original function with the arguments in reverse order.\n     * @example\n     * _.list(1, 2, 3) // => [1, 2, 3]\n     * _.flip(_.list)(1, 2, 3) // => [3, 2, 1]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function flip (fn) {\n        return function () {\n            var args = list.apply(null, arguments).reverse();\n\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Builds a function that returns the argument received at the given index.<br/>\n     * As with {@link module:lamb.getAt|getAt} negative indexes are allowed.<br/>\n     * The resulting function will return <code>undefined</code> if no arguments are\n     * passed or if the index is out of bounds.\n     * @example\n     * var getFirstArg = getArgAt(0);\n     * var getLastArg = getArgAt(-1);\n     *\n     * getFirstArg(1, 2, 3) // => 1\n     * getLastArg(1, 2, 3) // => 3\n     *\n     * getArgAt()(1, 2, 3) // => undefined\n     * getArgAt(6)(1, 2, 3) // => undefined\n     * getArgAt(1)() // => undefined\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @param {Number} idx\n     * @returns {Function}\n     */\n    function getArgAt (idx) {\n        return function () {\n            return arguments[_toNaturalIndex(idx, arguments.length)];\n        };\n    }\n\n    /**\n     * Builds a function that will invoke the given method name on any received object and\n     * return the result. If no method with such name is found the function will return\n     * <code>undefined</code>.<br/>\n     * Along with the method name it's possible to supply some arguments that will be bound to the\n     * method call. Further arguments can also be passed when the function is actually called, and\n     * they will be concatenated to the bound ones.<br/>\n     * Returning <code>undefined</code> is a behaviour meant to quickly create a case for\n     * {@link module:lamb.adapter|adapter} without the need to check for the existence of the\n     * desired method.<br/>\n     * See also {@link module:lamb.generic|generic} to create functions out of object methods.\n     * @example <caption>Basic polymorphism with <code>invoker</code>:</caption>\n     * var polySlice = _.invoker(\"slice\");\n     *\n     * polySlice([1, 2, 3, 4, 5], 1, 3) // => [2, 3]\n     * polySlice(\"Hello world\", 1, 3) // => \"el\"\n     *\n     * @example <caption>With bound arguments:</caption>\n     * var substrFrom2 = _.invoker(\"substr\", 2);\n     * substrFrom2(\"Hello world\") // => \"llo world\"\n     * substrFrom2(\"Hello world\", 5) // => \"llo w\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.invokerOn|invokerOn}\n     * @param {String} methodName\n     * @param {...*} [boundArg]\n     * @returns {Function}\n     */\n    function invoker (methodName) {\n        return partial(_invoker, _argsTail.apply(null, arguments), methodName);\n    }\n\n    /**\n     * Accepts an object and builds a function expecting a method name, and optionally arguments,\n     * to call on such object.\n     * Like {@link module:lamb.invoker|invoker}, if no method with the given name is found the\n     * function will return <code>undefined</code>.\n     * @example\n     * var isEven = function (n) { return n % 2 === 0; };\n     * var arr = [1, 2, 3, 4, 5];\n     * var invokerOnArr = _.invokerOn(arr);\n     *\n     * invokerOnArr(\"filter\", isEven) // => [2, 4]\n     * invokerOnArr(\"slice\", 1, 3) // => [2, 3]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.invoker|invoker}\n     * @param {Object} target\n     * @returns {Function}\n     */\n    function invokerOn (target) {\n        return partial(_invoker, [], _, target);\n    }\n\n    /**\n     * Builds a function that allows to map over the received arguments before applying them\n     * to the original one.\n     * @example\n     * var sumArray = _.reduceWith(_.sum);\n     * var sumArgs = _.compose(sumArray, _.list);\n     *\n     * sumArgs(1, 2, 3, 4, 5) // => 15\n     *\n     * var square = _.partial(Math.pow, _, 2);\n     * var sumSquares = _.mapArgs(sumArgs, square);\n     *\n     * sumSquares(1, 2, 3, 4, 5) // => 55\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.tapArgs|tapArgs}\n     * @param {Function} fn\n     * @param {ListIteratorCallback} mapper\n     * @returns {Function}\n     */\n    function mapArgs (fn, mapper) {\n        return compose(apply(fn), mapWith(mapper), list);\n    }\n\n    /**\n     * Creates a pipeline of functions, where each function consumes the result of the previous one.\n     * @example\n     * var square = _.partial(Math.pow, _, 2);\n     * var getMaxAndSquare = _.pipe(Math.max, square);\n     *\n     * getMaxAndSquare(3, 5) // => 25\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @function\n     * @see {@link module:lamb.compose|compose}\n     * @param {...Function} fn\n     * @returns {Function}\n     */\n    var pipe = flip(compose);\n\n    /**\n     * Builds a function that allows to \"tap\" into the arguments of the original one.\n     * This allows to extract simple values from complex ones, transform arguments or simply intercept them.\n     * If a \"tapper\" isn't found the argument is passed as it is.\n     * @example\n     * var someObject = {count: 5};\n     * var someArrayData = [2, 3, 123, 5, 6, 7, 54, 65, 76, 0];\n     * var getDataAmount = _.tapArgs(_.sum, [_.getKey(\"count\"), _.getKey(\"length\")]);\n     *\n     * getDataAmount(someObject, someArrayData); // => 15\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.mapArgs|mapArgs}\n     * @param {Function} fn\n     * @param {Function[]} tappers\n     * @returns {Function}\n     */\n    function tapArgs (fn, tappers) {\n        return function () {\n            var len = arguments.length;\n            var tappersLen = tappers.length;\n            var args = [];\n\n            for (var i = 0; i < len; i++) {\n                args.push(i < tappersLen ? tappers[i](arguments[i]) : arguments[i]);\n            }\n\n            return fn.apply(this, args);\n        };\n    }\n\n    /**\n     * Returns a function that will invoke the passed function at most once in the given timespan.<br/>\n     * The first call in this case happens as soon as the function is invoked; see also\n     * {@link module:lamb.debounce|debounce} for a different behaviour where the first call is delayed.\n     * @example\n     * var log = _.throttle(console.log.bind(console), 5000);\n     *\n     * log(\"Hi\"); // console logs \"Hi\"\n     * log(\"Hi again\"); // nothing happens\n     * // after five seconds\n     * log(\"Hello world\"); // console logs \"Hello world\"\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.debounce|debounce}\n     * @param {Function} fn\n     * @param {Number} timespan - Expressed in milliseconds.\n     * @returns {Function}\n     */\n    function throttle (fn, timespan) {\n        var result;\n        var lastCall = 0;\n\n        return function () {\n            var now = Date.now();\n\n            if (now - lastCall >= timespan) {\n                lastCall = now;\n                result = fn.apply(this, arguments);\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * Builds a function that passes only one argument to the given function.<br/>\n     * It's simply a shortcut for a common use case of {@link module:lamb.aritize|aritize},\n     * exposed for convenience.\n     * @example\n     * var weights = [\"2 Kg\", \"10 Kg\", \"1 Kg\", \"7 Kg\"];\n     *\n     * _.map(weights, _.unary(parseInt)) // => [2, 10, 1, 7]\n     *\n     * @memberof module:lamb\n     * @category Function\n     * @see {@link module:lamb.aritize|aritize}\n     * @see {@link module:lamb.binary|binary}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function unary (fn) {\n        return function (a) {\n            return fn.call(this, a);\n        };\n    }\n\n    lamb.application = application;\n    lamb.apply = apply;\n    lamb.applyTo = applyTo;\n    lamb.aritize = aritize;\n    lamb.asPartial = asPartial;\n    lamb.binary = binary;\n    lamb.collect = collect;\n    lamb.curry = curry;\n    lamb.curryRight = curryRight;\n    lamb.curryable = curryable;\n    lamb.curryableRight = curryableRight;\n    lamb.debounce = debounce;\n    lamb.flip = flip;\n    lamb.getArgAt = getArgAt;\n    lamb.invoker = invoker;\n    lamb.invokerOn = invokerOn;\n    lamb.mapArgs = mapArgs;\n    lamb.pipe = pipe;\n    lamb.tapArgs = tapArgs;\n    lamb.throttle = throttle;\n    lamb.unary = unary;\n\n    /**\n     * Creates an array with all the enumerable properties of the given object.\n     * @example <caption>Showing the difference with {@link module:lamb.keys|keys}:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3},\n     *     d: {value: 4, enumerable: true}\n     * });\n     *\n     * _.keys(foo) // => [\"d\"]\n     * _.enumerables(foo) // => [\"d\", \"a\"]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.keys|keys}\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    var enumerables = _unsafeKeyListFrom(_safeEnumerables);\n\n    /**\n     * Builds an object from a list of key / value pairs like the one\n     * returned by {@link module:lamb.pairs|pairs} or {@link module:lamb.ownPairs|ownPairs}.<br/>\n     * In case of duplicate keys the last key / value pair is used.\n     * @example\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"c\", 3]]) // => {\"a\": 1, \"b\": 2, \"c\": 3}\n     * _.fromPairs([[\"a\", 1], [\"b\", 2], [\"a\", 3]]) // => {\"a\": 3, \"b\": 2}\n     * _.fromPairs([[1], [void 0, 2], [null, 3]]) // => {\"1\": undefined, \"undefined\": 2, \"null\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.ownPairs|ownPairs}, {@link module:lamb.pairs|pairs}\n     * @param {Array<Array<String, *>>} pairsList\n     * @returns {Object}\n     */\n    function fromPairs (pairsList) {\n        var result = {};\n\n        forEach(pairsList, function (pair) {\n            result[pair[0]] = pair[1];\n        });\n\n        return result;\n    }\n\n    /**\n     * Makes an object immutable by recursively calling [Object.freeze]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze}\n     * on its members.<br/>\n     * Any attempt to extend or modify the object can throw a <code>TypeError</code> or fail silently,\n     * depending on the environment and the [strict mode]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode} directive.\n     * @example\n     * var user = _.immutable({\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\"\n     *     },\n     *     luckyNumbers: [13, 17]\n     * });\n     *\n     * // All of these statements will fail and possibly\n     * // throw a TypeError (see the function description)\n     * user.name = \"Joe\";\n     * delete user.name;\n     * user.newProperty = [];\n     * user.login.password = \"foo\";\n     * user.luckyNumbers.push(-13);\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @param {Object} obj\n     * @returns {Object}\n     */\n    function immutable (obj) {\n        return _immutable(obj, []);\n    }\n\n    /**\n     * Retrieves the list of the own enumerable properties of an object.<br/>\n     * Although [Object.keys]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys}\n     * is already present in ECMAScript 5, its behaviour changed in the subsequent specifications\n     * of the standard.<br/>\n     * This function <em>shims</em> the ECMAScript 6 version, by forcing a conversion to\n     * object for any value but <code>null</code> and <code>undefined</code>.\n     * @example <caption>Showing the difference with {@link module:lamb.enumerables|enumerables}:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3},\n     *     d: {value: 4, enumerable: true}\n     * });\n     *\n     * _.enumerables(foo) // => [\"d\", \"a\"]\n     * _.keys(foo) // => [\"d\"]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.enumerables|enumerables}\n     * @param {Object} obj\n     * @returns {String[]}\n     */\n    var keys = _unsafeKeyListFrom(_safeKeys);\n\n    /**\n     * Builds an object from the two given lists, using the first one as keys and the last\n     * one as values.<br/>\n     * If the list of keys is longer than the values one, the keys will be created with\n     * <code>undefined</code> values.<br/>\n     * If more values than keys are supplied, the extra values will be ignored.\n     * @example\n     * _.make([\"a\", \"b\", \"c\"], [1, 2, 3]) // => {a: 1, b: 2, c: 3}\n     * _.make([\"a\", \"b\", \"c\"], [1, 2]) // => {a: 1, b: 2, c: undefined}\n     * _.make([\"a\", \"b\"], [1, 2, 3]) // => {a: 1, b: 2}\n     * _.make([null, void 0, 2], [1, 2, 3]) // => {\"null\": 1, \"undefined\": 2, \"2\": 3}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.tear|tear}, {@link module:lamb.tearOwn|tearOwn} for the reverse operation\n     * @param {String[]} names\n     * @param {ArrayLike} values\n     * @returns {Object}\n     */\n    function make (names, values) {\n        var result = {};\n        var valuesLen = values.length;\n\n        for (var i = 0, len = names.length; i < len; i++) {\n            result[names[i]] = i < valuesLen ? values[i] : void 0;\n        }\n\n        return result;\n    }\n\n    /**\n     * Merges the enumerable properties of the provided sources into a new object.<br/>\n     * In case of key homonymy each source has precedence over the previous one.\n     * @example\n     * _.merge({a: 1}, {b: 3, c: 4}, {b: 5}) // => {a: 1, b: 5, c: 4}\n     *\n     * @example <caption>Array-like objects will be transformed to objects with numbers as keys:</caption>\n     * _.merge([1, 2], {a: 2}) // => {\"0\": 1, \"1\": 2, a: 2}\n     * _.merge(\"foo\", {a: 2}) // => {\"0\": \"f\", \"1\": \"o\", \"2\": \"o\", a: 2}\n     *\n     * @example <caption>Every other value will be treated as an empty object:</caption>\n     * _.merge({a: 2}, null, NaN) // => {a: 2}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.mergeOwn|mergeOwn} to merge own properties only\n     * @function\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    var merge = partial(_merge, _safeEnumerables);\n\n    /**\n     * Same as {@link module:lamb.merge|merge}, but only the own properties of the\n     * sources are taken into account.\n     * @example <caption>Showing the difference with <code>merge</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * var bar = {d: 4};\n     *\n     * _.merge(foo, bar) // => {a: 1, b: 2, c: 3, d: 4}\n     * _.mergeOwn(foo, bar) // => {c: 3, d: 4}\n     *\n     * @example <caption>Array-like objects will be transformed to objects with numbers as keys:</caption>\n     * _.mergeOwn([1, 2], {a: 2}) // => {\"0\": 1, \"1\": 2, a: 2}\n     * _.mergeOwn(\"foo\", {a: 2}) // => {\"0\": \"f\", \"1\": \"o\", \"2\": \"o\", a: 2}\n     *\n     * @example <caption>Every other value will be treated as an empty object:</caption>\n     * _.mergeOwn({a: 2}, null, NaN) // => {a: 2}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.merge|merge} to merge all enumerable properties\n     * @function\n     * @param {...Object} source\n     * @returns {Object}\n     */\n    var mergeOwn = partial(_merge, _safeKeys);\n\n    /**\n     * Same as {@link module:lamb.pairs|pairs}, but only the own enumerable properties of the object are\n     * taken into account.<br/>\n     * See also {@link module:lamb.fromPairs|fromPairs} for the reverse operation.\n     * @example <caption>Showing the difference with <code>pairs</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.pairs(foo) // => [[\"c\", 3], [\"b\", 2], [\"a\", 1]]\n     * _.ownPairs(foo) // => [[\"c\", 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.pairs|pairs}\n     * @see {@link module:lamb.fromPairs|fromPairs}\n     * @param {Object} obj\n     * @returns {Array<Array<String, *>>}\n     */\n    var ownPairs = _pairsFrom(keys);\n\n    /**\n     * Same as {@link module:lamb.values|values}, but only the own enumerable properties of the object are\n     * taken into account.<br/>\n     * @example <caption>Showing the difference with <code>values</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.values(foo) // => [3, 2, 1]\n     * _.ownValues(foo) // => [3]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.values|values}\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var ownValues = _valuesFrom(keys);\n\n    /**\n     * Converts an object into an array of key / value pairs of its enumerable properties.<br/>\n     * See also {@link module:lamb.ownPairs|ownPairs} for picking only the own enumerable\n     * properties and {@link module:lamb.fromPairs|fromPairs} for the reverse operation.\n     * @example\n     * _.pairs({a: 1, b: 2, c: 3}) // => [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.ownPairs|ownPairs}\n     * @see {@link module:lamb.fromPairs|fromPairs}\n     * @param {Object} obj\n     * @returns {Array<Array<String, *>>}\n     */\n    var pairs = _pairsFrom(enumerables);\n\n    /**\n     * Returns an object containing only the specified properties of the given object.<br/>\n     * Non existent properties will be ignored.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.pick(user, [\"name\", \"age\"]) // => {\"name\": \"john\", \"age\": 30};\n     * _.pick(user, [\"name\", \"email\"]) // => {\"name\": \"john\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pickIf|pickIf}, {@link module:lamb.pickKeys|pickKeys}\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipIf|skipIf}\n     * @param {Object} source\n     * @param {String[]} whitelist\n     * @returns {Object}\n     */\n    function pick (source, whitelist) {\n        var result = {};\n\n        for (var i = 0, len = whitelist.length, key; i < len; i++) {\n            key = whitelist[i];\n\n            if (has(source, key)) {\n                result[key] = source[key];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a function expecting an object whose enumerable properties will be checked\n     * against the given predicate.<br/>\n     * The properties satisfying the predicate will be included in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var pickIfIsString = _.pickIf(_.isType(\"String\"));\n     *\n     * pickIfIsString(user) // => {name: \"john\", surname: \"doe\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys}\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipKeys|skipKeys},\n     * {@link module:lamb.skipIf|skipIf}\n     * @param {ObjectIteratorCallback} predicate\n     * @returns {Function}\n     */\n    function pickIf (predicate) {\n        return function (source) {\n            if (isNil(source)) {\n                throw _makeTypeErrorFor(source, \"object\");\n            }\n\n            var result = {};\n\n            for (var key in source) {\n                if (predicate(source[key], key, source)) {\n                    result[key] = source[key];\n                }\n            }\n\n            return result;\n        };\n    }\n\n    /**\n     * A curried version of {@link module:lamb.pick|pick}, expecting a whitelist of keys to build\n     * a function waiting for the object to act upon.\n     * @example\n     * var user = {id: 1, name: \"Jane\", surname: \"Doe\", active: false};\n     * var getUserInfo = _.pickKeys([\"id\", \"active\"]);\n     *\n     * getUserInfo(user) // => {id: 1, active: false}\n     *\n     * @example <caption>A useful composition with <code>mapWith</code>:</caption>\n     * var users = [\n     *     {id: 1, name: \"Jane\", surname: \"Doe\", active: false},\n     *     {id: 2, name: \"John\", surname: \"Doe\", active: true},\n     *     {id: 3, name: \"Mario\", surname: \"Rossi\", active: true},\n     *     {id: 4, name: \"Paolo\", surname: \"Bianchi\", active: false}\n     * ];\n     * var select = _.compose(_.mapWith, _.pickKeys);\n     * var selectUserInfo = select([\"id\", \"active\"]);\n     *\n     * selectUserInfo(users) // =>\n     * // [\n     * //     {id: 1, active: false},\n     * //     {id: 2, active: true},\n     * //     {id: 3, active: true},\n     * //     {id: 4, active: false}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickIf|pickIf}\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipKeys|skipKeys},\n     * {@link module:lamb.skipIf|skipIf}\n     * @param {String[]} whitelist\n     * @returns {Function}\n     */\n    var pickKeys = _curry2(pick, true);\n\n    /**\n     * Creates a copy of the given object with its enumerable keys renamed as\n     * indicated in the provided lookup table.\n     * @example\n     * var person = {\"firstName\": \"John\", \"lastName\": \"Doe\"};\n     * var keysMap = {\"firstName\": \"name\", \"lastName\": \"surname\"};\n     *\n     * _.rename(person, keysMap) // => {\"name\": \"John\", \"surname\": \"Doe\"}\n     *\n     * @example <caption>It's safe using it to swap keys:</caption>\n     * var keysMap = {\"firstName\": \"lastName\", \"lastName\": \"firstName\"};\n     *\n     * _.rename(person, keysMap) // => {\"lastName\": \"John\", \"firstName\": \"Doe\"}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.renameKeys|renameKeys}, {@link module:lamb.renameWith|renameWith}\n     * @param {Object} source\n     * @param {Object} keysMap\n     * @returns {Object}\n     */\n    function rename (source, keysMap) {\n        keysMap = Object(keysMap);\n        var result = {};\n        var oldKeys = enumerables(source);\n\n        for (var prop in keysMap) {\n            if (~oldKeys.indexOf(prop)) {\n                result[keysMap[prop]] = source[prop];\n            }\n        }\n\n        for (var i = 0, len = oldKeys.length, key; i < len; i++) {\n            key = oldKeys[i];\n\n            if (!(key in keysMap || key in result)) {\n                result[key] = source[key];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * A curried version of {@link module:lamb.rename|rename} expecting a\n     * <code>keysMap</code> to build a function waiting for the object to act upon.\n     * @example\n     * var persons = [\n     *     {\"firstName\": \"John\", \"lastName\": \"Doe\"},\n     *     {\"first_name\": \"Mario\", \"last_name\": \"Rossi\"},\n     * ];\n     * var normalizeKeys = _.renameKeys({\n     *     \"firstName\": \"name\",\n     *     \"first_name\": \"name\",\n     *     \"lastName\": \"surname\",\n     *     \"last_name\": \"surname\"\n     * });\n     *\n     * _.map(persons, normalizeKeys) // =>\n     * // [\n     * //     {\"name\": \"John\", \"surname\": \"Doe\"},\n     * //     {\"name\": \"Mario\", \"surname\": \"Rossi\"}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.rename|rename}, {@link module:lamb.renameWith|renameWith}\n     * @param {Object} keysMap\n     * @returns {Function}\n     */\n    var renameKeys = _curry2(rename, true);\n\n    /**\n     * Uses the provided function as a <code>keysMap</code> generator and returns\n     * a function expecting the object whose keys we want to {@link module:lamb.rename|rename}.\n     * @example\n     * var person = {\"NAME\": \"John\", \"SURNAME\": \"Doe\"};\n     * var arrayToLower = _.mapWith(_.invoker(\"toLowerCase\"));\n     * var makeLowerKeysMap = function (source) {\n     *     var sourceKeys = _.keys(source);\n     *\n     *     return _.make(sourceKeys, arrayToLower(sourceKeys));\n     * };\n     * var lowerKeysFor = _.renameWith(makeLowerKeysMap);\n     *\n     * lowerKeysFor(person) // => {\"name\": \"John\", \"surname\": \"doe\"};\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.rename|rename}, {@link module:lamb.renameKeys|renameKeys}\n     * @param {Function} fn\n     * @returns {Function}\n     */\n    function renameWith (fn) {\n        return function (source) {\n            return rename(source, fn(source));\n        };\n    }\n\n    /**\n     * Returns a copy of the source object without the specified properties.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.skip(user, [\"name\", \"age\"]) // => {surname: \"doe\"};\n     * _.skip(user, [\"name\", \"email\"]) // => {surname: \"doe\", age: 30};\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.skipKeys|skipKeys}, {@link module:lamb.skipIf|skipIf}\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys},\n     * {@link module:lamb.pickIf|pickIf}\n     * @param {Object} source\n     * @param {String[]} blacklist\n     * @returns {Object}\n     */\n    function skip (source, blacklist) {\n        if (isNil(source)) {\n            throw _makeTypeErrorFor(source, \"object\");\n        }\n\n        var result = {};\n        var props = make(blacklist, []);\n\n        for (var key in source) {\n            if (!(key in props)) {\n                result[key] = source[key];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Builds a function expecting an object whose enumerable properties will be checked\n     * against the given predicate.<br/>\n     * The properties satisfying the predicate will be omitted in the resulting object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     * var skipIfIstring = _.skipIf(_.isType(\"String\"));\n     *\n     * skipIfIstring(user) // => {age: 30}\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipKeys|skipKeys}\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys},\n     * {@link module:lamb.pickIf|pickIf}\n     * @param {ObjectIteratorCallback} predicate\n     * @returns {Function}\n     */\n    var skipIf = compose(pickIf, not);\n\n    /**\n     * A curried version of {@link module:lamb.skip|skip}, expecting a blacklist of keys to build\n     * a function waiting for the object to act upon.\n     * @example\n     * var user = {id: 1, name: \"Jane\", surname: \"Doe\", active: false};\n     * var getUserInfo = _.skipKeys([\"name\", \"surname\"]);\n     *\n     * getUserInfo(user) // => {id: 1, active: false}\n     *\n     * @example <caption>A useful composition with <code>mapWith</code>:</caption>\n     * var users = [\n     *     {id: 1, name: \"Jane\", surname: \"Doe\", active: false},\n     *     {id: 2, name: \"John\", surname: \"Doe\", active: true},\n     *     {id: 3, name: \"Mario\", surname: \"Rossi\", active: true},\n     *     {id: 4, name: \"Paolo\", surname: \"Bianchi\", active: false}\n     * ];\n     * var discard = _.compose(_.mapWith, _.skipKeys);\n     * var discardNames = discard([\"name\", \"surname\"]);\n     *\n     * discardNames(users) // =>\n     * // [\n     * //     {id: 1, active: false},\n     * //     {id: 2, active: true},\n     * //     {id: 3, active: true},\n     * //     {id: 4, active: false}\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.skip|skip}, {@link module:lamb.skipIf|skipIf}\n     * @see {@link module:lamb.pick|pick}, {@link module:lamb.pickKeys|pickKeys},\n     * {@link module:lamb.pickIf|pickIf}\n     * @param {String[]} blacklist\n     * @returns {Function}\n     */\n    var skipKeys = _curry2(skip, true);\n\n    /**\n     * Tears an object apart by transforming it in an array of two lists: one containing\n     * its enumerable keys, the other containing the corresponding values.<br/>\n     * Although this \"tearing apart\" may sound as a rather violent process, the source\n     * object will be unharmed.\n     * @example\n     * _.tear({a: 1, b: 2, c: 3}) // => [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.tearOwn|tearOwn}\n     * @see {@link module:lamb.make|make} for the reverse operation\n     * @param {Object} obj\n     * @returns {Array<Array<String>, Array<*>>}\n     */\n    var tear = _tearFrom(enumerables);\n\n    /**\n     * Same as {@link module:lamb.tear|tear}, but only the own properties of the object are\n     * taken into account.\n     * @example <caption>Showing the difference with <code>tear</code>:</caption>\n     * var baseFoo = Object.create({a: 1}, {b: {value: 2, enumerable: true}, z: {value: 5}});\n     * var foo = Object.create(baseFoo, {\n     *     c: {value: 3, enumerable: true}\n     * });\n     *\n     * _.tear(foo) // => [[\"c\", \"b\", \"a\"], [3, 2, 1]]\n     * _.tearOwn(foo) // => [[\"c\"], [3]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.tear|tear}\n     * @see {@link module:lamb.make|make} for the reverse operation\n     * @param {Object} obj\n     * @returns {Array<Array<String>, Array<*>>}\n     */\n    var tearOwn = _tearFrom(keys);\n\n    /**\n     * Generates an array with the values of the enumerable properties of the given object.<br/>\n     * See also {@link module:lamb.ownValues|ownValues} to pick only from the own properties of the object.\n     * @example\n     * var user = {name: \"john\", surname: \"doe\", age: 30};\n     *\n     * _.values(user) // => [\"john\", \"doe\", 30]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.ownValues|ownValues}\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var values = _valuesFrom(enumerables);\n\n    lamb.enumerables = enumerables;\n    lamb.fromPairs = fromPairs;\n    lamb.immutable = immutable;\n    lamb.keys = keys;\n    lamb.make = make;\n    lamb.merge = merge;\n    lamb.mergeOwn = mergeOwn;\n    lamb.ownPairs = ownPairs;\n    lamb.ownValues = ownValues;\n    lamb.pairs = pairs;\n    lamb.pick = pick;\n    lamb.pickIf = pickIf;\n    lamb.pickKeys = pickKeys;\n    lamb.rename = rename;\n    lamb.renameKeys = renameKeys;\n    lamb.renameWith = renameWith;\n    lamb.skip = skip;\n    lamb.skipIf = skipIf;\n    lamb.skipKeys = skipKeys;\n    lamb.tear = tear;\n    lamb.tearOwn = tearOwn;\n    lamb.values = values;\n\n    /**\n     * Builds a <code>checker</code> function meant to be used with\n     * {@link module:lamb.validate|validate}.<br/>\n     * Note that the function accepts multiple <code>keyPaths</code> as a means to\n     * compare their values. In other words all the received <code>keyPaths</code> will be\n     * passed as arguments to the <code>predicate</code> to run the test.<br/>\n     * If you want to run the same single property check with multiple properties, you should build\n     * multiple <code>checker</code>s and combine them with {@link module:lamb.validate|validate}.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     login: {\n     *         username: \"jdoe\",\n     *         password: \"abc123\",\n     *         passwordConfirm: \"abc123\"\n     *     }\n     * };\n     * var pwdMatch = _.checker(\n     *     _.is,\n     *     \"Passwords don't match\",\n     *     [\"login.password\", \"login.passwordConfirm\"]\n     * );\n     *\n     * pwdMatch(user) // => []\n     *\n     * var newUser = _.setPathIn(user, \"login.passwordConfirm\", \"avc123\");\n     *\n     * pwdMatch(newUser) // => [\"Passwords don't match\", [\"login.password\", \"login.passwordConfirm\"]]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.validate|validate}, {@link module:lamb.validateWith|validateWith}\n     * @param {Function} predicate - The predicate to test the object properties\n     * @param {String} message - The error message\n     * @param {String[]} keyPaths - The array of keys, or {@link module:lamb.getPathIn|paths}, to test.\n     * @param {String} [pathSeparator=\".\"]\n     * @returns {Function} A checker function which returns an error in the form\n     * <code>[\"message\", [\"propertyA\", \"propertyB\"]]</code> or an empty array.\n     */\n    function checker (predicate, message, keyPaths, pathSeparator) {\n        return function (obj) {\n            var getValues = partial(getPathIn, obj, _, pathSeparator);\n\n            return predicate.apply(obj, map(keyPaths, getValues)) ? [] : [message, keyPaths];\n        };\n    }\n\n    /**\n     * Verifies the existence of a property in an object.\n     * @example\n     * var user1 = {name: \"john\"};\n     *\n     * _.has(user1, \"name\") // => true\n     * _.has(user1, \"surname\") // => false\n     * _.has(user1, \"toString\") // => true\n     *\n     * var user2 = Object.create(null);\n     *\n     * // not inherited through the prototype chain\n     * _.has(user2, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.hasKey|hasKey}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    function has (obj, key) {\n        if (typeof obj !== \"object\" && !isUndefined(obj)) {\n            obj = Object(obj);\n        }\n\n        return key in obj;\n    }\n\n    /**\n     * Curried version of {@link module:lamb.has|has}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user1 = {name: \"john\"};\n     * var user2 = {};\n     * var hasName = _.hasKey(\"name\");\n     *\n     * hasName(user1) // => true\n     * hasName(user2) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.has|has}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasKey = _curry2(has, true);\n\n    /**\n     * Builds a predicate expecting an object to check against the given key / value pair.<br/>\n     * The value check is made with the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}.\n     * @example\n     * var hasTheCorrectAnswer = _.hasKeyValue(\"answer\", 42);\n     *\n     * hasTheCorrectAnswer({answer: 2}) // false\n     * hasTheCorrectAnswer({answer: 42}) // true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.hasPathValue|hasPathValue}\n     * @param {String} key\n     * @param {*} value\n     * @returns {Function}\n     */\n    function hasKeyValue (key, value) {\n        return function (obj) {\n            return isUndefined(value) ? has(obj, key) : areSVZ(value, obj[key]);\n        };\n    }\n\n    /**\n     * Verifies if an object has the specified property and that the property isn't inherited through\n     * the prototype chain.<br/>\n     * @example <caption>Comparison with <code>has</code>:</caption>\n     * var user = {name: \"john\"};\n     *\n     * _.has(user, \"name\") // => true\n     * _.has(user, \"surname\") // => false\n     * _.has(user, \"toString\") // => true\n     *\n     * _.hasOwn(user, \"name\") // => true\n     * _.hasOwn(user, \"surname\") // => false\n     * _.hasOwn(user, \"toString\") // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {Object} obj\n     * @param {String} key\n     * @returns {Boolean}\n     */\n    var hasOwn = generic(_objectProto.hasOwnProperty);\n\n    /**\n     * Curried version of {@link module:lamb.hasOwn|hasOwn}.<br/>\n     * Returns a function expecting the object to check against the given key.\n     * @example\n     * var user = {name: \"john\"};\n     * var hasOwnName = _.hasOwnKey(\"name\");\n     * var hasOwnToString = _.hasOwnToString(\"toString\");\n     *\n     * hasOwnName(user) // => true\n     * hasOwnToString(user) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.hasOwn|hasOwn}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}, {@link module:lamb.pathExists|pathExists}\n     * @param {String} key\n     * @returns {Function}\n     */\n    var hasOwnKey = _curry2(hasOwn, true);\n\n    /**\n     * Builds a predicate to check if the given path exists in an object and holds the desired value.<br/>\n     * The value check is made with the [\"SameValueZero\" comparison]{@link module:lamb.areSVZ|areSVZ}.<br/>\n     * Note that the function will check even non-enumerable properties.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     personal: {\n     *         age: 25,\n     *         gender: \"M\"\n     *     },\n     *     scores: [\n     *         {id: 1, value: 10, passed: false},\n     *         {id: 2, value: 20, passed: false},\n     *         {id: 3, value: 30, passed: true}\n     *     ]\n     * };\n     *\n     * var isMale = _.hasPathValue(\"personal.gender\", \"M\");\n     * var hasPassedFirstTest = _.hasPathValue(\"scores.0.passed\", true);\n     * var hasPassedLastTest = _.hasPathValue(\"scores.-1.passed\", true);\n     *\n     * isMale(user) // => true\n     * hasPassedFirstTest(user) // => false\n     * hasPassedLastTest(user) // => true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.hasKeyValue|hasKeyValue}\n     * @param {String} path\n     * @param {*} value\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function hasPathValue (path, value, separator) {\n        return function (obj) {\n            var pathInfo = _getPathInfo(obj, _toPathParts(path, separator), true);\n\n            return pathInfo.isValid && areSVZ(pathInfo.target, value);\n        };\n    }\n\n    /**\n     * Builds a predicate to check if the given key satisfies the desired condition\n     * on an object.\n     * @example\n     * var users = [\n     *     {name: \"John\", age: 25},\n     *     {name: \"Jane\", age: 15},\n     * ];\n     * var isAdult = _.keySatisfies(_.isGTE(18), \"age\");\n     *\n     * isAdult(users[0]) // => true\n     * isAdult(users[1]) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pathSatisfies|pathSatisfies}\n     * @param {Function} predicate\n     * @param {String} key\n     * @returns {Function}\n     */\n    function keySatisfies (predicate, key) {\n        return function (obj) {\n            return predicate.call(this, obj[key]);\n        };\n    }\n\n    /**\n     * Builds a partial application of {@link module:lamb.pathExistsIn|pathExistsIn} using the given\n     * path and the optional separator. The resulting function expects the object to check.<br/>\n     * Note that the function will check even non-enumerable properties.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     address: {\n     *         city: \"New York\"\n     *     },\n     *     scores: [10, 20, 15]\n     * };\n     *\n     * var hasCity = _.pathExists(\"address.city\");\n     * var hasCountry = _.pathExists(\"address.country\");\n     * var hasAtLeastThreeScores = _.pathExists(\"scores.2\");\n     *\n     * hasCity(user) // => true\n     * hasCountry(user) // => false\n     * hasAtLeastThreeScores(user) // => true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.pathExistsIn|pathExistsIn}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    var pathExists = _makePartial3(pathExistsIn);\n\n    /**\n     * Checks if the provided path exists in the given object.<br/>\n     * Note that the function will check even non-enumerable properties.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     surname: \"Doe\",\n     *     address: {\n     *         city: \"New York\"\n     *     },\n     *     scores: [10, 20, 15]\n     * };\n     *\n     * _.pathExistsIn(user, \"address.city\") // => true\n     * _.pathExistsIn(user, \"address.country\") // => false\n     * _.pathExistsIn(user, \"scores.1\") // => true\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.pathExists|pathExists}\n     * @see {@link module:lamb.hasOwn|hasOwn}, {@link module:lamb.hasOwnKey|hasOwnKey}\n     * @see {@link module:lamb.has|has}, {@link module:lamb.hasKey|hasKey}\n     * @param {Object} obj\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Boolean}\n     */\n    function pathExistsIn (obj, path, separator) {\n        return _getPathInfo(obj, _toPathParts(path, separator), true).isValid;\n    }\n\n    /**\n     * Builds a predicate that verifies if a condition is satisfied for the given\n     * path in an object.<br/>\n     * Like the other \"path functions\" you can use integers in the path, even\n     * negative ones, to refer to array-like object indexes, but the priority will\n     * be given to existing object keys.\n     * @example\n     * var user = {\n     *     name: \"John\",\n     *     performance: {\n     *         scores: [1, 5, 10]\n     *     }\n     * };\n     *\n     * var gotAnHighScore = _.pathSatisfies(_.contains(10), \"performance.scores\");\n     * var hadAGoodStart = _.pathSatisfies(_.isGT(6), \"performance.scores.0\");\n     *\n     * gotAnHighScore(user) // => true\n     * hadAGoodStart(user) // => false\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.keySatisfies|keySatisfies}\n     * @param {Function} predicate\n     * @param {String} path\n     * @param {String} [separator=\".\"]\n     * @returns {Function}\n     */\n    function pathSatisfies (predicate, path, separator) {\n        return function (obj) {\n            var pathInfo = _getPathInfo(obj, _toPathParts(path, separator), true);\n\n            return predicate.call(this, pathInfo.target);\n        };\n    }\n\n    /**\n     * Validates an object with the given list of {@link module:lamb.checker|checker} functions.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(_.isGTE(18), \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * _.validate(user1, userCheckers) // => []\n     * _.validate(user2, userCheckers) // =>\n     * // [\n     * //     [\"Surname is required\", [\"surname\"]],\n     * //     [\"Must be at least 18 years old\", [\"age\"]]\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @see {@link module:lamb.validateWith|validateWith}\n     * @see {@link module:lamb.checker|checker}\n     * @param {Object} obj\n     * @param {Function[]} checkers\n     * @returns {Array<Array<String, String[]>>} An array of errors in the form returned by\n     * {@link module:lamb.checker|checker}, or an empty array.\n     */\n    function validate (obj, checkers) {\n        return reduce(checkers, function (errors, _checker) {\n            var result = _checker(obj);\n\n            result.length && errors.push(result);\n\n            return errors;\n        }, []);\n    }\n\n    /**\n     * A curried version of {@link module:lamb.validate|validate} accepting a list of\n     * {@link module:lamb.checker|checkers} and returning a function expecting the object to validate.\n     * @example\n     * var hasContent = function (s) { return s.trim().length > 0; };\n     * var userCheckers = [\n     *     _.checker(hasContent, \"Name is required\", [\"name\"]),\n     *     _.checker(hasContent, \"Surname is required\", [\"surname\"]),\n     *     _.checker(_.isGTE(18), \"Must be at least 18 years old\", [\"age\"])\n     * ];\n     * var validateUser = _.validateWith(userCheckers);\n     *\n     * var user1 = {name: \"john\", surname: \"doe\", age: 30};\n     * var user2 = {name: \"jane\", surname: \"\", age: 15};\n     *\n     * validateUser(user1) // => []\n     * validateUser(user2) // =>\n     * // [\n     * //     [\"Surname is required\", [\"surname\"]],\n     * //     [\"Must be at least 18 years old\", [\"age\"]]\n     * // ]\n     *\n     * @memberof module:lamb\n     * @category Object\n     * @function\n     * @see {@link module:lamb.validate|validate}\n     * @see {@link module:lamb.checker|checker}\n     * @param {Function[]} checkers\n     * @returns {Function}\n     */\n    var validateWith = _curry2(validate, true);\n\n    lamb.checker = checker;\n    lamb.has = has;\n    lamb.hasKey = hasKey;\n    lamb.hasKeyValue = hasKeyValue;\n    lamb.hasOwn = hasOwn;\n    lamb.hasOwnKey = hasOwnKey;\n    lamb.hasPathValue = hasPathValue;\n    lamb.keySatisfies = keySatisfies;\n    lamb.pathExists = pathExists;\n    lamb.pathExistsIn = pathExistsIn;\n    lamb.pathSatisfies = pathSatisfies;\n    lamb.validate = validate;\n    lamb.validateWith = validateWith;\n\n    /**\n     * Pads a string to the desired length with the given char starting from the beginning of the string.\n     * @example\n     * _.padLeft(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padLeft(\"foo\", \"-\", 5) // => \"--foo\"\n     * _.padLeft(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padLeft(\"foo\", \"ab\", 7) // => \"aaaafoo\"\n     * _.padLeft(\"foo\", \"\", 5) // => \"foo\"\n     * _.padLeft(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @see {@link module:lamb.padRight|padRight}\n     * @param {String} source\n     * @param {String} char - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padLeft (source, char, len) {\n        return _getPadding(source, char, len) + source;\n    }\n\n    /**\n     * Pads a string to the desired length with the given char starting from the end of the string.\n     * @example\n     * _.padRight(\"foo\", \"-\", 0) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", -1) // => \"foo\"\n     * _.padRight(\"foo\", \"-\", 5) // => \"foo--\"\n     * _.padRight(\"foo\", \"-\", 3) // => \"foo\"\n     * _.padRight(\"foo\", \"ab\", 7) // => \"fooaaaa\"\n     * _.padRight(\"foo\", \"\", 5) // => \"foo\"\n     * _.padRight(\"\", \"-\", 5) // => \"-----\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @see {@link module:lamb.padLeft|padLeft}\n     * @param {String} source\n     * @param {String} char - The padding char. If a string is passed only the first char is used.\n     * @param {Number} len\n     * @returns {String}\n     */\n    function padRight (source, char, len) {\n        return source + _getPadding(source, char, len);\n    }\n\n    /**\n     * Builds a new string by repeating the source string the desired amount of times.<br/>\n     * Note that unlike the current ES6 proposal for\n     * [String.prototype.repeat]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat},\n     * this function doesn't throw a RangeError if <code>times</code> is negative,\n     * but returns an empty string instead.\n     * @example\n     * _.repeat(\"Hello\", -1) // => \"\"\n     * _.repeat(\"Hello\", 1) // => \"Hello\"\n     * _.repeat(\"Hello\", 3) // => \"HelloHelloHello\"\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {String} source\n     * @param {Number} times\n     * @returns {String}\n     */\n    function repeat (source, times) {\n        if (isNil(source)) {\n            throw _makeTypeErrorFor(source, \"string\");\n        }\n\n        return _repeat(source, Math.floor(times));\n    }\n\n    /**\n     * Builds a predicate expecting a string to test against the given regular expression pattern.\n     * @example\n     * var hasNumbersOnly = _.testWith(/^\\d+$/);\n     *\n     * hasNumbersOnly(\"123\") // => true\n     * hasNumbersOnly(\"123 Kg\") // => false\n     *\n     * @memberof module:lamb\n     * @category String\n     * @param {RegExp} pattern\n     * @returns {Function}\n     */\n    function testWith (pattern) {\n        return function (s) {\n            return _search(s, pattern) !== -1;\n        };\n    }\n\n    lamb.padLeft = padLeft;\n    lamb.padRight = padRight;\n    lamb.repeat = repeat;\n    lamb.testWith = testWith;\n\n    /* istanbul ignore next */\n    if (typeof exports === \"object\") {\n        module.exports = lamb;\n    } else if (typeof define === \"function\" && define.amd) {\n        define(function () {\n            return lamb;\n        });\n    } else {\n        host.lamb = lamb;\n    }\n})(this);\n\n/**\n * @callback AccumulatorCallback\n * @global\n * @param {*} previousValue - The value returned it the last execution of the accumulator or, in the first\n * iteration, the {@link module:lamb.reduce|initialValue} if supplied.\n * @param {*} currentValue - The value being processed in the current iteration.\n * @param {Number} idx - The index of the element being processed.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in arguments object.\n * @typedef {arguments} arguments\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments|arguments} in Mozilla documentation.\n */\n\n/**\n * The built-in Array object.\n * @typedef {Array} Array\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array|Array} in Mozilla documentation.\n */\n\n/**\n * Any array-like object.\n * @typedef {Array|String|arguments|?} ArrayLike\n * @global\n */\n\n/**\n * The built-in Boolean object.\n * @typedef {Boolean} Boolean\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean|Boolean} in Mozilla documentation.\n */\n\n/**\n * The built-in Date object.\n * @typedef {Date} Date\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date|Date} in Mozilla documentation.\n */\n\n/**\n * The built-in Function object.\n * @typedef {Function} function\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function|Function} and\n *      {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions|Functions} in Mozilla documentation.\n */\n\n/**\n * @callback ListIteratorCallback\n * @global\n * @param {*} element - The element being evaluated.\n * @param {Number} idx - The index of the element within the list.\n * @param {ArrayLike} arrayLike - The list being traversed.\n */\n\n/**\n * The built-in Number object.\n * @typedef {Number} Number\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number|Number} in Mozilla documentation.\n */\n\n/**\n * The built-in Object object.\n * @typedef {Object} Object\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object|Object} in Mozilla documentation.\n */\n\n/**\n * @callback ObjectIteratorCallback\n * @global\n * @param {*} value - The value of the current property.\n * @param {String} key - The property name.\n * @param {Object} source - The object being traversed.\n */\n\n/**\n * The built-in RegExp object.\n * @typedef {RegExp} RegExp\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp|RegExp} in Mozilla documentation.\n */\n\n/**\n * Represents a sorting criteria used by {@link module:lamb.sortedInsert|sortedInsert},\n * {@link module:lamb.sort|sort} and {@link module:lamb.sortWith|sortWith}, and it's\n * usually built using {@link module:lamb.sorter|sorter} and {@link module:lamb.sorterDesc|sorterDesc}.\n * @typedef {Sorter} Sorter\n * @global\n * @property {Boolean} isDescending\n * @property {Function} compare\n */\n\n/**\n * The built-in String object.\n * @typedef {String} String\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String|String} in Mozilla documentation.\n */\n\n/**\n * The built-in primitive value <code>undefined</code>\n * @typedef {Undefined} Undefined\n * @global\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined|undefined} in Mozilla documentation.\n */\n"]}